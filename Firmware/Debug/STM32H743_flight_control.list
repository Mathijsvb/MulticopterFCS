
STM32H743_flight_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7e0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800ba80  0800ba80  0001ba80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bb80  0800bb80  0001bb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bb88  0800bb88  0001bb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bb8c  0800bb8c  0001bb8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800bb90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004bf8  24000078  0800bc08  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c70  0800bc08  00024c70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002aa8b  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046ba  00000000  00000000  0004ab31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f78  00000000  00000000  0004f1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001de0  00000000  00000000  00051168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bfe5  00000000  00000000  00052f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002673c  00000000  00000000  0008ef2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00184e05  00000000  00000000  000b5669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023a46e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008af8  00000000  00000000  0023a4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ba68 	.word	0x0800ba68

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800ba68 	.word	0x0800ba68

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	24000094 	.word	0x24000094
 8000614:	24000148 	.word	0x24000148

08000618 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <vApplicationGetTimerTaskMemory+0x2c>)
 8000628:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <vApplicationGetTimerTaskMemory+0x30>)
 800062e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000636:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	24000348 	.word	0x24000348
 8000648:	240003fc 	.word	0x240003fc

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b08e      	sub	sp, #56	; 0x38
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f001 fc4b 	bl	8001eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f84f 	bl	80006f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800065a:	f000 f903 	bl	8000864 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 fd85 	bl	800116c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000662:	f000 f9ad 	bl	80009c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000666:	f000 f9eb 	bl	8000a40 <MX_I2C2_Init>
  MX_TIM4_Init();
 800066a:	f000 fb19 	bl	8000ca0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800066e:	f000 fb93 	bl	8000d98 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000672:	f000 fc8f 	bl	8000f94 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000676:	f000 fd71 	bl	800115c <MX_USB_OTG_FS_USB_Init>
  MX_UART4_Init();
 800067a:	f000 fbf3 	bl	8000e64 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800067e:	f000 fcd5 	bl	800102c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000682:	f000 fd1f 	bl	80010c4 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000686:	f000 fc39 	bl	8000efc <MX_UART5_Init>
  MX_I2C4_Init();
 800068a:	f000 fa19 	bl	8000ac0 <MX_I2C4_Init>
  MX_ADC1_Init();
 800068e:	f000 f91f 	bl	80008d0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000692:	f000 faab 	bl	8000bec <MX_TIM3_Init>
  MX_SPI4_Init();
 8000696:	f000 fa53 	bl	8000b40 <MX_SPI4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BlinkLED1 */
  osThreadDef(BlinkLED1, StartBlinkLED1, osPriorityLow, 0, 128);
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <main+0x9c>)
 800069c:	f107 041c 	add.w	r4, r7, #28
 80006a0:	461d      	mov	r5, r3
 80006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkLED1Handle = osThreadCreate(osThread(BlinkLED1), NULL);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f008 fc36 	bl	8008f26 <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <main+0xa0>)
 80006be:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkLED2 */
  osThreadDef(BlinkLED2, StartBlinkLED2, osPriorityBelowNormal, 0, 128);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <main+0xa4>)
 80006c2:	463c      	mov	r4, r7
 80006c4:	461d      	mov	r5, r3
 80006c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkLED2Handle = osThreadCreate(osThread(BlinkLED2), NULL);
 80006d2:	463b      	mov	r3, r7
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 fc25 	bl	8008f26 <osThreadCreate>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <main+0xa8>)
 80006e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006e2:	f008 fc19 	bl	8008f18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <main+0x9a>
 80006e8:	0800ba98 	.word	0x0800ba98
 80006ec:	24000d80 	.word	0x24000d80
 80006f0:	0800bab4 	.word	0x0800bab4
 80006f4:	24000d84 	.word	0x24000d84

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b09e      	sub	sp, #120	; 0x78
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000702:	224c      	movs	r2, #76	; 0x4c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00b f8e4 	bl	800b8d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2220      	movs	r2, #32
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f00b f8dd 	bl	800b8d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800071a:	2002      	movs	r0, #2
 800071c:	f003 f8ea 	bl	80038f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b4c      	ldr	r3, [pc, #304]	; (8000858 <SystemClock_Config+0x160>)
 8000726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000728:	4a4b      	ldr	r2, [pc, #300]	; (8000858 <SystemClock_Config+0x160>)
 800072a:	f023 0301 	bic.w	r3, r3, #1
 800072e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000730:	4b49      	ldr	r3, [pc, #292]	; (8000858 <SystemClock_Config+0x160>)
 8000732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b48      	ldr	r3, [pc, #288]	; (800085c <SystemClock_Config+0x164>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a47      	ldr	r2, [pc, #284]	; (800085c <SystemClock_Config+0x164>)
 8000740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b45      	ldr	r3, [pc, #276]	; (800085c <SystemClock_Config+0x164>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000752:	bf00      	nop
 8000754:	4b41      	ldr	r3, [pc, #260]	; (800085c <SystemClock_Config+0x164>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800075c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000760:	d1f8      	bne.n	8000754 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b3f      	ldr	r3, [pc, #252]	; (8000860 <SystemClock_Config+0x168>)
 8000764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000768:	4a3d      	ldr	r2, [pc, #244]	; (8000860 <SystemClock_Config+0x168>)
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000772:	4b3b      	ldr	r3, [pc, #236]	; (8000860 <SystemClock_Config+0x168>)
 8000774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4b35      	ldr	r3, [pc, #212]	; (800085c <SystemClock_Config+0x164>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a34      	ldr	r2, [pc, #208]	; (800085c <SystemClock_Config+0x164>)
 800078a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b32      	ldr	r3, [pc, #200]	; (800085c <SystemClock_Config+0x164>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <SystemClock_Config+0x160>)
 800079c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079e:	4a2e      	ldr	r2, [pc, #184]	; (8000858 <SystemClock_Config+0x160>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007a6:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <SystemClock_Config+0x160>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007b2:	bf00      	nop
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <SystemClock_Config+0x164>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007c0:	d1f8      	bne.n	80007b4 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <SystemClock_Config+0x168>)
 80007c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c6:	f023 0303 	bic.w	r3, r3, #3
 80007ca:	4a25      	ldr	r2, [pc, #148]	; (8000860 <SystemClock_Config+0x168>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d2:	2301      	movs	r3, #1
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e0:	2302      	movs	r3, #2
 80007e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80007e8:	233c      	movs	r3, #60	; 0x3c
 80007ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007f8:	230c      	movs	r3, #12
 80007fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000808:	4618      	mov	r0, r3
 800080a:	f003 f8ad 	bl	8003968 <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000814:	f000 fdc2 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	233f      	movs	r3, #63	; 0x3f
 800081a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2303      	movs	r3, #3
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000824:	2308      	movs	r3, #8
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000828:	2340      	movs	r3, #64	; 0x40
 800082a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2104      	movs	r1, #4
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fcbf 	bl	80041c4 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800084c:	f000 fda6 	bl	800139c <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3778      	adds	r7, #120	; 0x78
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	58000400 	.word	0x58000400
 800085c:	58024800 	.word	0x58024800
 8000860:	58024400 	.word	0x58024400

08000864 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0b0      	sub	sp, #192	; 0xc0
 8000868:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	22bc      	movs	r2, #188	; 0xbc
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f00b f82f 	bl	800b8d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C2
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <PeriphCommonClock_Config+0x68>)
 8000878:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 10;
 800087e:	230a      	movs	r3, #10
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000886:	2304      	movs	r3, #4
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 4;
 800088a:	2304      	movs	r3, #4
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800088e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000898:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800089e:	2310      	movs	r3, #16
 80008a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80008aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80008ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4618      	mov	r0, r3
 80008b6:	f004 f853 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 80008c0:	f000 fd6c 	bl	800139c <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	37c0      	adds	r7, #192	; 0xc0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	00040009 	.word	0x00040009

080008d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
 80008f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <MX_ADC1_Init+0xe4>)
 80008f6:	4a30      	ldr	r2, [pc, #192]	; (80009b8 <MX_ADC1_Init+0xe8>)
 80008f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008fa:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MX_ADC1_Init+0xe4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000900:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800090e:	2204      	movs	r2, #4
 8000910:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000914:	2200      	movs	r2, #0
 8000916:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800091a:	2200      	movs	r2, #0
 800091c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000920:	2201      	movs	r2, #1
 8000922:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000926:	2200      	movs	r2, #0
 8000928:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000938:	2200      	movs	r2, #0
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800093e:	2200      	movs	r2, #0
 8000940:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000944:	2200      	movs	r2, #0
 8000946:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000952:	f001 fce3 	bl	800231c <HAL_ADC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800095c:	f000 fd1e 	bl	800139c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4812      	ldr	r0, [pc, #72]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800096c:	f002 faf8 	bl	8002f60 <HAL_ADCEx_MultiModeConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000976:	f000 fd11 	bl	800139c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_ADC1_Init+0xec>)
 800097c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097e:	2306      	movs	r3, #6
 8000980:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000986:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800098c:	2304      	movs	r3, #4
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800099e:	f001 fe5f 	bl	8002660 <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80009a8:	f000 fcf8 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	240007fc 	.word	0x240007fc
 80009b8:	40022000 	.word	0x40022000
 80009bc:	0c900008 	.word	0x0c900008

080009c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_I2C1_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <MX_I2C1_Init+0x7c>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d8:	2201      	movs	r2, #1
 80009da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009fc:	f002 fe52 	bl	80036a4 <HAL_I2C_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a06:	f000 fcc9 	bl	800139c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a0e:	f002 fed9 	bl	80037c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a18:	f000 fcc0 	bl	800139c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a20:	f002 ff1b 	bl	800385a <HAL_I2CEx_ConfigDigitalFilter>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 fcb7 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	24000860 	.word	0x24000860
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	00909beb 	.word	0x00909beb

08000a40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <MX_I2C2_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <MX_I2C2_Init+0x7c>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a7a:	480e      	ldr	r0, [pc, #56]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a7c:	f002 fe12 	bl	80036a4 <HAL_I2C_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a86:	f000 fc89 	bl	800139c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a8e:	f002 fe99 	bl	80037c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a98:	f000 fc80 	bl	800139c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000aa0:	f002 fedb 	bl	800385a <HAL_I2CEx_ConfigDigitalFilter>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 fc77 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	240008ac 	.word	0x240008ac
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	00909beb 	.word	0x00909beb

08000ac0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <MX_I2C4_Init+0x78>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <MX_I2C4_Init+0x7c>)
 8000ace:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000afa:	480e      	ldr	r0, [pc, #56]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000afc:	f002 fdd2 	bl	80036a4 <HAL_I2C_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b06:	f000 fc49 	bl	800139c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000b0e:	f002 fe59 	bl	80037c4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b18:	f000 fc40 	bl	800139c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000b20:	f002 fe9b 	bl	800385a <HAL_I2CEx_ConfigDigitalFilter>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b2a:	f000 fc37 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	240008f8 	.word	0x240008f8
 8000b38:	58001c00 	.word	0x58001c00
 8000b3c:	307075b1 	.word	0x307075b1

08000b40 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b46:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <MX_SPI4_Init+0xa8>)
 8000b48:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b50:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b70:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b96:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bd0:	f006 f852 	bl	8006c78 <HAL_SPI_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000bda:	f000 fbdf 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	24000944 	.word	0x24000944
 8000be8:	40013400 	.word	0x40013400

08000bec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c12:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <MX_TIM3_Init+0xb0>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c36:	4818      	ldr	r0, [pc, #96]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c38:	f006 fa18 	bl	800706c <HAL_TIM_PWM_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c42:	f000 fbab 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4810      	ldr	r0, [pc, #64]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c56:	f007 f82b 	bl	8007cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c60:	f000 fb9c 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c64:	2360      	movs	r3, #96	; 0x60
 8000c66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	220c      	movs	r2, #12
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c7c:	f006 fb6c 	bl	8007358 <HAL_TIM_PWM_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c86:	f000 fb89 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c8a:	4803      	ldr	r0, [pc, #12]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c8c:	f000 fddc 	bl	8001848 <HAL_TIM_MspPostInit>

}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	240009cc 	.word	0x240009cc
 8000c9c:	40000400 	.word	0x40000400

08000ca0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cc4:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000cc6:	4a33      	ldr	r2, [pc, #204]	; (8000d94 <MX_TIM4_Init+0xf4>)
 8000cc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cca:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cea:	4829      	ldr	r0, [pc, #164]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000cec:	f006 f9be 	bl	800706c <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000cf6:	f000 fb51 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4821      	ldr	r0, [pc, #132]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d0a:	f006 ffd1 	bl	8007cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000d14:	f000 fb42 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	; 0x60
 8000d1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4818      	ldr	r0, [pc, #96]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d30:	f006 fb12 	bl	8007358 <HAL_TIM_PWM_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d3a:	f000 fb2f 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2204      	movs	r2, #4
 8000d42:	4619      	mov	r1, r3
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d46:	f006 fb07 	bl	8007358 <HAL_TIM_PWM_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000d50:	f000 fb24 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	2208      	movs	r2, #8
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d5c:	f006 fafc 	bl	8007358 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000d66:	f000 fb19 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	220c      	movs	r2, #12
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d72:	f006 faf1 	bl	8007358 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000d7c:	f000 fb0e 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d82:	f000 fd61 	bl	8001848 <HAL_TIM_MspPostInit>

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	24000a18 	.word	0x24000a18
 8000d94:	40000800 	.word	0x40000800

08000d98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dbe:	4a28      	ldr	r2, [pc, #160]	; (8000e60 <MX_TIM5_Init+0xc8>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000de2:	481e      	ldr	r0, [pc, #120]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000de4:	f006 f942 	bl	800706c <HAL_TIM_PWM_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000dee:	f000 fad5 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4816      	ldr	r0, [pc, #88]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000e02:	f006 ff55 	bl	8007cb0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000e0c:	f000 fac6 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	2208      	movs	r2, #8
 8000e24:	4619      	mov	r1, r3
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000e28:	f006 fa96 	bl	8007358 <HAL_TIM_PWM_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000e32:	f000 fab3 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	220c      	movs	r2, #12
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000e3e:	f006 fa8b 	bl	8007358 <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8000e48:	f000 faa8 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000e4e:	f000 fcfb 	bl	8001848 <HAL_TIM_MspPostInit>

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	24000a64 	.word	0x24000a64
 8000e60:	40000c00 	.word	0x40000c00

08000e64 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e6a:	4a23      	ldr	r2, [pc, #140]	; (8000ef8 <MX_UART4_Init+0x94>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000eac:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000eae:	f006 ffab 	bl	8007e08 <HAL_UART_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000eb8:	f000 fa70 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000ec0:	f007 ff48 	bl	8008d54 <HAL_UARTEx_SetTxFifoThreshold>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000eca:	f000 fa67 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000ed2:	f007 ff7d 	bl	8008dd0 <HAL_UARTEx_SetRxFifoThreshold>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000edc:	f000 fa5e 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000ee2:	f007 fefe 	bl	8008ce2 <HAL_UARTEx_DisableFifoMode>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000eec:	f000 fa56 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	24000ab0 	.word	0x24000ab0
 8000ef8:	40004c00 	.word	0x40004c00

08000efc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f02:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <MX_UART5_Init+0x94>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f44:	4811      	ldr	r0, [pc, #68]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f46:	f006 ff5f 	bl	8007e08 <HAL_UART_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000f50:	f000 fa24 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f54:	2100      	movs	r1, #0
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f58:	f007 fefc 	bl	8008d54 <HAL_UARTEx_SetTxFifoThreshold>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000f62:	f000 fa1b 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f6a:	f007 ff31 	bl	8008dd0 <HAL_UARTEx_SetRxFifoThreshold>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000f74:	f000 fa12 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f7a:	f007 feb2 	bl	8008ce2 <HAL_UARTEx_DisableFifoMode>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000f84:	f000 fa0a 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	24000b40 	.word	0x24000b40
 8000f90:	40005000 	.word	0x40005000

08000f94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <MX_USART1_UART_Init+0x94>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fdc:	4811      	ldr	r0, [pc, #68]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fde:	f006 ff13 	bl	8007e08 <HAL_UART_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fe8:	f000 f9d8 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000ff0:	f007 feb0 	bl	8008d54 <HAL_UARTEx_SetTxFifoThreshold>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ffa:	f000 f9cf 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8001002:	f007 fee5 	bl	8008dd0 <HAL_UARTEx_SetRxFifoThreshold>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800100c:	f000 f9c6 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8001012:	f007 fe66 	bl	8008ce2 <HAL_UARTEx_DisableFifoMode>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800101c:	f000 f9be 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	24000bd0 	.word	0x24000bd0
 8001028:	40011000 	.word	0x40011000

0800102c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001032:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <MX_USART2_UART_Init+0x94>)
 8001034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <MX_USART2_UART_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_USART2_UART_Init+0x90>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_USART2_UART_Init+0x90>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001074:	4811      	ldr	r0, [pc, #68]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001076:	f006 fec7 	bl	8007e08 <HAL_UART_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001080:	f000 f98c 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001084:	2100      	movs	r1, #0
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001088:	f007 fe64 	bl	8008d54 <HAL_UARTEx_SetTxFifoThreshold>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001092:	f000 f983 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001096:	2100      	movs	r1, #0
 8001098:	4808      	ldr	r0, [pc, #32]	; (80010bc <MX_USART2_UART_Init+0x90>)
 800109a:	f007 fe99 	bl	8008dd0 <HAL_UARTEx_SetRxFifoThreshold>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010a4:	f000 f97a 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_USART2_UART_Init+0x90>)
 80010aa:	f007 fe1a 	bl	8008ce2 <HAL_UARTEx_DisableFifoMode>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010b4:	f000 f972 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	24000c60 	.word	0x24000c60
 80010c0:	40004400 	.word	0x40004400

080010c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <MX_USART3_UART_Init+0x94>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_USART3_UART_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_USART3_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_USART3_UART_Init+0x90>)
 800110e:	f006 fe7b 	bl	8007e08 <HAL_UART_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001118:	f000 f940 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_USART3_UART_Init+0x90>)
 8001120:	f007 fe18 	bl	8008d54 <HAL_UARTEx_SetTxFifoThreshold>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800112a:	f000 f937 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112e:	2100      	movs	r1, #0
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <MX_USART3_UART_Init+0x90>)
 8001132:	f007 fe4d 	bl	8008dd0 <HAL_UARTEx_SetRxFifoThreshold>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800113c:	f000 f92e 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_USART3_UART_Init+0x90>)
 8001142:	f007 fdce 	bl	8008ce2 <HAL_UARTEx_DisableFifoMode>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800114c:	f000 f926 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000cf0 	.word	0x24000cf0
 8001158:	40004800 	.word	0x40004800

0800115c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001182:	4b57      	ldr	r3, [pc, #348]	; (80012e0 <MX_GPIO_Init+0x174>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	4a55      	ldr	r2, [pc, #340]	; (80012e0 <MX_GPIO_Init+0x174>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001192:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <MX_GPIO_Init+0x174>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a0:	4b4f      	ldr	r3, [pc, #316]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	4a4e      	ldr	r2, [pc, #312]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b0:	4b4b      	ldr	r3, [pc, #300]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	4a3f      	ldr	r2, [pc, #252]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ec:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	4a37      	ldr	r2, [pc, #220]	; (80012e0 <MX_GPIO_Init+0x174>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120a:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <MX_GPIO_Init+0x174>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_ON_GPIO_Port, BUZZ_ON_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	4831      	ldr	r0, [pc, #196]	; (80012e4 <MX_GPIO_Init+0x178>)
 800121e:	f002 fa0d 	bl	800363c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STATUS_LED1_R_Pin|STATUS_LED1_G_Pin|STATUS_LED1_B_Pin|STATUS_LED2_R_Pin
 8001222:	2200      	movs	r2, #0
 8001224:	f643 7102 	movw	r1, #16130	; 0x3f02
 8001228:	482f      	ldr	r0, [pc, #188]	; (80012e8 <MX_GPIO_Init+0x17c>)
 800122a:	f002 fa07 	bl	800363c <HAL_GPIO_WritePin>
                          |STATUS_LED2_G_Pin|STATUS_LED2_B_Pin|LED_EXT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IMU_INT_Pin PS_INT_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin|PS_INT_Pin|MAG_INT_Pin;
 800122e:	f248 0309 	movw	r3, #32777	; 0x8009
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4829      	ldr	r0, [pc, #164]	; (80012e8 <MX_GPIO_Init+0x17c>)
 8001244:	f002 f84a 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZ_ON_Pin */
  GPIO_InitStruct.Pin = BUZZ_ON_Pin;
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZ_ON_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4821      	ldr	r0, [pc, #132]	; (80012e4 <MX_GPIO_Init+0x178>)
 8001260:	f002 f83c 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_LED1_R_Pin STATUS_LED1_G_Pin STATUS_LED1_B_Pin STATUS_LED2_R_Pin
                           STATUS_LED2_G_Pin STATUS_LED2_B_Pin LED_EXT_Pin */
  GPIO_InitStruct.Pin = STATUS_LED1_R_Pin|STATUS_LED1_G_Pin|STATUS_LED1_B_Pin|STATUS_LED2_R_Pin
 8001264:	f643 7302 	movw	r3, #16130	; 0x3f02
 8001268:	617b      	str	r3, [r7, #20]
                          |STATUS_LED2_G_Pin|STATUS_LED2_B_Pin|LED_EXT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	481a      	ldr	r0, [pc, #104]	; (80012e8 <MX_GPIO_Init+0x17c>)
 800127e:	f002 f82d 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_DEBUG_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_DEBUG_Pin;
 8001282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4815      	ldr	r0, [pc, #84]	; (80012ec <MX_GPIO_Init+0x180>)
 8001298:	f002 f820 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CARD_DETECT_Pin PA9 */
  GPIO_InitStruct.Pin = SD_CARD_DETECT_Pin|GPIO_PIN_9;
 800129c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <MX_GPIO_Init+0x178>)
 80012b2:	f002 f813 	bl	80032dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012c8:	230a      	movs	r3, #10
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_GPIO_Init+0x178>)
 80012d4:	f002 f802 	bl	80032dc <HAL_GPIO_Init>

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	58024400 	.word	0x58024400
 80012e4:	58020000 	.word	0x58020000
 80012e8:	58021000 	.word	0x58021000
 80012ec:	58020c00 	.word	0x58020c00

080012f0 <StartBlinkLED1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinkLED1 */
void StartBlinkLED1(void const * argument)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  HAL_GPIO_WritePin(STATUS_LED1_R_GPIO_Port, STATUS_LED1_R_Pin, 1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <StartBlinkLED1+0x40>)
 8001300:	f002 f99c 	bl	800363c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED1_G_GPIO_Port, STATUS_LED1_G_Pin, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <StartBlinkLED1+0x40>)
 800130c:	f002 f996 	bl	800363c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED1_B_GPIO_Port, STATUS_LED1_B_Pin, 1);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <StartBlinkLED1+0x40>)
 8001318:	f002 f990 	bl	800363c <HAL_GPIO_WritePin>

  for(;;)
  {
	HAL_GPIO_TogglePin(STATUS_LED1_R_GPIO_Port, STATUS_LED1_R_Pin);
 800131c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <StartBlinkLED1+0x40>)
 8001322:	f002 f9a4 	bl	800366e <HAL_GPIO_TogglePin>
    osDelay(500);
 8001326:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800132a:	f007 fe48 	bl	8008fbe <osDelay>
	HAL_GPIO_TogglePin(STATUS_LED1_R_GPIO_Port, STATUS_LED1_R_Pin);
 800132e:	e7f5      	b.n	800131c <StartBlinkLED1+0x2c>
 8001330:	58021000 	.word	0x58021000

08001334 <StartBlinkLED2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkLED2 */
void StartBlinkLED2(void const * argument)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]


  /* USER CODE BEGIN StartBlinkLED2 */
  /* Infinite loop */
  HAL_GPIO_WritePin(STATUS_LED2_R_GPIO_Port, STATUS_LED2_R_Pin, 1);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <StartBlinkLED2+0x40>)
 8001344:	f002 f97a 	bl	800363c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED2_G_GPIO_Port, STATUS_LED2_G_Pin, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <StartBlinkLED2+0x40>)
 8001350:	f002 f974 	bl	800363c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED2_B_GPIO_Port, STATUS_LED2_B_Pin, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <StartBlinkLED2+0x40>)
 800135c:	f002 f96e 	bl	800363c <HAL_GPIO_WritePin>

  for(;;)
  {
	HAL_GPIO_TogglePin(STATUS_LED2_B_GPIO_Port, STATUS_LED2_B_Pin);
 8001360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <StartBlinkLED2+0x40>)
 8001366:	f002 f982 	bl	800366e <HAL_GPIO_TogglePin>
	osDelay(500);
 800136a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800136e:	f007 fe26 	bl	8008fbe <osDelay>
	HAL_GPIO_TogglePin(STATUS_LED2_B_GPIO_Port, STATUS_LED2_B_Pin);
 8001372:	e7f5      	b.n	8001360 <StartBlinkLED2+0x2c>
 8001374:	58021000 	.word	0x58021000

08001378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800138a:	f000 fdeb 	bl	8001f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40001400 	.word	0x40001400

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  HAL_GPIO_WritePin(STATUS_LED1_R_GPIO_Port, STATUS_LED1_R_Pin, 1);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013aa:	4817      	ldr	r0, [pc, #92]	; (8001408 <Error_Handler+0x6c>)
 80013ac:	f002 f946 	bl	800363c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED1_G_GPIO_Port, STATUS_LED1_G_Pin, 1);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b6:	4814      	ldr	r0, [pc, #80]	; (8001408 <Error_Handler+0x6c>)
 80013b8:	f002 f940 	bl	800363c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED1_B_GPIO_Port, STATUS_LED1_B_Pin, 1);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013c2:	4811      	ldr	r0, [pc, #68]	; (8001408 <Error_Handler+0x6c>)
 80013c4:	f002 f93a 	bl	800363c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED2_R_GPIO_Port, STATUS_LED2_R_Pin, 1);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ce:	480e      	ldr	r0, [pc, #56]	; (8001408 <Error_Handler+0x6c>)
 80013d0:	f002 f934 	bl	800363c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED2_G_GPIO_Port, STATUS_LED2_G_Pin, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013da:	480b      	ldr	r0, [pc, #44]	; (8001408 <Error_Handler+0x6c>)
 80013dc:	f002 f92e 	bl	800363c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED2_B_GPIO_Port, STATUS_LED2_B_Pin, 1);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e6:	4808      	ldr	r0, [pc, #32]	; (8001408 <Error_Handler+0x6c>)
 80013e8:	f002 f928 	bl	800363c <HAL_GPIO_WritePin>

  while (1)
  {
	  HAL_GPIO_TogglePin(STATUS_LED1_R_GPIO_Port, STATUS_LED1_R_Pin);
 80013ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f0:	4805      	ldr	r0, [pc, #20]	; (8001408 <Error_Handler+0x6c>)
 80013f2:	f002 f93c 	bl	800366e <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80013f6:	2064      	movs	r0, #100	; 0x64
 80013f8:	f000 fdd4 	bl	8001fa4 <HAL_Delay>
	  HAL_GPIO_TogglePin(STATUS_LED2_R_GPIO_Port, STATUS_LED2_R_Pin);
 80013fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001400:	4801      	ldr	r0, [pc, #4]	; (8001408 <Error_Handler+0x6c>)
 8001402:	f002 f934 	bl	800366e <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(STATUS_LED1_R_GPIO_Port, STATUS_LED1_R_Pin);
 8001406:	e7f1      	b.n	80013ec <Error_Handler+0x50>
 8001408:	58021000 	.word	0x58021000

0800140c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_MspInit+0x38>)
 8001414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001418:	4a0a      	ldr	r2, [pc, #40]	; (8001444 <HAL_MspInit+0x38>)
 800141a:	f043 0302 	orr.w	r3, r3, #2
 800141e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_MspInit+0x38>)
 8001424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001430:	2200      	movs	r2, #0
 8001432:	210f      	movs	r1, #15
 8001434:	f06f 0001 	mvn.w	r0, #1
 8001438:	f001 ff28 	bl	800328c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	58024400 	.word	0x58024400

08001448 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b0b8      	sub	sp, #224	; 0xe0
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	22bc      	movs	r2, #188	; 0xbc
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f00a fa33 	bl	800b8d4 <memset>
  if(hadc->Instance==ADC1)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a2a      	ldr	r2, [pc, #168]	; (800151c <HAL_ADC_MspInit+0xd4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d14c      	bne.n	8001512 <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001478:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800147c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800147e:	2301      	movs	r3, #1
 8001480:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8001482:	230a      	movs	r3, #10
 8001484:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001486:	2302      	movs	r3, #2
 8001488:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800148a:	2304      	movs	r3, #4
 800148c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 4;
 800148e:	2304      	movs	r3, #4
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001492:	23c0      	movs	r3, #192	; 0xc0
 8001494:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001496:	2320      	movs	r3, #32
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800149e:	2300      	movs	r3, #0
 80014a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fa59 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80014b4:	f7ff ff72 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80014b8:	4b19      	ldr	r3, [pc, #100]	; (8001520 <HAL_ADC_MspInit+0xd8>)
 80014ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014be:	4a18      	ldr	r2, [pc, #96]	; (8001520 <HAL_ADC_MspInit+0xd8>)
 80014c0:	f043 0320 	orr.w	r3, r3, #32
 80014c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_ADC_MspInit+0xd8>)
 80014ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014ce:	f003 0320 	and.w	r3, r3, #32
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_ADC_MspInit+0xd8>)
 80014d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014dc:	4a10      	ldr	r2, [pc, #64]	; (8001520 <HAL_ADC_MspInit+0xd8>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_ADC_MspInit+0xd8>)
 80014e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014f4:	2340      	movs	r3, #64	; 0x40
 80014f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014fa:	2303      	movs	r3, #3
 80014fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_ADC_MspInit+0xdc>)
 800150e:	f001 fee5 	bl	80032dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001512:	bf00      	nop
 8001514:	37e0      	adds	r7, #224	; 0xe0
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40022000 	.word	0x40022000
 8001520:	58024400 	.word	0x58024400
 8001524:	58020000 	.word	0x58020000

08001528 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0bc      	sub	sp, #240	; 0xf0
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	22bc      	movs	r2, #188	; 0xbc
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f00a f9c3 	bl	800b8d4 <memset>
  if(hi2c->Instance==I2C1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a5e      	ldr	r2, [pc, #376]	; (80016cc <HAL_I2C_MspInit+0x1a4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d133      	bne.n	80015c0 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001558:	4b5d      	ldr	r3, [pc, #372]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 800155a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155e:	4a5c      	ldr	r2, [pc, #368]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001568:	4b59      	ldr	r3, [pc, #356]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001576:	23c0      	movs	r3, #192	; 0xc0
 8001578:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157c:	2312      	movs	r3, #18
 800157e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800158e:	2304      	movs	r3, #4
 8001590:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001598:	4619      	mov	r1, r3
 800159a:	484e      	ldr	r0, [pc, #312]	; (80016d4 <HAL_I2C_MspInit+0x1ac>)
 800159c:	f001 fe9e 	bl	80032dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 80015a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a6:	4a4a      	ldr	r2, [pc, #296]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 80015a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015b0:	4b47      	ldr	r3, [pc, #284]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 80015b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80015be:	e081      	b.n	80016c4 <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a44      	ldr	r2, [pc, #272]	; (80016d8 <HAL_I2C_MspInit+0x1b0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d134      	bne.n	8001634 <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	4b41      	ldr	r3, [pc, #260]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d0:	4a3f      	ldr	r2, [pc, #252]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015da:	4b3d      	ldr	r3, [pc, #244]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f0:	2312      	movs	r3, #18
 80015f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001602:	2304      	movs	r3, #4
 8001604:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800160c:	4619      	mov	r1, r3
 800160e:	4831      	ldr	r0, [pc, #196]	; (80016d4 <HAL_I2C_MspInit+0x1ac>)
 8001610:	f001 fe64 	bl	80032dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001614:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 8001616:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800161a:	4a2d      	ldr	r2, [pc, #180]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 800161c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001620:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001624:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 8001626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
}
 8001632:	e047      	b.n	80016c4 <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C4)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a28      	ldr	r2, [pc, #160]	; (80016dc <HAL_I2C_MspInit+0x1b4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d142      	bne.n	80016c4 <HAL_I2C_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800163e:	2310      	movs	r3, #16
 8001640:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001642:	2300      	movs	r3, #0
 8001644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001648:	f107 0320 	add.w	r3, r7, #32
 800164c:	4618      	mov	r0, r3
 800164e:	f003 f987 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_I2C_MspInit+0x134>
      Error_Handler();
 8001658:	f7ff fea0 	bl	800139c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 800165e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001662:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800166c:	4b18      	ldr	r3, [pc, #96]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 800166e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800167a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800167e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001682:	2312      	movs	r3, #18
 8001684:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001694:	2306      	movs	r3, #6
 8001696:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800169a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800169e:	4619      	mov	r1, r3
 80016a0:	480c      	ldr	r0, [pc, #48]	; (80016d4 <HAL_I2C_MspInit+0x1ac>)
 80016a2:	f001 fe1b 	bl	80032dc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80016a6:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 80016a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016ac:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 80016ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_I2C_MspInit+0x1a8>)
 80016b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
}
 80016c4:	bf00      	nop
 80016c6:	37f0      	adds	r7, #240	; 0xf0
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40005400 	.word	0x40005400
 80016d0:	58024400 	.word	0x58024400
 80016d4:	58020400 	.word	0x58020400
 80016d8:	40005800 	.word	0x40005800
 80016dc:	58001c00 	.word	0x58001c00

080016e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0b8      	sub	sp, #224	; 0xe0
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	22bc      	movs	r2, #188	; 0xbc
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f00a f8e7 	bl	800b8d4 <memset>
  if(hspi->Instance==SPI4)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a24      	ldr	r2, [pc, #144]	; (800179c <HAL_SPI_MspInit+0xbc>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d141      	bne.n	8001794 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001710:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001714:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001716:	2300      	movs	r3, #0
 8001718:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4618      	mov	r0, r3
 8001720:	f003 f91e 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800172a:	f7ff fe37 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_SPI_MspInit+0xc0>)
 8001730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001734:	4a1a      	ldr	r2, [pc, #104]	; (80017a0 <HAL_SPI_MspInit+0xc0>)
 8001736:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800173a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800173e:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <HAL_SPI_MspInit+0xc0>)
 8001740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <HAL_SPI_MspInit+0xc0>)
 800174e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <HAL_SPI_MspInit+0xc0>)
 8001754:	f043 0310 	orr.w	r3, r3, #16
 8001758:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_SPI_MspInit+0xc0>)
 800175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800176a:	2364      	movs	r3, #100	; 0x64
 800176c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001782:	2305      	movs	r3, #5
 8001784:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001788:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_SPI_MspInit+0xc4>)
 8001790:	f001 fda4 	bl	80032dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	37e0      	adds	r7, #224	; 0xe0
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40013400 	.word	0x40013400
 80017a0:	58024400 	.word	0x58024400
 80017a4:	58021000 	.word	0x58021000

080017a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a20      	ldr	r2, [pc, #128]	; (8001838 <HAL_TIM_PWM_MspInit+0x90>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d10f      	bne.n	80017da <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017ba:	4b20      	ldr	r3, [pc, #128]	; (800183c <HAL_TIM_PWM_MspInit+0x94>)
 80017bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c0:	4a1e      	ldr	r2, [pc, #120]	; (800183c <HAL_TIM_PWM_MspInit+0x94>)
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <HAL_TIM_PWM_MspInit+0x94>)
 80017cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80017d8:	e028      	b.n	800182c <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a18      	ldr	r2, [pc, #96]	; (8001840 <HAL_TIM_PWM_MspInit+0x98>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d10f      	bne.n	8001804 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <HAL_TIM_PWM_MspInit+0x94>)
 80017e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <HAL_TIM_PWM_MspInit+0x94>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <HAL_TIM_PWM_MspInit+0x94>)
 80017f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]
}
 8001802:	e013      	b.n	800182c <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0e      	ldr	r2, [pc, #56]	; (8001844 <HAL_TIM_PWM_MspInit+0x9c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d10e      	bne.n	800182c <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <HAL_TIM_PWM_MspInit+0x94>)
 8001810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001814:	4a09      	ldr	r2, [pc, #36]	; (800183c <HAL_TIM_PWM_MspInit+0x94>)
 8001816:	f043 0308 	orr.w	r3, r3, #8
 800181a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <HAL_TIM_PWM_MspInit+0x94>)
 8001820:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001824:	f003 0308 	and.w	r3, r3, #8
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	bf00      	nop
 800182e:	371c      	adds	r7, #28
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40000400 	.word	0x40000400
 800183c:	58024400 	.word	0x58024400
 8001840:	40000800 	.word	0x40000800
 8001844:	40000c00 	.word	0x40000c00

08001848 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	; 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a38      	ldr	r2, [pc, #224]	; (8001948 <HAL_TIM_MspPostInit+0x100>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d11f      	bne.n	80018aa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <HAL_TIM_MspPostInit+0x104>)
 800186c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001870:	4a36      	ldr	r2, [pc, #216]	; (800194c <HAL_TIM_MspPostInit+0x104>)
 8001872:	f043 0302 	orr.w	r3, r3, #2
 8001876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_TIM_MspPostInit+0x104>)
 800187c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001888:	2302      	movs	r3, #2
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001898:	2302      	movs	r3, #2
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	482b      	ldr	r0, [pc, #172]	; (8001950 <HAL_TIM_MspPostInit+0x108>)
 80018a4:	f001 fd1a 	bl	80032dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80018a8:	e049      	b.n	800193e <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM4)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a29      	ldr	r2, [pc, #164]	; (8001954 <HAL_TIM_MspPostInit+0x10c>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d120      	bne.n	80018f6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b4:	4b25      	ldr	r3, [pc, #148]	; (800194c <HAL_TIM_MspPostInit+0x104>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ba:	4a24      	ldr	r2, [pc, #144]	; (800194c <HAL_TIM_MspPostInit+0x104>)
 80018bc:	f043 0308 	orr.w	r3, r3, #8
 80018c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <HAL_TIM_MspPostInit+0x104>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018e4:	2302      	movs	r3, #2
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	481a      	ldr	r0, [pc, #104]	; (8001958 <HAL_TIM_MspPostInit+0x110>)
 80018f0:	f001 fcf4 	bl	80032dc <HAL_GPIO_Init>
}
 80018f4:	e023      	b.n	800193e <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM5)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a18      	ldr	r2, [pc, #96]	; (800195c <HAL_TIM_MspPostInit+0x114>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d11e      	bne.n	800193e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_TIM_MspPostInit+0x104>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001906:	4a11      	ldr	r2, [pc, #68]	; (800194c <HAL_TIM_MspPostInit+0x104>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001910:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_TIM_MspPostInit+0x104>)
 8001912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800191e:	230c      	movs	r3, #12
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800192e:	2302      	movs	r3, #2
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4809      	ldr	r0, [pc, #36]	; (8001960 <HAL_TIM_MspPostInit+0x118>)
 800193a:	f001 fccf 	bl	80032dc <HAL_GPIO_Init>
}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	; 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40000400 	.word	0x40000400
 800194c:	58024400 	.word	0x58024400
 8001950:	58020400 	.word	0x58020400
 8001954:	40000800 	.word	0x40000800
 8001958:	58020c00 	.word	0x58020c00
 800195c:	40000c00 	.word	0x40000c00
 8001960:	58020000 	.word	0x58020000

08001964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0c0      	sub	sp, #256	; 0x100
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001980:	22bc      	movs	r2, #188	; 0xbc
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f009 ffa5 	bl	800b8d4 <memset>
  if(huart->Instance==UART4)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4aaf      	ldr	r2, [pc, #700]	; (8001c4c <HAL_UART_MspInit+0x2e8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d142      	bne.n	8001a1a <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001994:	2302      	movs	r3, #2
 8001996:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800199e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019a2:	4618      	mov	r0, r3
 80019a4:	f002 ffdc 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019ae:	f7ff fcf5 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019b2:	4ba7      	ldr	r3, [pc, #668]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 80019b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019b8:	4aa5      	ldr	r2, [pc, #660]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 80019ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019c2:	4ba3      	ldr	r3, [pc, #652]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 80019c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b9f      	ldr	r3, [pc, #636]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	4a9e      	ldr	r2, [pc, #632]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e0:	4b9b      	ldr	r3, [pc, #620]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019ee:	2303      	movs	r3, #3
 80019f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a06:	2308      	movs	r3, #8
 8001a08:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a10:	4619      	mov	r1, r3
 8001a12:	4890      	ldr	r0, [pc, #576]	; (8001c54 <HAL_UART_MspInit+0x2f0>)
 8001a14:	f001 fc62 	bl	80032dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a18:	e112      	b.n	8001c40 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==UART5)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a8e      	ldr	r2, [pc, #568]	; (8001c58 <HAL_UART_MspInit+0x2f4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d143      	bne.n	8001aac <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001a24:	2302      	movs	r3, #2
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 ff94 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001a3e:	f7ff fcad 	bl	800139c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001a42:	4b83      	ldr	r3, [pc, #524]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001a44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a48:	4a81      	ldr	r2, [pc, #516]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a52:	4b7f      	ldr	r3, [pc, #508]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a60:	4b7b      	ldr	r3, [pc, #492]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a66:	4a7a      	ldr	r2, [pc, #488]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001a68:	f043 0302 	orr.w	r3, r3, #2
 8001a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a70:	4b77      	ldr	r3, [pc, #476]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a7e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001a98:	230e      	movs	r3, #14
 8001a9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	486d      	ldr	r0, [pc, #436]	; (8001c5c <HAL_UART_MspInit+0x2f8>)
 8001aa6:	f001 fc19 	bl	80032dc <HAL_GPIO_Init>
}
 8001aaa:	e0c9      	b.n	8001c40 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a6b      	ldr	r2, [pc, #428]	; (8001c60 <HAL_UART_MspInit+0x2fc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d134      	bne.n	8001b20 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab6:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001ab8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001abc:	4a64      	ldr	r2, [pc, #400]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001abe:	f043 0310 	orr.w	r3, r3, #16
 8001ac2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ac6:	4b62      	ldr	r3, [pc, #392]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001ac8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001acc:	f003 0310 	and.w	r3, r3, #16
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ada:	4a5d      	ldr	r2, [pc, #372]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae4:	4b5a      	ldr	r3, [pc, #360]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	61bb      	str	r3, [r7, #24]
 8001af0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001af2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001af6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b16:	4619      	mov	r1, r3
 8001b18:	4850      	ldr	r0, [pc, #320]	; (8001c5c <HAL_UART_MspInit+0x2f8>)
 8001b1a:	f001 fbdf 	bl	80032dc <HAL_GPIO_Init>
}
 8001b1e:	e08f      	b.n	8001c40 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a4f      	ldr	r2, [pc, #316]	; (8001c64 <HAL_UART_MspInit+0x300>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d142      	bne.n	8001bb0 <HAL_UART_MspInit+0x24c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b34:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 ff11 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8001b44:	f7ff fc2a 	bl	800139c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b48:	4b41      	ldr	r3, [pc, #260]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b4e:	4a40      	ldr	r2, [pc, #256]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b58:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001b5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	4a38      	ldr	r2, [pc, #224]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001b6e:	f043 0308 	orr.w	r3, r3, #8
 8001b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b76:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b84:	2360      	movs	r3, #96	; 0x60
 8001b86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	482f      	ldr	r0, [pc, #188]	; (8001c68 <HAL_UART_MspInit+0x304>)
 8001baa:	f001 fb97 	bl	80032dc <HAL_GPIO_Init>
}
 8001bae:	e047      	b.n	8001c40 <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a2d      	ldr	r2, [pc, #180]	; (8001c6c <HAL_UART_MspInit+0x308>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d142      	bne.n	8001c40 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f002 fec9 	bl	8004960 <HAL_RCCEx_PeriphCLKConfig>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_UART_MspInit+0x274>
      Error_Handler();
 8001bd4:	f7ff fbe2 	bl	800139c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001bda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bde:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_UART_MspInit+0x2ec>)
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c18:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c2e:	2307      	movs	r3, #7
 8001c30:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c34:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480b      	ldr	r0, [pc, #44]	; (8001c68 <HAL_UART_MspInit+0x304>)
 8001c3c:	f001 fb4e 	bl	80032dc <HAL_GPIO_Init>
}
 8001c40:	bf00      	nop
 8001c42:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40004c00 	.word	0x40004c00
 8001c50:	58024400 	.word	0x58024400
 8001c54:	58020000 	.word	0x58020000
 8001c58:	40005000 	.word	0x40005000
 8001c5c:	58020400 	.word	0x58020400
 8001c60:	40011000 	.word	0x40011000
 8001c64:	40004400 	.word	0x40004400
 8001c68:	58020c00 	.word	0x58020c00
 8001c6c:	40004800 	.word	0x40004800

08001c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b090      	sub	sp, #64	; 0x40
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b0f      	cmp	r3, #15
 8001c7c:	d827      	bhi.n	8001cce <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	2037      	movs	r0, #55	; 0x37
 8001c84:	f001 fb02 	bl	800328c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c88:	2037      	movs	r0, #55	; 0x37
 8001c8a:	f001 fb19 	bl	80032c0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001c8e:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <HAL_InitTick+0xc4>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001c94:	4b28      	ldr	r3, [pc, #160]	; (8001d38 <HAL_InitTick+0xc8>)
 8001c96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c9a:	4a27      	ldr	r2, [pc, #156]	; (8001d38 <HAL_InitTick+0xc8>)
 8001c9c:	f043 0320 	orr.w	r3, r3, #32
 8001ca0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_InitTick+0xc8>)
 8001ca6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cb2:	f107 0210 	add.w	r2, r7, #16
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f002 fe0d 	bl	80048dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d106      	bne.n	8001cda <HAL_InitTick+0x6a>
 8001ccc:	e001      	b.n	8001cd2 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e02b      	b.n	8001d2a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cd2:	f002 fdd7 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8001cd6:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001cd8:	e004      	b.n	8001ce4 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cda:	f002 fdd3 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ce6:	4a15      	ldr	r2, [pc, #84]	; (8001d3c <HAL_InitTick+0xcc>)
 8001ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cec:	0c9b      	lsrs	r3, r3, #18
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001cf2:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <HAL_InitTick+0xd0>)
 8001cf4:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_InitTick+0xd4>)
 8001cf6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <HAL_InitTick+0xd0>)
 8001cfa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cfe:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001d00:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <HAL_InitTick+0xd0>)
 8001d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d04:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <HAL_InitTick+0xd0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_InitTick+0xd0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001d12:	480b      	ldr	r0, [pc, #44]	; (8001d40 <HAL_InitTick+0xd0>)
 8001d14:	f005 f8d1 	bl	8006eba <HAL_TIM_Base_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d104      	bne.n	8001d28 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001d1e:	4808      	ldr	r0, [pc, #32]	; (8001d40 <HAL_InitTick+0xd0>)
 8001d20:	f005 f92c 	bl	8006f7c <HAL_TIM_Base_Start_IT>
 8001d24:	4603      	mov	r3, r0
 8001d26:	e000      	b.n	8001d2a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3740      	adds	r7, #64	; 0x40
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	24000008 	.word	0x24000008
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	431bde83 	.word	0x431bde83
 8001d40:	24000d88 	.word	0x24000d88
 8001d44:	40001400 	.word	0x40001400

08001d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <NMI_Handler+0x4>

08001d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <HardFault_Handler+0x4>

08001d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <MemManage_Handler+0x4>

08001d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5e:	e7fe      	b.n	8001d5e <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <TIM7_IRQHandler+0x10>)
 8001d7a:	f005 f9ce 	bl	800711a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	24000d88 	.word	0x24000d88

08001d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d8c:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <SystemInit+0xe4>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d92:	4a36      	ldr	r2, [pc, #216]	; (8001e6c <SystemInit+0xe4>)
 8001d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d9c:	4b34      	ldr	r3, [pc, #208]	; (8001e70 <SystemInit+0xe8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 030f 	and.w	r3, r3, #15
 8001da4:	2b06      	cmp	r3, #6
 8001da6:	d807      	bhi.n	8001db8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <SystemInit+0xe8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f023 030f 	bic.w	r3, r3, #15
 8001db0:	4a2f      	ldr	r2, [pc, #188]	; (8001e70 <SystemInit+0xe8>)
 8001db2:	f043 0307 	orr.w	r3, r3, #7
 8001db6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001db8:	4b2e      	ldr	r3, [pc, #184]	; (8001e74 <SystemInit+0xec>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a2d      	ldr	r2, [pc, #180]	; (8001e74 <SystemInit+0xec>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dc4:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <SystemInit+0xec>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001dca:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <SystemInit+0xec>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4929      	ldr	r1, [pc, #164]	; (8001e74 <SystemInit+0xec>)
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <SystemInit+0xf0>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <SystemInit+0xe8>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d007      	beq.n	8001df2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001de2:	4b23      	ldr	r3, [pc, #140]	; (8001e70 <SystemInit+0xe8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 030f 	bic.w	r3, r3, #15
 8001dea:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <SystemInit+0xe8>)
 8001dec:	f043 0307 	orr.w	r3, r3, #7
 8001df0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <SystemInit+0xec>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001df8:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <SystemInit+0xec>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <SystemInit+0xec>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <SystemInit+0xec>)
 8001e06:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <SystemInit+0xf4>)
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <SystemInit+0xec>)
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <SystemInit+0xf8>)
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <SystemInit+0xec>)
 8001e12:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <SystemInit+0xfc>)
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <SystemInit+0xec>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <SystemInit+0xec>)
 8001e1e:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <SystemInit+0xfc>)
 8001e20:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <SystemInit+0xec>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <SystemInit+0xec>)
 8001e2a:	4a16      	ldr	r2, [pc, #88]	; (8001e84 <SystemInit+0xfc>)
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <SystemInit+0xec>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <SystemInit+0xec>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <SystemInit+0xec>)
 8001e3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <SystemInit+0xec>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <SystemInit+0x100>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <SystemInit+0x104>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e52:	d202      	bcs.n	8001e5a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e54:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <SystemInit+0x108>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <SystemInit+0x10c>)
 8001e5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e60:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00
 8001e70:	52002000 	.word	0x52002000
 8001e74:	58024400 	.word	0x58024400
 8001e78:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e7c:	02020200 	.word	0x02020200
 8001e80:	01ff0000 	.word	0x01ff0000
 8001e84:	01010280 	.word	0x01010280
 8001e88:	5c001000 	.word	0x5c001000
 8001e8c:	ffff0000 	.word	0xffff0000
 8001e90:	51008108 	.word	0x51008108
 8001e94:	52004000 	.word	0x52004000

08001e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e9c:	f7ff ff74 	bl	8001d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ea0:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ea2:	490d      	ldr	r1, [pc, #52]	; (8001ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ea4:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eb8:	4c0a      	ldr	r4, [pc, #40]	; (8001ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ec6:	f009 fcd1 	bl	800b86c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eca:	f7fe fbbf 	bl	800064c <main>
  bx  lr
 8001ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ed4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ed8:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001edc:	0800bb90 	.word	0x0800bb90
  ldr r2, =_sbss
 8001ee0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001ee4:	24004c70 	.word	0x24004c70

08001ee8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee8:	e7fe      	b.n	8001ee8 <ADC3_IRQHandler>
	...

08001eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f001 f9bf 	bl	8003276 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ef8:	f002 fb1a 	bl	8004530 <HAL_RCC_GetSysClockFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_Init+0x68>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	4913      	ldr	r1, [pc, #76]	; (8001f58 <HAL_Init+0x6c>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
 8001f14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_Init+0x68>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	; (8001f58 <HAL_Init+0x6c>)
 8001f20:	5cd3      	ldrb	r3, [r2, r3]
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	4a0b      	ldr	r2, [pc, #44]	; (8001f5c <HAL_Init+0x70>)
 8001f2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f30:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_Init+0x74>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f36:	200f      	movs	r0, #15
 8001f38:	f7ff fe9a 	bl	8001c70 <HAL_InitTick>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e002      	b.n	8001f4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f46:	f7ff fa61 	bl	800140c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	58024400 	.word	0x58024400
 8001f58:	0800bae8 	.word	0x0800bae8
 8001f5c:	24000004 	.word	0x24000004
 8001f60:	24000000 	.word	0x24000000

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x20>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x24>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_IncTick+0x24>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2400000c 	.word	0x2400000c
 8001f88:	24000dd4 	.word	0x24000dd4

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	24000dd4 	.word	0x24000dd4

08001fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff ffee 	bl	8001f8c <HAL_GetTick>
 8001fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d005      	beq.n	8001fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_Delay+0x44>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fca:	bf00      	nop
 8001fcc:	f7ff ffde 	bl	8001f8c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d8f7      	bhi.n	8001fcc <HAL_Delay+0x28>
  {
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2400000c 	.word	0x2400000c

08001fec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_GetREVID+0x14>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	5c001000 	.word	0x5c001000

08002004 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	609a      	str	r2, [r3, #8]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	609a      	str	r2, [r3, #8]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
 8002078:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3360      	adds	r3, #96	; 0x60
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4413      	add	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	430b      	orrs	r3, r1
 800209a:	431a      	orrs	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	431a      	orrs	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	611a      	str	r2, [r3, #16]
}
 80020d2:	bf00      	nop
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80020de:	b480      	push	{r7}
 80020e0:	b087      	sub	sp, #28
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	60f8      	str	r0, [r7, #12]
 80020e6:	60b9      	str	r1, [r7, #8]
 80020e8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3360      	adds	r3, #96	; 0x60
 80020ee:	461a      	mov	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	431a      	orrs	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	601a      	str	r2, [r3, #0]
  }
}
 8002108:	bf00      	nop
 800210a:	371c      	adds	r7, #28
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3330      	adds	r3, #48	; 0x30
 8002124:	461a      	mov	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	f003 030c 	and.w	r3, r3, #12
 8002130:	4413      	add	r3, r2
 8002132:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	211f      	movs	r1, #31
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	401a      	ands	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	0e9b      	lsrs	r3, r3, #26
 800214c:	f003 011f 	and.w	r1, r3, #31
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	fa01 f303 	lsl.w	r3, r1, r3
 800215a:	431a      	orrs	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002160:	bf00      	nop
 8002162:	371c      	adds	r7, #28
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3314      	adds	r3, #20
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	0e5b      	lsrs	r3, r3, #25
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	4413      	add	r3, r2
 800218a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	0d1b      	lsrs	r3, r3, #20
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2107      	movs	r1, #7
 800219a:	fa01 f303 	lsl.w	r3, r1, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	401a      	ands	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	0d1b      	lsrs	r3, r3, #20
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	fa01 f303 	lsl.w	r3, r1, r3
 80021b0:	431a      	orrs	r2, r3
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021b6:	bf00      	nop
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021dc:	43db      	mvns	r3, r3
 80021de:	401a      	ands	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f003 0318 	and.w	r3, r3, #24
 80021e6:	4908      	ldr	r1, [pc, #32]	; (8002208 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021e8:	40d9      	lsrs	r1, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	400b      	ands	r3, r1
 80021ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f2:	431a      	orrs	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80021fa:	bf00      	nop
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	000fffff 	.word	0x000fffff

0800220c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <LL_ADC_DisableDeepPowerDown+0x20>)
 800221a:	4013      	ands	r3, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6093      	str	r3, [r2, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	5fffffc0 	.word	0x5fffffc0

08002230 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002244:	d101      	bne.n	800224a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <LL_ADC_EnableInternalRegulator+0x24>)
 8002266:	4013      	ands	r3, r2
 8002268:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	6fffffc0 	.word	0x6fffffc0

08002280 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002294:	d101      	bne.n	800229a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <LL_ADC_IsEnabled+0x18>
 80022bc:	2301      	movs	r3, #1
 80022be:	e000      	b.n	80022c2 <LL_ADC_IsEnabled+0x1a>
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0304 	and.w	r3, r3, #4
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b08      	cmp	r3, #8
 8002306:	d101      	bne.n	800230c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b089      	sub	sp, #36	; 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002324:	2300      	movs	r3, #0
 8002326:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e18f      	b.n	8002656 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002340:	2b00      	cmp	r3, #0
 8002342:	d109      	bne.n	8002358 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff f87f 	bl	8001448 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff67 	bl	8002230 <LL_ADC_IsDeepPowerDownEnabled>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d004      	beq.n	8002372 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff4d 	bl	800220c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff82 	bl	8002280 <LL_ADC_IsInternalRegulatorEnabled>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d114      	bne.n	80023ac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff66 	bl	8002258 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800238c:	4b87      	ldr	r3, [pc, #540]	; (80025ac <HAL_ADC_Init+0x290>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	099b      	lsrs	r3, r3, #6
 8002392:	4a87      	ldr	r2, [pc, #540]	; (80025b0 <HAL_ADC_Init+0x294>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	099b      	lsrs	r3, r3, #6
 800239a:	3301      	adds	r3, #1
 800239c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800239e:	e002      	b.n	80023a6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f9      	bne.n	80023a0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff ff65 	bl	8002280 <LL_ADC_IsInternalRegulatorEnabled>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10d      	bne.n	80023d8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	f043 0210 	orr.w	r2, r3, #16
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff76 	bl	80022ce <LL_ADC_REG_IsConversionOngoing>
 80023e2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f040 8129 	bne.w	8002644 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f040 8125 	bne.w	8002644 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002402:	f043 0202 	orr.w	r2, r3, #2
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff ff4a 	bl	80022a8 <LL_ADC_IsEnabled>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d136      	bne.n	8002488 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a65      	ldr	r2, [pc, #404]	; (80025b4 <HAL_ADC_Init+0x298>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d004      	beq.n	800242e <HAL_ADC_Init+0x112>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a63      	ldr	r2, [pc, #396]	; (80025b8 <HAL_ADC_Init+0x29c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d10e      	bne.n	800244c <HAL_ADC_Init+0x130>
 800242e:	4861      	ldr	r0, [pc, #388]	; (80025b4 <HAL_ADC_Init+0x298>)
 8002430:	f7ff ff3a 	bl	80022a8 <LL_ADC_IsEnabled>
 8002434:	4604      	mov	r4, r0
 8002436:	4860      	ldr	r0, [pc, #384]	; (80025b8 <HAL_ADC_Init+0x29c>)
 8002438:	f7ff ff36 	bl	80022a8 <LL_ADC_IsEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	4323      	orrs	r3, r4
 8002440:	2b00      	cmp	r3, #0
 8002442:	bf0c      	ite	eq
 8002444:	2301      	moveq	r3, #1
 8002446:	2300      	movne	r3, #0
 8002448:	b2db      	uxtb	r3, r3
 800244a:	e008      	b.n	800245e <HAL_ADC_Init+0x142>
 800244c:	485b      	ldr	r0, [pc, #364]	; (80025bc <HAL_ADC_Init+0x2a0>)
 800244e:	f7ff ff2b 	bl	80022a8 <LL_ADC_IsEnabled>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf0c      	ite	eq
 8002458:	2301      	moveq	r3, #1
 800245a:	2300      	movne	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d012      	beq.n	8002488 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a53      	ldr	r2, [pc, #332]	; (80025b4 <HAL_ADC_Init+0x298>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d004      	beq.n	8002476 <HAL_ADC_Init+0x15a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a51      	ldr	r2, [pc, #324]	; (80025b8 <HAL_ADC_Init+0x29c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d101      	bne.n	800247a <HAL_ADC_Init+0x15e>
 8002476:	4a52      	ldr	r2, [pc, #328]	; (80025c0 <HAL_ADC_Init+0x2a4>)
 8002478:	e000      	b.n	800247c <HAL_ADC_Init+0x160>
 800247a:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <HAL_ADC_Init+0x2a8>)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4619      	mov	r1, r3
 8002482:	4610      	mov	r0, r2
 8002484:	f7ff fdbe 	bl	8002004 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002488:	f7ff fdb0 	bl	8001fec <HAL_GetREVID>
 800248c:	4603      	mov	r3, r0
 800248e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002492:	4293      	cmp	r3, r2
 8002494:	d914      	bls.n	80024c0 <HAL_ADC_Init+0x1a4>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b10      	cmp	r3, #16
 800249c:	d110      	bne.n	80024c0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	7d5b      	ldrb	r3, [r3, #21]
 80024a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024a8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80024ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7f1b      	ldrb	r3, [r3, #28]
 80024b4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80024b6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024b8:	f043 030c 	orr.w	r3, r3, #12
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	e00d      	b.n	80024dc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	7d5b      	ldrb	r3, [r3, #21]
 80024c4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024ca:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80024d0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7f1b      	ldrb	r3, [r3, #28]
 80024d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	7f1b      	ldrb	r3, [r3, #28]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d106      	bne.n	80024f2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	045b      	lsls	r3, r3, #17
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002506:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_ADC_Init+0x2ac>)
 8002516:	4013      	ands	r3, r2
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	69b9      	ldr	r1, [r7, #24]
 800251e:	430b      	orrs	r3, r1
 8002520:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fed1 	bl	80022ce <LL_ADC_REG_IsConversionOngoing>
 800252c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff fede 	bl	80022f4 <LL_ADC_INJ_IsConversionOngoing>
 8002538:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d15f      	bne.n	8002600 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d15c      	bne.n	8002600 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	7d1b      	ldrb	r3, [r3, #20]
 800254a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <HAL_ADC_Init+0x2b0>)
 800255c:	4013      	ands	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6812      	ldr	r2, [r2, #0]
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	430b      	orrs	r3, r1
 8002566:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800256e:	2b01      	cmp	r3, #1
 8002570:	d130      	bne.n	80025d4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <HAL_ADC_Init+0x2b4>)
 8002580:	4013      	ands	r3, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002586:	3a01      	subs	r2, #1
 8002588:	0411      	lsls	r1, r2, #16
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800258e:	4311      	orrs	r1, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002594:	4311      	orrs	r1, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800259a:	430a      	orrs	r2, r1
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	611a      	str	r2, [r3, #16]
 80025a8:	e01c      	b.n	80025e4 <HAL_ADC_Init+0x2c8>
 80025aa:	bf00      	nop
 80025ac:	24000000 	.word	0x24000000
 80025b0:	053e2d63 	.word	0x053e2d63
 80025b4:	40022000 	.word	0x40022000
 80025b8:	40022100 	.word	0x40022100
 80025bc:	58026000 	.word	0x58026000
 80025c0:	40022300 	.word	0x40022300
 80025c4:	58026300 	.word	0x58026300
 80025c8:	fff0c003 	.word	0xfff0c003
 80025cc:	ffffbffc 	.word	0xffffbffc
 80025d0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fb80 	bl	8002d00 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10c      	bne.n	8002622 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	f023 010f 	bic.w	r1, r3, #15
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	1e5a      	subs	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	631a      	str	r2, [r3, #48]	; 0x30
 8002620:	e007      	b.n	8002632 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020f 	bic.w	r2, r2, #15
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f023 0303 	bic.w	r3, r3, #3
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	; 0x54
 8002642:	e007      	b.n	8002654 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002648:	f043 0210 	orr.w	r2, r3, #16
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002654:	7ffb      	ldrb	r3, [r7, #31]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	bf00      	nop

08002660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b0a1      	sub	sp, #132	; 0x84
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a9d      	ldr	r2, [pc, #628]	; (80028f0 <HAL_ADC_ConfigChannel+0x290>)
 800267a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_ADC_ConfigChannel+0x2a>
 8002686:	2302      	movs	r3, #2
 8002688:	e321      	b.n	8002cce <HAL_ADC_ConfigChannel+0x66e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fe19 	bl	80022ce <LL_ADC_REG_IsConversionOngoing>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 8306 	bne.w	8002cb0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d108      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x62>
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0e9b      	lsrs	r3, r3, #26
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2201      	movs	r2, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	e016      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x90>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80026da:	2320      	movs	r3, #32
 80026dc:	e003      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80026de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2201      	movs	r2, #1
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	69d1      	ldr	r1, [r2, #28]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	430b      	orrs	r3, r1
 80026fc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	f7ff fd02 	bl	8002114 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fdda 	bl	80022ce <LL_ADC_REG_IsConversionOngoing>
 800271a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff fde7 	bl	80022f4 <LL_ADC_INJ_IsConversionOngoing>
 8002726:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 80b3 	bne.w	8002896 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002732:	2b00      	cmp	r3, #0
 8002734:	f040 80af 	bne.w	8002896 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6819      	ldr	r1, [r3, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	461a      	mov	r2, r3
 8002746:	f7ff fd11 	bl	800216c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800274a:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_ADC_ConfigChannel+0x294>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002752:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002756:	d10b      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x110>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	089b      	lsrs	r3, r3, #2
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	e01d      	b.n	80027ac <HAL_ADC_ConfigChannel+0x14c>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10b      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x136>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	e00a      	b.n	80027ac <HAL_ADC_ConfigChannel+0x14c>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	089b      	lsrs	r3, r3, #2
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d027      	beq.n	8002806 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027c4:	f7ff fc52 	bl	800206c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6919      	ldr	r1, [r3, #16]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	7e5b      	ldrb	r3, [r3, #25]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d102      	bne.n	80027de <HAL_ADC_ConfigChannel+0x17e>
 80027d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027dc:	e000      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x180>
 80027de:	2300      	movs	r3, #0
 80027e0:	461a      	mov	r2, r3
 80027e2:	f7ff fc7c 	bl	80020de <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6818      	ldr	r0, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	6919      	ldr	r1, [r3, #16]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	7e1b      	ldrb	r3, [r3, #24]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d102      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x19c>
 80027f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027fa:	e000      	b.n	80027fe <HAL_ADC_ConfigChannel+0x19e>
 80027fc:	2300      	movs	r3, #0
 80027fe:	461a      	mov	r2, r3
 8002800:	f7ff fc54 	bl	80020ac <LL_ADC_SetDataRightShift>
 8002804:	e047      	b.n	8002896 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	069b      	lsls	r3, r3, #26
 8002816:	429a      	cmp	r2, r3
 8002818:	d107      	bne.n	800282a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002828:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002830:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	069b      	lsls	r3, r3, #26
 800283a:	429a      	cmp	r2, r3
 800283c:	d107      	bne.n	800284e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800284c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002854:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	069b      	lsls	r3, r3, #26
 800285e:	429a      	cmp	r2, r3
 8002860:	d107      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002870:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002878:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	069b      	lsls	r3, r3, #26
 8002882:	429a      	cmp	r2, r3
 8002884:	d107      	bne.n	8002896 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002894:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fd04 	bl	80022a8 <LL_ADC_IsEnabled>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f040 820d 	bne.w	8002cc2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6819      	ldr	r1, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	461a      	mov	r2, r3
 80028b6:	f7ff fc85 	bl	80021c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	4a0c      	ldr	r2, [pc, #48]	; (80028f0 <HAL_ADC_ConfigChannel+0x290>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	f040 8133 	bne.w	8002b2c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d110      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x298>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0e9b      	lsrs	r3, r3, #26
 80028dc:	3301      	adds	r3, #1
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	2b09      	cmp	r3, #9
 80028e4:	bf94      	ite	ls
 80028e6:	2301      	movls	r3, #1
 80028e8:	2300      	movhi	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	e01e      	b.n	800292c <HAL_ADC_ConfigChannel+0x2cc>
 80028ee:	bf00      	nop
 80028f0:	47ff0000 	.word	0x47ff0000
 80028f4:	5c001000 	.word	0x5c001000
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002900:	fa93 f3a3 	rbit	r3, r3
 8002904:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002908:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800290a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002910:	2320      	movs	r3, #32
 8002912:	e003      	b.n	800291c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	3301      	adds	r3, #1
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2b09      	cmp	r3, #9
 8002924:	bf94      	ite	ls
 8002926:	2301      	movls	r3, #1
 8002928:	2300      	movhi	r3, #0
 800292a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800292c:	2b00      	cmp	r3, #0
 800292e:	d079      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002938:	2b00      	cmp	r3, #0
 800293a:	d107      	bne.n	800294c <HAL_ADC_ConfigChannel+0x2ec>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	0e9b      	lsrs	r3, r3, #26
 8002942:	3301      	adds	r3, #1
 8002944:	069b      	lsls	r3, r3, #26
 8002946:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800294a:	e015      	b.n	8002978 <HAL_ADC_ConfigChannel+0x318>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800295a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800295c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800295e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e003      	b.n	8002970 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	069b      	lsls	r3, r3, #26
 8002974:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002980:	2b00      	cmp	r3, #0
 8002982:	d109      	bne.n	8002998 <HAL_ADC_ConfigChannel+0x338>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	3301      	adds	r3, #1
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	2101      	movs	r1, #1
 8002992:	fa01 f303 	lsl.w	r3, r1, r3
 8002996:	e017      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x368>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80029a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80029aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e003      	b.n	80029bc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80029b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029b6:	fab3 f383 	clz	r3, r3
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	3301      	adds	r3, #1
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	2101      	movs	r1, #1
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	ea42 0103 	orr.w	r1, r2, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x38e>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	3301      	adds	r3, #1
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4613      	mov	r3, r2
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	4413      	add	r3, r2
 80029ea:	051b      	lsls	r3, r3, #20
 80029ec:	e018      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x3c0>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f6:	fa93 f3a3 	rbit	r3, r3
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80029fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002a06:	2320      	movs	r3, #32
 8002a08:	e003      	b.n	8002a12 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	fab3 f383 	clz	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	f003 021f 	and.w	r2, r3, #31
 8002a18:	4613      	mov	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a20:	430b      	orrs	r3, r1
 8002a22:	e07e      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x3e0>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0e9b      	lsrs	r3, r3, #26
 8002a36:	3301      	adds	r3, #1
 8002a38:	069b      	lsls	r3, r3, #26
 8002a3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a3e:	e015      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x40c>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	fa93 f3a3 	rbit	r3, r3
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a58:	2320      	movs	r3, #32
 8002a5a:	e003      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5e:	fab3 f383 	clz	r3, r3
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	3301      	adds	r3, #1
 8002a66:	069b      	lsls	r3, r3, #26
 8002a68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d109      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x42c>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	0e9b      	lsrs	r3, r3, #26
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f003 031f 	and.w	r3, r3, #31
 8002a84:	2101      	movs	r1, #1
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	e017      	b.n	8002abc <HAL_ADC_ConfigChannel+0x45c>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	61bb      	str	r3, [r7, #24]
  return result;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	e003      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	ea42 0103 	orr.w	r1, r2, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10d      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x488>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f003 021f 	and.w	r2, r3, #31
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	3b1e      	subs	r3, #30
 8002ae0:	051b      	lsls	r3, r3, #20
 8002ae2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	e01b      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x4c0>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	fa93 f3a3 	rbit	r3, r3
 8002af4:	60fb      	str	r3, [r7, #12]
  return result;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002b00:	2320      	movs	r3, #32
 8002b02:	e003      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f003 021f 	and.w	r2, r3, #31
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	3b1e      	subs	r3, #30
 8002b1a:	051b      	lsls	r3, r3, #20
 8002b1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b20:	430b      	orrs	r3, r1
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	6892      	ldr	r2, [r2, #8]
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7ff fb20 	bl	800216c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f280 80c6 	bge.w	8002cc2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a67      	ldr	r2, [pc, #412]	; (8002cd8 <HAL_ADC_ConfigChannel+0x678>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_ADC_ConfigChannel+0x4ea>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a65      	ldr	r2, [pc, #404]	; (8002cdc <HAL_ADC_ConfigChannel+0x67c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_ADC_ConfigChannel+0x4ee>
 8002b4a:	4b65      	ldr	r3, [pc, #404]	; (8002ce0 <HAL_ADC_ConfigChannel+0x680>)
 8002b4c:	e000      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x4f0>
 8002b4e:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <HAL_ADC_ConfigChannel+0x684>)
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fa7d 	bl	8002050 <LL_ADC_GetCommonPathInternalCh>
 8002b56:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a5e      	ldr	r2, [pc, #376]	; (8002cd8 <HAL_ADC_ConfigChannel+0x678>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d004      	beq.n	8002b6c <HAL_ADC_ConfigChannel+0x50c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a5d      	ldr	r2, [pc, #372]	; (8002cdc <HAL_ADC_ConfigChannel+0x67c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d10e      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x52a>
 8002b6c:	485a      	ldr	r0, [pc, #360]	; (8002cd8 <HAL_ADC_ConfigChannel+0x678>)
 8002b6e:	f7ff fb9b 	bl	80022a8 <LL_ADC_IsEnabled>
 8002b72:	4604      	mov	r4, r0
 8002b74:	4859      	ldr	r0, [pc, #356]	; (8002cdc <HAL_ADC_ConfigChannel+0x67c>)
 8002b76:	f7ff fb97 	bl	80022a8 <LL_ADC_IsEnabled>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4323      	orrs	r3, r4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	e008      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x53c>
 8002b8a:	4857      	ldr	r0, [pc, #348]	; (8002ce8 <HAL_ADC_ConfigChannel+0x688>)
 8002b8c:	f7ff fb8c 	bl	80022a8 <LL_ADC_IsEnabled>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d07d      	beq.n	8002c9c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a51      	ldr	r2, [pc, #324]	; (8002cec <HAL_ADC_ConfigChannel+0x68c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d130      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x5ac>
 8002baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d12b      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a4b      	ldr	r2, [pc, #300]	; (8002ce8 <HAL_ADC_ConfigChannel+0x688>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	f040 8081 	bne.w	8002cc2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a44      	ldr	r2, [pc, #272]	; (8002cd8 <HAL_ADC_ConfigChannel+0x678>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d004      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x574>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a43      	ldr	r2, [pc, #268]	; (8002cdc <HAL_ADC_ConfigChannel+0x67c>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x578>
 8002bd4:	4a42      	ldr	r2, [pc, #264]	; (8002ce0 <HAL_ADC_ConfigChannel+0x680>)
 8002bd6:	e000      	b.n	8002bda <HAL_ADC_ConfigChannel+0x57a>
 8002bd8:	4a42      	ldr	r2, [pc, #264]	; (8002ce4 <HAL_ADC_ConfigChannel+0x684>)
 8002bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f7ff fa21 	bl	800202a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002be8:	4b41      	ldr	r3, [pc, #260]	; (8002cf0 <HAL_ADC_ConfigChannel+0x690>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	4a41      	ldr	r2, [pc, #260]	; (8002cf4 <HAL_ADC_ConfigChannel+0x694>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	099b      	lsrs	r3, r3, #6
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002bfc:	e002      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f9      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c0a:	e05a      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a39      	ldr	r2, [pc, #228]	; (8002cf8 <HAL_ADC_ConfigChannel+0x698>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d11e      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x5f4>
 8002c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d119      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a30      	ldr	r2, [pc, #192]	; (8002ce8 <HAL_ADC_ConfigChannel+0x688>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d14b      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a2a      	ldr	r2, [pc, #168]	; (8002cd8 <HAL_ADC_ConfigChannel+0x678>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d004      	beq.n	8002c3e <HAL_ADC_ConfigChannel+0x5de>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a28      	ldr	r2, [pc, #160]	; (8002cdc <HAL_ADC_ConfigChannel+0x67c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x5e2>
 8002c3e:	4a28      	ldr	r2, [pc, #160]	; (8002ce0 <HAL_ADC_ConfigChannel+0x680>)
 8002c40:	e000      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x5e4>
 8002c42:	4a28      	ldr	r2, [pc, #160]	; (8002ce4 <HAL_ADC_ConfigChannel+0x684>)
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f7ff f9ec 	bl	800202a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c52:	e036      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a28      	ldr	r2, [pc, #160]	; (8002cfc <HAL_ADC_ConfigChannel+0x69c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d131      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x662>
 8002c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d12c      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_ADC_ConfigChannel+0x688>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d127      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_ADC_ConfigChannel+0x678>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d004      	beq.n	8002c86 <HAL_ADC_ConfigChannel+0x626>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a16      	ldr	r2, [pc, #88]	; (8002cdc <HAL_ADC_ConfigChannel+0x67c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x62a>
 8002c86:	4a16      	ldr	r2, [pc, #88]	; (8002ce0 <HAL_ADC_ConfigChannel+0x680>)
 8002c88:	e000      	b.n	8002c8c <HAL_ADC_ConfigChannel+0x62c>
 8002c8a:	4a16      	ldr	r2, [pc, #88]	; (8002ce4 <HAL_ADC_ConfigChannel+0x684>)
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	f7ff f9c8 	bl	800202a <LL_ADC_SetCommonPathInternalCh>
 8002c9a:	e012      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca0:	f043 0220 	orr.w	r2, r3, #32
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002cae:	e008      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002cca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3784      	adds	r7, #132	; 0x84
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd90      	pop	{r4, r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40022000 	.word	0x40022000
 8002cdc:	40022100 	.word	0x40022100
 8002ce0:	40022300 	.word	0x40022300
 8002ce4:	58026300 	.word	0x58026300
 8002ce8:	58026000 	.word	0x58026000
 8002cec:	cb840000 	.word	0xcb840000
 8002cf0:	24000000 	.word	0x24000000
 8002cf4:	053e2d63 	.word	0x053e2d63
 8002cf8:	c7520000 	.word	0xc7520000
 8002cfc:	cfb80000 	.word	0xcfb80000

08002d00 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a79      	ldr	r2, [pc, #484]	; (8002ef4 <ADC_ConfigureBoostMode+0x1f4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d004      	beq.n	8002d1c <ADC_ConfigureBoostMode+0x1c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a78      	ldr	r2, [pc, #480]	; (8002ef8 <ADC_ConfigureBoostMode+0x1f8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d109      	bne.n	8002d30 <ADC_ConfigureBoostMode+0x30>
 8002d1c:	4b77      	ldr	r3, [pc, #476]	; (8002efc <ADC_ConfigureBoostMode+0x1fc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e008      	b.n	8002d42 <ADC_ConfigureBoostMode+0x42>
 8002d30:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <ADC_ConfigureBoostMode+0x200>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf14      	ite	ne
 8002d3c:	2301      	movne	r3, #1
 8002d3e:	2300      	moveq	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d01c      	beq.n	8002d80 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002d46:	f001 fd6d 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 8002d4a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d54:	d010      	beq.n	8002d78 <ADC_ConfigureBoostMode+0x78>
 8002d56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d5a:	d871      	bhi.n	8002e40 <ADC_ConfigureBoostMode+0x140>
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d60:	d002      	beq.n	8002d68 <ADC_ConfigureBoostMode+0x68>
 8002d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d66:	d16b      	bne.n	8002e40 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	60fb      	str	r3, [r7, #12]
        break;
 8002d76:	e066      	b.n	8002e46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	60fb      	str	r3, [r7, #12]
        break;
 8002d7e:	e062      	b.n	8002e46 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d80:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d84:	f002 fd32 	bl	80057ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002d88:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d92:	d051      	beq.n	8002e38 <ADC_ConfigureBoostMode+0x138>
 8002d94:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d98:	d854      	bhi.n	8002e44 <ADC_ConfigureBoostMode+0x144>
 8002d9a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d9e:	d047      	beq.n	8002e30 <ADC_ConfigureBoostMode+0x130>
 8002da0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002da4:	d84e      	bhi.n	8002e44 <ADC_ConfigureBoostMode+0x144>
 8002da6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002daa:	d03d      	beq.n	8002e28 <ADC_ConfigureBoostMode+0x128>
 8002dac:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002db0:	d848      	bhi.n	8002e44 <ADC_ConfigureBoostMode+0x144>
 8002db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002db6:	d033      	beq.n	8002e20 <ADC_ConfigureBoostMode+0x120>
 8002db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dbc:	d842      	bhi.n	8002e44 <ADC_ConfigureBoostMode+0x144>
 8002dbe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002dc2:	d029      	beq.n	8002e18 <ADC_ConfigureBoostMode+0x118>
 8002dc4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002dc8:	d83c      	bhi.n	8002e44 <ADC_ConfigureBoostMode+0x144>
 8002dca:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002dce:	d01a      	beq.n	8002e06 <ADC_ConfigureBoostMode+0x106>
 8002dd0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002dd4:	d836      	bhi.n	8002e44 <ADC_ConfigureBoostMode+0x144>
 8002dd6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002dda:	d014      	beq.n	8002e06 <ADC_ConfigureBoostMode+0x106>
 8002ddc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002de0:	d830      	bhi.n	8002e44 <ADC_ConfigureBoostMode+0x144>
 8002de2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de6:	d00e      	beq.n	8002e06 <ADC_ConfigureBoostMode+0x106>
 8002de8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dec:	d82a      	bhi.n	8002e44 <ADC_ConfigureBoostMode+0x144>
 8002dee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002df2:	d008      	beq.n	8002e06 <ADC_ConfigureBoostMode+0x106>
 8002df4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002df8:	d824      	bhi.n	8002e44 <ADC_ConfigureBoostMode+0x144>
 8002dfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002dfe:	d002      	beq.n	8002e06 <ADC_ConfigureBoostMode+0x106>
 8002e00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e04:	d11e      	bne.n	8002e44 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	0c9b      	lsrs	r3, r3, #18
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	60fb      	str	r3, [r7, #12]
        break;
 8002e16:	e016      	b.n	8002e46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	091b      	lsrs	r3, r3, #4
 8002e1c:	60fb      	str	r3, [r7, #12]
        break;
 8002e1e:	e012      	b.n	8002e46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	60fb      	str	r3, [r7, #12]
        break;
 8002e26:	e00e      	b.n	8002e46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	099b      	lsrs	r3, r3, #6
 8002e2c:	60fb      	str	r3, [r7, #12]
        break;
 8002e2e:	e00a      	b.n	8002e46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	09db      	lsrs	r3, r3, #7
 8002e34:	60fb      	str	r3, [r7, #12]
        break;
 8002e36:	e006      	b.n	8002e46 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	60fb      	str	r3, [r7, #12]
        break;
 8002e3e:	e002      	b.n	8002e46 <ADC_ConfigureBoostMode+0x146>
        break;
 8002e40:	bf00      	nop
 8002e42:	e000      	b.n	8002e46 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002e44:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002e46:	f7ff f8d1 	bl	8001fec <HAL_GetREVID>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d815      	bhi.n	8002e80 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	4a2b      	ldr	r2, [pc, #172]	; (8002f04 <ADC_ConfigureBoostMode+0x204>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d908      	bls.n	8002e6e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e6a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e6c:	e03e      	b.n	8002eec <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e7c:	609a      	str	r2, [r3, #8]
}
 8002e7e:	e035      	b.n	8002eec <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4a1f      	ldr	r2, [pc, #124]	; (8002f08 <ADC_ConfigureBoostMode+0x208>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d808      	bhi.n	8002ea0 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e9c:	609a      	str	r2, [r3, #8]
}
 8002e9e:	e025      	b.n	8002eec <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a1a      	ldr	r2, [pc, #104]	; (8002f0c <ADC_ConfigureBoostMode+0x20c>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d80a      	bhi.n	8002ebe <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eba:	609a      	str	r2, [r3, #8]
}
 8002ebc:	e016      	b.n	8002eec <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <ADC_ConfigureBoostMode+0x210>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d80a      	bhi.n	8002edc <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ed8:	609a      	str	r2, [r3, #8]
}
 8002eda:	e007      	b.n	8002eec <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002eea:	609a      	str	r2, [r3, #8]
}
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	40022100 	.word	0x40022100
 8002efc:	40022300 	.word	0x40022300
 8002f00:	58026300 	.word	0x58026300
 8002f04:	01312d00 	.word	0x01312d00
 8002f08:	005f5e10 	.word	0x005f5e10
 8002f0c:	00bebc20 	.word	0x00bebc20
 8002f10:	017d7840 	.word	0x017d7840

08002f14 <LL_ADC_IsEnabled>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <LL_ADC_IsEnabled+0x18>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <LL_ADC_IsEnabled+0x1a>
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_ADC_REG_IsConversionOngoing>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d101      	bne.n	8002f52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b09f      	sub	sp, #124	; 0x7c
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e0be      	b.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002f86:	2300      	movs	r3, #0
 8002f88:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a5c      	ldr	r2, [pc, #368]	; (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d102      	bne.n	8002f9e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f98:	4b5b      	ldr	r3, [pc, #364]	; (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	e001      	b.n	8002fa2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10b      	bne.n	8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e09d      	b.n	80030fc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff ffb9 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 8002fc8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ffb3 	bl	8002f3a <LL_ADC_REG_IsConversionOngoing>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d17f      	bne.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002fda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d17c      	bne.n	80030da <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a47      	ldr	r2, [pc, #284]	; (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a46      	ldr	r2, [pc, #280]	; (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d101      	bne.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002ff4:	4b45      	ldr	r3, [pc, #276]	; (800310c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002ff6:	e000      	b.n	8002ffa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002ff8:	4b45      	ldr	r3, [pc, #276]	; (8003110 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002ffa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d039      	beq.n	8003078 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	431a      	orrs	r2, r3
 8003012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003014:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a3a      	ldr	r2, [pc, #232]	; (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d004      	beq.n	800302a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a38      	ldr	r2, [pc, #224]	; (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10e      	bne.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800302a:	4836      	ldr	r0, [pc, #216]	; (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800302c:	f7ff ff72 	bl	8002f14 <LL_ADC_IsEnabled>
 8003030:	4604      	mov	r4, r0
 8003032:	4835      	ldr	r0, [pc, #212]	; (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003034:	f7ff ff6e 	bl	8002f14 <LL_ADC_IsEnabled>
 8003038:	4603      	mov	r3, r0
 800303a:	4323      	orrs	r3, r4
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	e008      	b.n	800305a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003048:	4832      	ldr	r0, [pc, #200]	; (8003114 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800304a:	f7ff ff63 	bl	8002f14 <LL_ADC_IsEnabled>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf0c      	ite	eq
 8003054:	2301      	moveq	r3, #1
 8003056:	2300      	movne	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d047      	beq.n	80030ee <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	4b2d      	ldr	r3, [pc, #180]	; (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003064:	4013      	ands	r3, r2
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	6811      	ldr	r1, [r2, #0]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	6892      	ldr	r2, [r2, #8]
 800306e:	430a      	orrs	r2, r1
 8003070:	431a      	orrs	r2, r3
 8003072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003074:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003076:	e03a      	b.n	80030ee <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1e      	ldr	r2, [pc, #120]	; (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d10e      	bne.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003098:	481a      	ldr	r0, [pc, #104]	; (8003104 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800309a:	f7ff ff3b 	bl	8002f14 <LL_ADC_IsEnabled>
 800309e:	4604      	mov	r4, r0
 80030a0:	4819      	ldr	r0, [pc, #100]	; (8003108 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80030a2:	f7ff ff37 	bl	8002f14 <LL_ADC_IsEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4323      	orrs	r3, r4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	e008      	b.n	80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80030b6:	4817      	ldr	r0, [pc, #92]	; (8003114 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80030b8:	f7ff ff2c 	bl	8002f14 <LL_ADC_IsEnabled>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	bf0c      	ite	eq
 80030c2:	2301      	moveq	r3, #1
 80030c4:	2300      	movne	r3, #0
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d010      	beq.n	80030ee <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80030cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030d6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030d8:	e009      	b.n	80030ee <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	f043 0220 	orr.w	r2, r3, #32
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80030ec:	e000      	b.n	80030f0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80030ee:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80030f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	377c      	adds	r7, #124	; 0x7c
 8003100:	46bd      	mov	sp, r7
 8003102:	bd90      	pop	{r4, r7, pc}
 8003104:	40022000 	.word	0x40022000
 8003108:	40022100 	.word	0x40022100
 800310c:	40022300 	.word	0x40022300
 8003110:	58026300 	.word	0x58026300
 8003114:	58026000 	.word	0x58026000
 8003118:	fffff0e0 	.word	0xfffff0e0

0800311c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <__NVIC_SetPriorityGrouping+0x40>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003138:	4013      	ands	r3, r2
 800313a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <__NVIC_SetPriorityGrouping+0x44>)
 8003146:	4313      	orrs	r3, r2
 8003148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314a:	4a04      	ldr	r2, [pc, #16]	; (800315c <__NVIC_SetPriorityGrouping+0x40>)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	60d3      	str	r3, [r2, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00
 8003160:	05fa0000 	.word	0x05fa0000

08003164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003168:	4b04      	ldr	r3, [pc, #16]	; (800317c <__NVIC_GetPriorityGrouping+0x18>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	f003 0307 	and.w	r3, r3, #7
}
 8003172:	4618      	mov	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800318a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800318e:	2b00      	cmp	r3, #0
 8003190:	db0b      	blt.n	80031aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	4907      	ldr	r1, [pc, #28]	; (80031b8 <__NVIC_EnableIRQ+0x38>)
 800319a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2001      	movs	r0, #1
 80031a2:	fa00 f202 	lsl.w	r2, r0, r2
 80031a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000e100 	.word	0xe000e100

080031bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	6039      	str	r1, [r7, #0]
 80031c6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	db0a      	blt.n	80031e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	490c      	ldr	r1, [pc, #48]	; (8003208 <__NVIC_SetPriority+0x4c>)
 80031d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031da:	0112      	lsls	r2, r2, #4
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	440b      	add	r3, r1
 80031e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e4:	e00a      	b.n	80031fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	4908      	ldr	r1, [pc, #32]	; (800320c <__NVIC_SetPriority+0x50>)
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	3b04      	subs	r3, #4
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	440b      	add	r3, r1
 80031fa:	761a      	strb	r2, [r3, #24]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000e100 	.word	0xe000e100
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f1c3 0307 	rsb	r3, r3, #7
 800322a:	2b04      	cmp	r3, #4
 800322c:	bf28      	it	cs
 800322e:	2304      	movcs	r3, #4
 8003230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3304      	adds	r3, #4
 8003236:	2b06      	cmp	r3, #6
 8003238:	d902      	bls.n	8003240 <NVIC_EncodePriority+0x30>
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	3b03      	subs	r3, #3
 800323e:	e000      	b.n	8003242 <NVIC_EncodePriority+0x32>
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	f04f 32ff 	mov.w	r2, #4294967295
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	401a      	ands	r2, r3
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003258:	f04f 31ff 	mov.w	r1, #4294967295
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43d9      	mvns	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	4313      	orrs	r3, r2
         );
}
 800326a:	4618      	mov	r0, r3
 800326c:	3724      	adds	r7, #36	; 0x24
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff ff4c 	bl	800311c <__NVIC_SetPriorityGrouping>
}
 8003284:	bf00      	nop
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800329a:	f7ff ff63 	bl	8003164 <__NVIC_GetPriorityGrouping>
 800329e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	6978      	ldr	r0, [r7, #20]
 80032a6:	f7ff ffb3 	bl	8003210 <NVIC_EncodePriority>
 80032aa:	4602      	mov	r2, r0
 80032ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ff82 	bl	80031bc <__NVIC_SetPriority>
}
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff56 	bl	8003180 <__NVIC_EnableIRQ>
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032dc:	b480      	push	{r7}
 80032de:	b089      	sub	sp, #36	; 0x24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032ea:	4b89      	ldr	r3, [pc, #548]	; (8003510 <HAL_GPIO_Init+0x234>)
 80032ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032ee:	e194      	b.n	800361a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	2101      	movs	r1, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	4013      	ands	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8186 	beq.w	8003614 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d005      	beq.n	8003320 <HAL_GPIO_Init+0x44>
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d130      	bne.n	8003382 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	2203      	movs	r2, #3
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003356:	2201      	movs	r2, #1
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43db      	mvns	r3, r3
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4013      	ands	r3, r2
 8003364:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	091b      	lsrs	r3, r3, #4
 800336c:	f003 0201 	and.w	r2, r3, #1
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b03      	cmp	r3, #3
 800338c:	d017      	beq.n	80033be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	2203      	movs	r2, #3
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d123      	bne.n	8003412 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	08da      	lsrs	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3208      	adds	r2, #8
 80033d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	220f      	movs	r2, #15
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	691a      	ldr	r2, [r3, #16]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	08da      	lsrs	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3208      	adds	r2, #8
 800340c:	69b9      	ldr	r1, [r7, #24]
 800340e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	2203      	movs	r2, #3
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 0203 	and.w	r2, r3, #3
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69ba      	ldr	r2, [r7, #24]
 8003444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80e0 	beq.w	8003614 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003454:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <HAL_GPIO_Init+0x238>)
 8003456:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800345a:	4a2e      	ldr	r2, [pc, #184]	; (8003514 <HAL_GPIO_Init+0x238>)
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003464:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <HAL_GPIO_Init+0x238>)
 8003466:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800346a:	f003 0302 	and.w	r3, r3, #2
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003472:	4a29      	ldr	r2, [pc, #164]	; (8003518 <HAL_GPIO_Init+0x23c>)
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	089b      	lsrs	r3, r3, #2
 8003478:	3302      	adds	r3, #2
 800347a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800347e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	220f      	movs	r2, #15
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a20      	ldr	r2, [pc, #128]	; (800351c <HAL_GPIO_Init+0x240>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d052      	beq.n	8003544 <HAL_GPIO_Init+0x268>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <HAL_GPIO_Init+0x244>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d031      	beq.n	800350a <HAL_GPIO_Init+0x22e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <HAL_GPIO_Init+0x248>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d02b      	beq.n	8003506 <HAL_GPIO_Init+0x22a>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <HAL_GPIO_Init+0x24c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d025      	beq.n	8003502 <HAL_GPIO_Init+0x226>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_GPIO_Init+0x250>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01f      	beq.n	80034fe <HAL_GPIO_Init+0x222>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a1b      	ldr	r2, [pc, #108]	; (8003530 <HAL_GPIO_Init+0x254>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d019      	beq.n	80034fa <HAL_GPIO_Init+0x21e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a1a      	ldr	r2, [pc, #104]	; (8003534 <HAL_GPIO_Init+0x258>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_GPIO_Init+0x21a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a19      	ldr	r2, [pc, #100]	; (8003538 <HAL_GPIO_Init+0x25c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00d      	beq.n	80034f2 <HAL_GPIO_Init+0x216>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a18      	ldr	r2, [pc, #96]	; (800353c <HAL_GPIO_Init+0x260>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <HAL_GPIO_Init+0x212>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a17      	ldr	r2, [pc, #92]	; (8003540 <HAL_GPIO_Init+0x264>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_GPIO_Init+0x20e>
 80034e6:	2309      	movs	r3, #9
 80034e8:	e02d      	b.n	8003546 <HAL_GPIO_Init+0x26a>
 80034ea:	230a      	movs	r3, #10
 80034ec:	e02b      	b.n	8003546 <HAL_GPIO_Init+0x26a>
 80034ee:	2308      	movs	r3, #8
 80034f0:	e029      	b.n	8003546 <HAL_GPIO_Init+0x26a>
 80034f2:	2307      	movs	r3, #7
 80034f4:	e027      	b.n	8003546 <HAL_GPIO_Init+0x26a>
 80034f6:	2306      	movs	r3, #6
 80034f8:	e025      	b.n	8003546 <HAL_GPIO_Init+0x26a>
 80034fa:	2305      	movs	r3, #5
 80034fc:	e023      	b.n	8003546 <HAL_GPIO_Init+0x26a>
 80034fe:	2304      	movs	r3, #4
 8003500:	e021      	b.n	8003546 <HAL_GPIO_Init+0x26a>
 8003502:	2303      	movs	r3, #3
 8003504:	e01f      	b.n	8003546 <HAL_GPIO_Init+0x26a>
 8003506:	2302      	movs	r3, #2
 8003508:	e01d      	b.n	8003546 <HAL_GPIO_Init+0x26a>
 800350a:	2301      	movs	r3, #1
 800350c:	e01b      	b.n	8003546 <HAL_GPIO_Init+0x26a>
 800350e:	bf00      	nop
 8003510:	58000080 	.word	0x58000080
 8003514:	58024400 	.word	0x58024400
 8003518:	58000400 	.word	0x58000400
 800351c:	58020000 	.word	0x58020000
 8003520:	58020400 	.word	0x58020400
 8003524:	58020800 	.word	0x58020800
 8003528:	58020c00 	.word	0x58020c00
 800352c:	58021000 	.word	0x58021000
 8003530:	58021400 	.word	0x58021400
 8003534:	58021800 	.word	0x58021800
 8003538:	58021c00 	.word	0x58021c00
 800353c:	58022000 	.word	0x58022000
 8003540:	58022400 	.word	0x58022400
 8003544:	2300      	movs	r3, #0
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	f002 0203 	and.w	r2, r2, #3
 800354c:	0092      	lsls	r2, r2, #2
 800354e:	4093      	lsls	r3, r2
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003556:	4938      	ldr	r1, [pc, #224]	; (8003638 <HAL_GPIO_Init+0x35c>)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	3302      	adds	r3, #2
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800358a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80035b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4013      	ands	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	3301      	adds	r3, #1
 8003618:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
 8003624:	2b00      	cmp	r3, #0
 8003626:	f47f ae63 	bne.w	80032f0 <HAL_GPIO_Init+0x14>
  }
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	3724      	adds	r7, #36	; 0x24
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	58000400 	.word	0x58000400

0800363c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	807b      	strh	r3, [r7, #2]
 8003648:	4613      	mov	r3, r2
 800364a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800364c:	787b      	ldrb	r3, [r7, #1]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003658:	e003      	b.n	8003662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	041a      	lsls	r2, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	619a      	str	r2, [r3, #24]
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
 8003676:	460b      	mov	r3, r1
 8003678:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003680:	887a      	ldrh	r2, [r7, #2]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4013      	ands	r3, r2
 8003686:	041a      	lsls	r2, r3, #16
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	43d9      	mvns	r1, r3
 800368c:	887b      	ldrh	r3, [r7, #2]
 800368e:	400b      	ands	r3, r1
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	619a      	str	r2, [r3, #24]
}
 8003696:	bf00      	nop
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
	...

080036a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d101      	bne.n	80036b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e07f      	b.n	80037b6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7fd ff2c 	bl	8001528 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2224      	movs	r2, #36	; 0x24
 80036d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003704:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d107      	bne.n	800371e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800371a:	609a      	str	r2, [r3, #8]
 800371c:	e006      	b.n	800372c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800372a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d104      	bne.n	800373e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800373c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <HAL_I2C_Init+0x11c>)
 800374a:	430b      	orrs	r3, r1
 800374c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800375c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69d9      	ldr	r1, [r3, #28]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1a      	ldr	r2, [r3, #32]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2220      	movs	r2, #32
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	02008000 	.word	0x02008000

080037c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b20      	cmp	r3, #32
 80037d8:	d138      	bne.n	800384c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d101      	bne.n	80037e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037e4:	2302      	movs	r3, #2
 80037e6:	e032      	b.n	800384e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2224      	movs	r2, #36	; 0x24
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003816:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6819      	ldr	r1, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b20      	cmp	r3, #32
 800386e:	d139      	bne.n	80038e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800387a:	2302      	movs	r3, #2
 800387c:	e033      	b.n	80038e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2224      	movs	r2, #36	; 0x24
 800388a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	021b      	lsls	r3, r3, #8
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038e0:	2300      	movs	r3, #0
 80038e2:	e000      	b.n	80038e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
  }
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <HAL_PWREx_ConfigSupply+0x70>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b04      	cmp	r3, #4
 8003906:	d00a      	beq.n	800391e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <HAL_PWREx_ConfigSupply+0x70>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d001      	beq.n	800391a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e01f      	b.n	800395a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e01d      	b.n	800395a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_PWREx_ConfigSupply+0x70>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f023 0207 	bic.w	r2, r3, #7
 8003926:	490f      	ldr	r1, [pc, #60]	; (8003964 <HAL_PWREx_ConfigSupply+0x70>)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4313      	orrs	r3, r2
 800392c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800392e:	f7fe fb2d 	bl	8001f8c <HAL_GetTick>
 8003932:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003934:	e009      	b.n	800394a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003936:	f7fe fb29 	bl	8001f8c <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003944:	d901      	bls.n	800394a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e007      	b.n	800395a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_PWREx_ConfigSupply+0x70>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003956:	d1ee      	bne.n	8003936 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	58024800 	.word	0x58024800

08003968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08c      	sub	sp, #48	; 0x30
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f000 bc1d 	b.w	80041b6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8087 	beq.w	8003a98 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398a:	4b99      	ldr	r3, [pc, #612]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003994:	4b96      	ldr	r3, [pc, #600]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	2b10      	cmp	r3, #16
 800399e:	d007      	beq.n	80039b0 <HAL_RCC_OscConfig+0x48>
 80039a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a2:	2b18      	cmp	r3, #24
 80039a4:	d110      	bne.n	80039c8 <HAL_RCC_OscConfig+0x60>
 80039a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d10b      	bne.n	80039c8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b0:	4b8f      	ldr	r3, [pc, #572]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d06c      	beq.n	8003a96 <HAL_RCC_OscConfig+0x12e>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d168      	bne.n	8003a96 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e3f6      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d0:	d106      	bne.n	80039e0 <HAL_RCC_OscConfig+0x78>
 80039d2:	4b87      	ldr	r3, [pc, #540]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a86      	ldr	r2, [pc, #536]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	e02e      	b.n	8003a3e <HAL_RCC_OscConfig+0xd6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10c      	bne.n	8003a02 <HAL_RCC_OscConfig+0x9a>
 80039e8:	4b81      	ldr	r3, [pc, #516]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a80      	ldr	r2, [pc, #512]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b7e      	ldr	r3, [pc, #504]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a7d      	ldr	r2, [pc, #500]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	e01d      	b.n	8003a3e <HAL_RCC_OscConfig+0xd6>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a0a:	d10c      	bne.n	8003a26 <HAL_RCC_OscConfig+0xbe>
 8003a0c:	4b78      	ldr	r3, [pc, #480]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a77      	ldr	r2, [pc, #476]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	4b75      	ldr	r3, [pc, #468]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a74      	ldr	r2, [pc, #464]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	e00b      	b.n	8003a3e <HAL_RCC_OscConfig+0xd6>
 8003a26:	4b72      	ldr	r3, [pc, #456]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a71      	ldr	r2, [pc, #452]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b6f      	ldr	r3, [pc, #444]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6e      	ldr	r2, [pc, #440]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d013      	beq.n	8003a6e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fe faa1 	bl	8001f8c <HAL_GetTick>
 8003a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a4e:	f7fe fa9d 	bl	8001f8c <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b64      	cmp	r3, #100	; 0x64
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e3aa      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003a60:	4b63      	ldr	r3, [pc, #396]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0xe6>
 8003a6c:	e014      	b.n	8003a98 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fe fa8d 	bl	8001f8c <HAL_GetTick>
 8003a72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a76:	f7fe fa89 	bl	8001f8c <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b64      	cmp	r3, #100	; 0x64
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e396      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003a88:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x10e>
 8003a94:	e000      	b.n	8003a98 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a96:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 80cb 	beq.w	8003c3c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aa6:	4b52      	ldr	r3, [pc, #328]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aae:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <HAL_RCC_OscConfig+0x164>
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	2b18      	cmp	r3, #24
 8003ac0:	d156      	bne.n	8003b70 <HAL_RCC_OscConfig+0x208>
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d151      	bne.n	8003b70 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003acc:	4b48      	ldr	r3, [pc, #288]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d005      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x17c>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e368      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003ae4:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 0219 	bic.w	r2, r3, #25
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	493f      	ldr	r1, [pc, #252]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003af6:	f7fe fa49 	bl	8001f8c <HAL_GetTick>
 8003afa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afe:	f7fe fa45 	bl	8001f8c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e352      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b10:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	f7fe fa66 	bl	8001fec <HAL_GetREVID>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d817      	bhi.n	8003b5a <HAL_RCC_OscConfig+0x1f2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d108      	bne.n	8003b44 <HAL_RCC_OscConfig+0x1dc>
 8003b32:	4b2f      	ldr	r3, [pc, #188]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b3a:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b40:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b42:	e07b      	b.n	8003c3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b44:	4b2a      	ldr	r3, [pc, #168]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	4927      	ldr	r1, [pc, #156]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b54:	4313      	orrs	r3, r2
 8003b56:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b58:	e070      	b.n	8003c3c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5a:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	061b      	lsls	r3, r3, #24
 8003b68:	4921      	ldr	r1, [pc, #132]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b6e:	e065      	b.n	8003c3c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d048      	beq.n	8003c0a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f023 0219 	bic.w	r2, r3, #25
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	491a      	ldr	r1, [pc, #104]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fe f9ff 	bl	8001f8c <HAL_GetTick>
 8003b8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b92:	f7fe f9fb 	bl	8001f8c <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e308      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ba4:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb0:	f7fe fa1c 	bl	8001fec <HAL_GetREVID>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d81a      	bhi.n	8003bf4 <HAL_RCC_OscConfig+0x28c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d108      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x270>
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003bd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd4:	6053      	str	r3, [r2, #4]
 8003bd6:	e031      	b.n	8003c3c <HAL_RCC_OscConfig+0x2d4>
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	031b      	lsls	r3, r3, #12
 8003be6:	4902      	ldr	r1, [pc, #8]	; (8003bf0 <HAL_RCC_OscConfig+0x288>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
 8003bec:	e026      	b.n	8003c3c <HAL_RCC_OscConfig+0x2d4>
 8003bee:	bf00      	nop
 8003bf0:	58024400 	.word	0x58024400
 8003bf4:	4b9a      	ldr	r3, [pc, #616]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	061b      	lsls	r3, r3, #24
 8003c02:	4997      	ldr	r1, [pc, #604]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
 8003c08:	e018      	b.n	8003c3c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c0a:	4b95      	ldr	r3, [pc, #596]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a94      	ldr	r2, [pc, #592]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f7fe f9b9 	bl	8001f8c <HAL_GetTick>
 8003c1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c1e:	f7fe f9b5 	bl	8001f8c <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e2c2      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003c30:	4b8b      	ldr	r3, [pc, #556]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80a9 	beq.w	8003d9c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c4a:	4b85      	ldr	r3, [pc, #532]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c52:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c54:	4b82      	ldr	r3, [pc, #520]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c58:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d007      	beq.n	8003c70 <HAL_RCC_OscConfig+0x308>
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	2b18      	cmp	r3, #24
 8003c64:	d13a      	bne.n	8003cdc <HAL_RCC_OscConfig+0x374>
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f003 0303 	and.w	r3, r3, #3
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d135      	bne.n	8003cdc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c70:	4b7b      	ldr	r3, [pc, #492]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_RCC_OscConfig+0x320>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b80      	cmp	r3, #128	; 0x80
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e296      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c88:	f7fe f9b0 	bl	8001fec <HAL_GetREVID>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d817      	bhi.n	8003cc6 <HAL_RCC_OscConfig+0x35e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d108      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x348>
 8003c9e:	4b70      	ldr	r3, [pc, #448]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003ca6:	4a6e      	ldr	r2, [pc, #440]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003ca8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cae:	e075      	b.n	8003d9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cb0:	4b6b      	ldr	r3, [pc, #428]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	069b      	lsls	r3, r3, #26
 8003cbe:	4968      	ldr	r1, [pc, #416]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cc4:	e06a      	b.n	8003d9c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003cc6:	4b66      	ldr	r3, [pc, #408]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	061b      	lsls	r3, r3, #24
 8003cd4:	4962      	ldr	r1, [pc, #392]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003cda:	e05f      	b.n	8003d9c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d042      	beq.n	8003d6a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ce4:	4b5e      	ldr	r3, [pc, #376]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a5d      	ldr	r2, [pc, #372]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fe f94c 	bl	8001f8c <HAL_GetTick>
 8003cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cf8:	f7fe f948 	bl	8001f8c <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e255      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003d0a:	4b55      	ldr	r3, [pc, #340]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d16:	f7fe f969 	bl	8001fec <HAL_GetREVID>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d817      	bhi.n	8003d54 <HAL_RCC_OscConfig+0x3ec>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d108      	bne.n	8003d3e <HAL_RCC_OscConfig+0x3d6>
 8003d2c:	4b4c      	ldr	r3, [pc, #304]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003d34:	4a4a      	ldr	r2, [pc, #296]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003d36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d3a:	6053      	str	r3, [r2, #4]
 8003d3c:	e02e      	b.n	8003d9c <HAL_RCC_OscConfig+0x434>
 8003d3e:	4b48      	ldr	r3, [pc, #288]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	069b      	lsls	r3, r3, #26
 8003d4c:	4944      	ldr	r1, [pc, #272]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	604b      	str	r3, [r1, #4]
 8003d52:	e023      	b.n	8003d9c <HAL_RCC_OscConfig+0x434>
 8003d54:	4b42      	ldr	r3, [pc, #264]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	493f      	ldr	r1, [pc, #252]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	60cb      	str	r3, [r1, #12]
 8003d68:	e018      	b.n	8003d9c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003d6a:	4b3d      	ldr	r3, [pc, #244]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3c      	ldr	r2, [pc, #240]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d76:	f7fe f909 	bl	8001f8c <HAL_GetTick>
 8003d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d7c:	e008      	b.n	8003d90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003d7e:	f7fe f905 	bl	8001f8c <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e212      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003d90:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1f0      	bne.n	8003d7e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d036      	beq.n	8003e16 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d019      	beq.n	8003de4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003db0:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db4:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fe f8e6 	bl	8001f8c <HAL_GetTick>
 8003dc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc4:	f7fe f8e2 	bl	8001f8c <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1ef      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003dd6:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x45c>
 8003de2:	e018      	b.n	8003e16 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de4:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de8:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7fe f8cc 	bl	8001f8c <HAL_GetTick>
 8003df4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df8:	f7fe f8c8 	bl	8001f8c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e1d5      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003e0a:	4b15      	ldr	r3, [pc, #84]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d039      	beq.n	8003e96 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01c      	beq.n	8003e64 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a0c      	ldr	r2, [pc, #48]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003e30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e34:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e36:	f7fe f8a9 	bl	8001f8c <HAL_GetTick>
 8003e3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e3e:	f7fe f8a5 	bl	8001f8c <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e1b2      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_RCC_OscConfig+0x4f8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x4d6>
 8003e5c:	e01b      	b.n	8003e96 <HAL_RCC_OscConfig+0x52e>
 8003e5e:	bf00      	nop
 8003e60:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003e64:	4b9b      	ldr	r3, [pc, #620]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a9a      	ldr	r2, [pc, #616]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003e6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003e70:	f7fe f88c 	bl	8001f8c <HAL_GetTick>
 8003e74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e76:	e008      	b.n	8003e8a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003e78:	f7fe f888 	bl	8001f8c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d901      	bls.n	8003e8a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e195      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e8a:	4b92      	ldr	r3, [pc, #584]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f0      	bne.n	8003e78 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 8081 	beq.w	8003fa6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ea4:	4b8c      	ldr	r3, [pc, #560]	; (80040d8 <HAL_RCC_OscConfig+0x770>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a8b      	ldr	r2, [pc, #556]	; (80040d8 <HAL_RCC_OscConfig+0x770>)
 8003eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003eb0:	f7fe f86c 	bl	8001f8c <HAL_GetTick>
 8003eb4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eb8:	f7fe f868 	bl	8001f8c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b64      	cmp	r3, #100	; 0x64
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e175      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eca:	4b83      	ldr	r3, [pc, #524]	; (80040d8 <HAL_RCC_OscConfig+0x770>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d106      	bne.n	8003eec <HAL_RCC_OscConfig+0x584>
 8003ede:	4b7d      	ldr	r3, [pc, #500]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a7c      	ldr	r2, [pc, #496]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003ee4:	f043 0301 	orr.w	r3, r3, #1
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	e02d      	b.n	8003f48 <HAL_RCC_OscConfig+0x5e0>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10c      	bne.n	8003f0e <HAL_RCC_OscConfig+0x5a6>
 8003ef4:	4b77      	ldr	r3, [pc, #476]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	4a76      	ldr	r2, [pc, #472]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	6713      	str	r3, [r2, #112]	; 0x70
 8003f00:	4b74      	ldr	r3, [pc, #464]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a73      	ldr	r2, [pc, #460]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f06:	f023 0304 	bic.w	r3, r3, #4
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0c:	e01c      	b.n	8003f48 <HAL_RCC_OscConfig+0x5e0>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCC_OscConfig+0x5c8>
 8003f16:	4b6f      	ldr	r3, [pc, #444]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	4a6e      	ldr	r2, [pc, #440]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f1c:	f043 0304 	orr.w	r3, r3, #4
 8003f20:	6713      	str	r3, [r2, #112]	; 0x70
 8003f22:	4b6c      	ldr	r3, [pc, #432]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a6b      	ldr	r2, [pc, #428]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCC_OscConfig+0x5e0>
 8003f30:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4a67      	ldr	r2, [pc, #412]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f36:	f023 0301 	bic.w	r3, r3, #1
 8003f3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3c:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	4a64      	ldr	r2, [pc, #400]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f42:	f023 0304 	bic.w	r3, r3, #4
 8003f46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d015      	beq.n	8003f7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f50:	f7fe f81c 	bl	8001f8c <HAL_GetTick>
 8003f54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7fe f818 	bl	8001f8c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e123      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f6e:	4b59      	ldr	r3, [pc, #356]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0ee      	beq.n	8003f58 <HAL_RCC_OscConfig+0x5f0>
 8003f7a:	e014      	b.n	8003fa6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fe f806 	bl	8001f8c <HAL_GetTick>
 8003f80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fe f802 	bl	8001f8c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e10d      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003f9a:	4b4e      	ldr	r3, [pc, #312]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1ee      	bne.n	8003f84 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8102 	beq.w	80041b4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003fb0:	4b48      	ldr	r3, [pc, #288]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fb8:	2b18      	cmp	r3, #24
 8003fba:	f000 80bd 	beq.w	8004138 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	f040 809e 	bne.w	8004104 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc8:	4b42      	ldr	r3, [pc, #264]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a41      	ldr	r2, [pc, #260]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003fce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fd ffda 	bl	8001f8c <HAL_GetTick>
 8003fd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fdc:	f7fd ffd6 	bl	8001f8c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0e3      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fee:	4b39      	ldr	r3, [pc, #228]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f0      	bne.n	8003fdc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ffa:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8003ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ffe:	4b37      	ldr	r3, [pc, #220]	; (80040dc <HAL_RCC_OscConfig+0x774>)
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800400a:	0112      	lsls	r2, r2, #4
 800400c:	430a      	orrs	r2, r1
 800400e:	4931      	ldr	r1, [pc, #196]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8004010:	4313      	orrs	r3, r2
 8004012:	628b      	str	r3, [r1, #40]	; 0x28
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	3b01      	subs	r3, #1
 800401a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	3b01      	subs	r3, #1
 8004024:	025b      	lsls	r3, r3, #9
 8004026:	b29b      	uxth	r3, r3
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	3b01      	subs	r3, #1
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	3b01      	subs	r3, #1
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004044:	4923      	ldr	r1, [pc, #140]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8004046:	4313      	orrs	r3, r2
 8004048:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800404a:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	4a21      	ldr	r2, [pc, #132]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8004050:	f023 0301 	bic.w	r3, r3, #1
 8004054:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004056:	4b1f      	ldr	r3, [pc, #124]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8004058:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800405a:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <HAL_RCC_OscConfig+0x778>)
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004062:	00d2      	lsls	r2, r2, #3
 8004064:	491b      	ldr	r1, [pc, #108]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800406a:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	f023 020c 	bic.w	r2, r3, #12
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	4917      	ldr	r1, [pc, #92]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800407c:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	f023 0202 	bic.w	r2, r3, #2
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004088:	4912      	ldr	r1, [pc, #72]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 800408a:	4313      	orrs	r3, r2
 800408c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	4a10      	ldr	r2, [pc, #64]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 8004094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004098:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	4a0d      	ldr	r2, [pc, #52]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 80040a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 80040ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 80040b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b6:	4a07      	ldr	r2, [pc, #28]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <HAL_RCC_OscConfig+0x76c>)
 80040c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ca:	f7fd ff5f 	bl	8001f8c <HAL_GetTick>
 80040ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040d0:	e011      	b.n	80040f6 <HAL_RCC_OscConfig+0x78e>
 80040d2:	bf00      	nop
 80040d4:	58024400 	.word	0x58024400
 80040d8:	58024800 	.word	0x58024800
 80040dc:	fffffc0c 	.word	0xfffffc0c
 80040e0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fd ff52 	bl	8001f8c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e05f      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040f6:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <HAL_RCC_OscConfig+0x858>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x77c>
 8004102:	e057      	b.n	80041b4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004104:	4b2e      	ldr	r3, [pc, #184]	; (80041c0 <HAL_RCC_OscConfig+0x858>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2d      	ldr	r2, [pc, #180]	; (80041c0 <HAL_RCC_OscConfig+0x858>)
 800410a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800410e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004110:	f7fd ff3c 	bl	8001f8c <HAL_GetTick>
 8004114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004118:	f7fd ff38 	bl	8001f8c <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e045      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800412a:	4b25      	ldr	r3, [pc, #148]	; (80041c0 <HAL_RCC_OscConfig+0x858>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x7b0>
 8004136:	e03d      	b.n	80041b4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004138:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <HAL_RCC_OscConfig+0x858>)
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800413e:	4b20      	ldr	r3, [pc, #128]	; (80041c0 <HAL_RCC_OscConfig+0x858>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	2b01      	cmp	r3, #1
 800414a:	d031      	beq.n	80041b0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f003 0203 	and.w	r2, r3, #3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d12a      	bne.n	80041b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d122      	bne.n	80041b0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d11a      	bne.n	80041b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	0a5b      	lsrs	r3, r3, #9
 800417e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004186:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d111      	bne.n	80041b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	0c1b      	lsrs	r3, r3, #16
 8004190:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d108      	bne.n	80041b0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	0e1b      	lsrs	r3, r3, #24
 80041a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041aa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3730      	adds	r7, #48	; 0x30
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	58024400 	.word	0x58024400

080041c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e19c      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b8a      	ldr	r3, [pc, #552]	; (8004404 <HAL_RCC_ClockConfig+0x240>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d910      	bls.n	8004208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b87      	ldr	r3, [pc, #540]	; (8004404 <HAL_RCC_ClockConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 020f 	bic.w	r2, r3, #15
 80041ee:	4985      	ldr	r1, [pc, #532]	; (8004404 <HAL_RCC_ClockConfig+0x240>)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b83      	ldr	r3, [pc, #524]	; (8004404 <HAL_RCC_ClockConfig+0x240>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e184      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d010      	beq.n	8004236 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	4b7b      	ldr	r3, [pc, #492]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004220:	429a      	cmp	r2, r3
 8004222:	d908      	bls.n	8004236 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004224:	4b78      	ldr	r3, [pc, #480]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	4975      	ldr	r1, [pc, #468]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004232:	4313      	orrs	r3, r2
 8004234:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d010      	beq.n	8004264 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695a      	ldr	r2, [r3, #20]
 8004246:	4b70      	ldr	r3, [pc, #448]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800424e:	429a      	cmp	r2, r3
 8004250:	d908      	bls.n	8004264 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004252:	4b6d      	ldr	r3, [pc, #436]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	496a      	ldr	r1, [pc, #424]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004260:	4313      	orrs	r3, r2
 8004262:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d010      	beq.n	8004292 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699a      	ldr	r2, [r3, #24]
 8004274:	4b64      	ldr	r3, [pc, #400]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800427c:	429a      	cmp	r2, r3
 800427e:	d908      	bls.n	8004292 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004280:	4b61      	ldr	r3, [pc, #388]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	495e      	ldr	r1, [pc, #376]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 800428e:	4313      	orrs	r3, r2
 8004290:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0320 	and.w	r3, r3, #32
 800429a:	2b00      	cmp	r3, #0
 800429c:	d010      	beq.n	80042c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	4b59      	ldr	r3, [pc, #356]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d908      	bls.n	80042c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80042ae:	4b56      	ldr	r3, [pc, #344]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	4953      	ldr	r1, [pc, #332]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d010      	beq.n	80042ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	4b4d      	ldr	r3, [pc, #308]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	429a      	cmp	r2, r3
 80042da:	d908      	bls.n	80042ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042dc:	4b4a      	ldr	r3, [pc, #296]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f023 020f 	bic.w	r2, r3, #15
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4947      	ldr	r1, [pc, #284]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d055      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80042fa:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	4940      	ldr	r1, [pc, #256]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004308:	4313      	orrs	r3, r2
 800430a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d107      	bne.n	8004324 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004314:	4b3c      	ldr	r3, [pc, #240]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d121      	bne.n	8004364 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0f6      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d107      	bne.n	800433c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800432c:	4b36      	ldr	r3, [pc, #216]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d115      	bne.n	8004364 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0ea      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d107      	bne.n	8004354 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004344:	4b30      	ldr	r3, [pc, #192]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0de      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004354:	4b2c      	ldr	r3, [pc, #176]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0d6      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004364:	4b28      	ldr	r3, [pc, #160]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f023 0207 	bic.w	r2, r3, #7
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	4925      	ldr	r1, [pc, #148]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004372:	4313      	orrs	r3, r2
 8004374:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004376:	f7fd fe09 	bl	8001f8c <HAL_GetTick>
 800437a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437c:	e00a      	b.n	8004394 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437e:	f7fd fe05 	bl	8001f8c <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f241 3288 	movw	r2, #5000	; 0x1388
 800438c:	4293      	cmp	r3, r2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0be      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004394:	4b1c      	ldr	r3, [pc, #112]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 8004396:	691b      	ldr	r3, [r3, #16]
 8004398:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d1eb      	bne.n	800437e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d010      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	429a      	cmp	r2, r3
 80043c0:	d208      	bcs.n	80043d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c2:	4b11      	ldr	r3, [pc, #68]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	f023 020f 	bic.w	r2, r3, #15
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	490e      	ldr	r1, [pc, #56]	; (8004408 <HAL_RCC_ClockConfig+0x244>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d4:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_ClockConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d214      	bcs.n	800440c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e2:	4b08      	ldr	r3, [pc, #32]	; (8004404 <HAL_RCC_ClockConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 020f 	bic.w	r2, r3, #15
 80043ea:	4906      	ldr	r1, [pc, #24]	; (8004404 <HAL_RCC_ClockConfig+0x240>)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f2:	4b04      	ldr	r3, [pc, #16]	; (8004404 <HAL_RCC_ClockConfig+0x240>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d005      	beq.n	800440c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e086      	b.n	8004512 <HAL_RCC_ClockConfig+0x34e>
 8004404:	52002000 	.word	0x52002000
 8004408:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d010      	beq.n	800443a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	4b3f      	ldr	r3, [pc, #252]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004424:	429a      	cmp	r2, r3
 8004426:	d208      	bcs.n	800443a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004428:	4b3c      	ldr	r3, [pc, #240]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	4939      	ldr	r1, [pc, #228]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 8004436:	4313      	orrs	r3, r2
 8004438:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d010      	beq.n	8004468 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	695a      	ldr	r2, [r3, #20]
 800444a:	4b34      	ldr	r3, [pc, #208]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004452:	429a      	cmp	r2, r3
 8004454:	d208      	bcs.n	8004468 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004456:	4b31      	ldr	r3, [pc, #196]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	492e      	ldr	r1, [pc, #184]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 8004464:	4313      	orrs	r3, r2
 8004466:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	d010      	beq.n	8004496 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699a      	ldr	r2, [r3, #24]
 8004478:	4b28      	ldr	r3, [pc, #160]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004480:	429a      	cmp	r2, r3
 8004482:	d208      	bcs.n	8004496 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004484:	4b25      	ldr	r3, [pc, #148]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	4922      	ldr	r1, [pc, #136]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 8004492:	4313      	orrs	r3, r2
 8004494:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0320 	and.w	r3, r3, #32
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d010      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69da      	ldr	r2, [r3, #28]
 80044a6:	4b1d      	ldr	r3, [pc, #116]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d208      	bcs.n	80044c4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80044b2:	4b1a      	ldr	r3, [pc, #104]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	69db      	ldr	r3, [r3, #28]
 80044be:	4917      	ldr	r1, [pc, #92]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80044c4:	f000 f834 	bl	8004530 <HAL_RCC_GetSysClockFreq>
 80044c8:	4602      	mov	r2, r0
 80044ca:	4b14      	ldr	r3, [pc, #80]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	4912      	ldr	r1, [pc, #72]	; (8004520 <HAL_RCC_ClockConfig+0x35c>)
 80044d6:	5ccb      	ldrb	r3, [r1, r3]
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	fa22 f303 	lsr.w	r3, r2, r3
 80044e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80044e2:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_RCC_ClockConfig+0x358>)
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	4a0d      	ldr	r2, [pc, #52]	; (8004520 <HAL_RCC_ClockConfig+0x35c>)
 80044ec:	5cd3      	ldrb	r3, [r2, r3]
 80044ee:	f003 031f 	and.w	r3, r3, #31
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
 80044f8:	4a0a      	ldr	r2, [pc, #40]	; (8004524 <HAL_RCC_ClockConfig+0x360>)
 80044fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80044fc:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <HAL_RCC_ClockConfig+0x364>)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <HAL_RCC_ClockConfig+0x368>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd fbb2 	bl	8001c70 <HAL_InitTick>
 800450c:	4603      	mov	r3, r0
 800450e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400
 8004520:	0800bae8 	.word	0x0800bae8
 8004524:	24000004 	.word	0x24000004
 8004528:	24000000 	.word	0x24000000
 800452c:	24000008 	.word	0x24000008

08004530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004530:	b480      	push	{r7}
 8004532:	b089      	sub	sp, #36	; 0x24
 8004534:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004536:	4bb3      	ldr	r3, [pc, #716]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800453e:	2b18      	cmp	r3, #24
 8004540:	f200 8155 	bhi.w	80047ee <HAL_RCC_GetSysClockFreq+0x2be>
 8004544:	a201      	add	r2, pc, #4	; (adr r2, 800454c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	080045b1 	.word	0x080045b1
 8004550:	080047ef 	.word	0x080047ef
 8004554:	080047ef 	.word	0x080047ef
 8004558:	080047ef 	.word	0x080047ef
 800455c:	080047ef 	.word	0x080047ef
 8004560:	080047ef 	.word	0x080047ef
 8004564:	080047ef 	.word	0x080047ef
 8004568:	080047ef 	.word	0x080047ef
 800456c:	080045d7 	.word	0x080045d7
 8004570:	080047ef 	.word	0x080047ef
 8004574:	080047ef 	.word	0x080047ef
 8004578:	080047ef 	.word	0x080047ef
 800457c:	080047ef 	.word	0x080047ef
 8004580:	080047ef 	.word	0x080047ef
 8004584:	080047ef 	.word	0x080047ef
 8004588:	080047ef 	.word	0x080047ef
 800458c:	080045dd 	.word	0x080045dd
 8004590:	080047ef 	.word	0x080047ef
 8004594:	080047ef 	.word	0x080047ef
 8004598:	080047ef 	.word	0x080047ef
 800459c:	080047ef 	.word	0x080047ef
 80045a0:	080047ef 	.word	0x080047ef
 80045a4:	080047ef 	.word	0x080047ef
 80045a8:	080047ef 	.word	0x080047ef
 80045ac:	080045e3 	.word	0x080045e3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045b0:	4b94      	ldr	r3, [pc, #592]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d009      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045bc:	4b91      	ldr	r3, [pc, #580]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	08db      	lsrs	r3, r3, #3
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	4a90      	ldr	r2, [pc, #576]	; (8004808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80045ce:	e111      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80045d0:	4b8d      	ldr	r3, [pc, #564]	; (8004808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045d2:	61bb      	str	r3, [r7, #24]
    break;
 80045d4:	e10e      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80045d6:	4b8d      	ldr	r3, [pc, #564]	; (800480c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80045d8:	61bb      	str	r3, [r7, #24]
    break;
 80045da:	e10b      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80045dc:	4b8c      	ldr	r3, [pc, #560]	; (8004810 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80045de:	61bb      	str	r3, [r7, #24]
    break;
 80045e0:	e108      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045e2:	4b88      	ldr	r3, [pc, #544]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80045ec:	4b85      	ldr	r3, [pc, #532]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80045f8:	4b82      	ldr	r3, [pc, #520]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004602:	4b80      	ldr	r3, [pc, #512]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004606:	08db      	lsrs	r3, r3, #3
 8004608:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80e1 	beq.w	80047e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b02      	cmp	r3, #2
 800462a:	f000 8083 	beq.w	8004734 <HAL_RCC_GetSysClockFreq+0x204>
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b02      	cmp	r3, #2
 8004632:	f200 80a1 	bhi.w	8004778 <HAL_RCC_GetSysClockFreq+0x248>
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x114>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d056      	beq.n	80046f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004642:	e099      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004644:	4b6f      	ldr	r3, [pc, #444]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d02d      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004650:	4b6c      	ldr	r3, [pc, #432]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	08db      	lsrs	r3, r3, #3
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	4a6b      	ldr	r2, [pc, #428]	; (8004808 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
 8004660:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	ee07 3a90 	vmov	s15, r3
 8004668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467a:	4b62      	ldr	r3, [pc, #392]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004682:	ee07 3a90 	vmov	s15, r3
 8004686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468a:	ed97 6a02 	vldr	s12, [r7, #8]
 800468e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004814 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800469e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80046aa:	e087      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004818 <HAL_RCC_GetSysClockFreq+0x2e8>
 80046ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046be:	4b51      	ldr	r3, [pc, #324]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c6:	ee07 3a90 	vmov	s15, r3
 80046ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80046d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004814 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ee:	e065      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800481c <HAL_RCC_GetSysClockFreq+0x2ec>
 80046fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004702:	4b40      	ldr	r3, [pc, #256]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800470a:	ee07 3a90 	vmov	s15, r3
 800470e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004712:	ed97 6a02 	vldr	s12, [r7, #8]
 8004716:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004814 <HAL_RCC_GetSysClockFreq+0x2e4>
 800471a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800471e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800472a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800472e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004732:	e043      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004820 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004746:	4b2f      	ldr	r3, [pc, #188]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004756:	ed97 6a02 	vldr	s12, [r7, #8]
 800475a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004814 <HAL_RCC_GetSysClockFreq+0x2e4>
 800475e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800476a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004776:	e021      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	ee07 3a90 	vmov	s15, r3
 800477e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004782:	eddf 6a26 	vldr	s13, [pc, #152]	; 800481c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478a:	4b1e      	ldr	r3, [pc, #120]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479a:	ed97 6a02 	vldr	s12, [r7, #8]
 800479e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004814 <HAL_RCC_GetSysClockFreq+0x2e4>
 80047a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	0a5b      	lsrs	r3, r3, #9
 80047c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c6:	3301      	adds	r3, #1
 80047c8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	ee07 3a90 	vmov	s15, r3
 80047d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80047d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e0:	ee17 3a90 	vmov	r3, s15
 80047e4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80047e6:	e005      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61bb      	str	r3, [r7, #24]
    break;
 80047ec:	e002      	b.n	80047f4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047f0:	61bb      	str	r3, [r7, #24]
    break;
 80047f2:	bf00      	nop
  }

  return sysclockfreq;
 80047f4:	69bb      	ldr	r3, [r7, #24]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3724      	adds	r7, #36	; 0x24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	58024400 	.word	0x58024400
 8004808:	03d09000 	.word	0x03d09000
 800480c:	003d0900 	.word	0x003d0900
 8004810:	00f42400 	.word	0x00f42400
 8004814:	46000000 	.word	0x46000000
 8004818:	4c742400 	.word	0x4c742400
 800481c:	4a742400 	.word	0x4a742400
 8004820:	4b742400 	.word	0x4b742400

08004824 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800482a:	f7ff fe81 	bl	8004530 <HAL_RCC_GetSysClockFreq>
 800482e:	4602      	mov	r2, r0
 8004830:	4b10      	ldr	r3, [pc, #64]	; (8004874 <HAL_RCC_GetHCLKFreq+0x50>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	0a1b      	lsrs	r3, r3, #8
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	490f      	ldr	r1, [pc, #60]	; (8004878 <HAL_RCC_GetHCLKFreq+0x54>)
 800483c:	5ccb      	ldrb	r3, [r1, r3]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <HAL_RCC_GetHCLKFreq+0x50>)
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	4a09      	ldr	r2, [pc, #36]	; (8004878 <HAL_RCC_GetHCLKFreq+0x54>)
 8004852:	5cd3      	ldrb	r3, [r2, r3]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	fa22 f303 	lsr.w	r3, r2, r3
 800485e:	4a07      	ldr	r2, [pc, #28]	; (800487c <HAL_RCC_GetHCLKFreq+0x58>)
 8004860:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004862:	4a07      	ldr	r2, [pc, #28]	; (8004880 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <HAL_RCC_GetHCLKFreq+0x58>)
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3708      	adds	r7, #8
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	58024400 	.word	0x58024400
 8004878:	0800bae8 	.word	0x0800bae8
 800487c:	24000004 	.word	0x24000004
 8004880:	24000000 	.word	0x24000000

08004884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004888:	f7ff ffcc 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4904      	ldr	r1, [pc, #16]	; (80048ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	58024400 	.word	0x58024400
 80048ac:	0800bae8 	.word	0x0800bae8

080048b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80048b4:	f7ff ffb6 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4904      	ldr	r1, [pc, #16]	; (80048d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	58024400 	.word	0x58024400
 80048d8:	0800bae8 	.word	0x0800bae8

080048dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	223f      	movs	r2, #63	; 0x3f
 80048ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048ec:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <HAL_RCC_GetClockConfig+0x7c>)
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0207 	and.w	r2, r3, #7
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <HAL_RCC_GetClockConfig+0x7c>)
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004904:	4b14      	ldr	r3, [pc, #80]	; (8004958 <HAL_RCC_GetClockConfig+0x7c>)
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 020f 	and.w	r2, r3, #15
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004910:	4b11      	ldr	r3, [pc, #68]	; (8004958 <HAL_RCC_GetClockConfig+0x7c>)
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800491c:	4b0e      	ldr	r3, [pc, #56]	; (8004958 <HAL_RCC_GetClockConfig+0x7c>)
 800491e:	69db      	ldr	r3, [r3, #28]
 8004920:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCC_GetClockConfig+0x7c>)
 800492a:	69db      	ldr	r3, [r3, #28]
 800492c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <HAL_RCC_GetClockConfig+0x7c>)
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_RCC_GetClockConfig+0x80>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 020f 	and.w	r2, r3, #15
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	601a      	str	r2, [r3, #0]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	58024400 	.word	0x58024400
 800495c:	52002000 	.word	0x52002000

08004960 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004968:	2300      	movs	r3, #0
 800496a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800496c:	2300      	movs	r3, #0
 800496e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d03f      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004980:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004984:	d02a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004986:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800498a:	d824      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800498c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004990:	d018      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004996:	d81e      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800499c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a0:	d007      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049a2:	e018      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a4:	4ba3      	ldr	r3, [pc, #652]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	4aa2      	ldr	r2, [pc, #648]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049b0:	e015      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3304      	adds	r3, #4
 80049b6:	2102      	movs	r1, #2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 fff9 	bl	80069b0 <RCCEx_PLL2_Config>
 80049be:	4603      	mov	r3, r0
 80049c0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049c2:	e00c      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3324      	adds	r3, #36	; 0x24
 80049c8:	2102      	movs	r1, #2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f002 f8a2 	bl	8006b14 <RCCEx_PLL3_Config>
 80049d0:	4603      	mov	r3, r0
 80049d2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80049d4:	e003      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75fb      	strb	r3, [r7, #23]
      break;
 80049da:	e000      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049de:	7dfb      	ldrb	r3, [r7, #23]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80049e4:	4b93      	ldr	r3, [pc, #588]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f0:	4990      	ldr	r1, [pc, #576]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	650b      	str	r3, [r1, #80]	; 0x50
 80049f6:	e001      	b.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
 80049fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d03d      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d826      	bhi.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004a10:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a16:	bf00      	nop
 8004a18:	08004a2d 	.word	0x08004a2d
 8004a1c:	08004a3b 	.word	0x08004a3b
 8004a20:	08004a4d 	.word	0x08004a4d
 8004a24:	08004a65 	.word	0x08004a65
 8004a28:	08004a65 	.word	0x08004a65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2c:	4b81      	ldr	r3, [pc, #516]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	4a80      	ldr	r2, [pc, #512]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a38:	e015      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 ffb5 	bl	80069b0 <RCCEx_PLL2_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a4a:	e00c      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3324      	adds	r3, #36	; 0x24
 8004a50:	2100      	movs	r1, #0
 8004a52:	4618      	mov	r0, r3
 8004a54:	f002 f85e 	bl	8006b14 <RCCEx_PLL3_Config>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a5c:	e003      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	75fb      	strb	r3, [r7, #23]
      break;
 8004a62:	e000      	b.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d109      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a6c:	4b71      	ldr	r3, [pc, #452]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	f023 0207 	bic.w	r2, r3, #7
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a78:	496e      	ldr	r1, [pc, #440]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	650b      	str	r3, [r1, #80]	; 0x50
 8004a7e:	e001      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	7dfb      	ldrb	r3, [r7, #23]
 8004a82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d042      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a98:	d02b      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9e:	d825      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004aa0:	2bc0      	cmp	r3, #192	; 0xc0
 8004aa2:	d028      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004aa4:	2bc0      	cmp	r3, #192	; 0xc0
 8004aa6:	d821      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004aa8:	2b80      	cmp	r3, #128	; 0x80
 8004aaa:	d016      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d81d      	bhi.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d002      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d007      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004ab8:	e018      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aba:	4b5e      	ldr	r3, [pc, #376]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	4a5d      	ldr	r2, [pc, #372]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ac6:	e017      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3304      	adds	r3, #4
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 ff6e 	bl	80069b0 <RCCEx_PLL2_Config>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004ad8:	e00e      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3324      	adds	r3, #36	; 0x24
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f002 f817 	bl	8006b14 <RCCEx_PLL3_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004aea:	e005      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
      break;
 8004af0:	e002      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004af2:	bf00      	nop
 8004af4:	e000      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004af6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af8:	7dfb      	ldrb	r3, [r7, #23]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004afe:	4b4d      	ldr	r3, [pc, #308]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b02:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b0a:	494a      	ldr	r1, [pc, #296]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	650b      	str	r3, [r1, #80]	; 0x50
 8004b10:	e001      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d049      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b2c:	d030      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004b2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b32:	d82a      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b38:	d02c      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004b3a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b3e:	d824      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b44:	d018      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004b46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4a:	d81e      	bhi.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b54:	d007      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004b56:	e018      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b58:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5c:	4a35      	ldr	r2, [pc, #212]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b64:	e017      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 ff1f 	bl	80069b0 <RCCEx_PLL2_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b76:	e00e      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3324      	adds	r3, #36	; 0x24
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 ffc8 	bl	8006b14 <RCCEx_PLL3_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b88:	e005      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b8e:	e002      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b90:	bf00      	nop
 8004b92:	e000      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b96:	7dfb      	ldrb	r3, [r7, #23]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b9c:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004baa:	4922      	ldr	r1, [pc, #136]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	658b      	str	r3, [r1, #88]	; 0x58
 8004bb0:	e001      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04b      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bcc:	d030      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004bce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bd2:	d82a      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bd8:	d02e      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004bda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bde:	d824      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004be0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004be4:	d018      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004be6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bea:	d81e      	bhi.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d003      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bf4:	d007      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004bf6:	e018      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bf8:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	4a0d      	ldr	r2, [pc, #52]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c04:	e019      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fecf 	bl	80069b0 <RCCEx_PLL2_Config>
 8004c12:	4603      	mov	r3, r0
 8004c14:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004c16:	e010      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	3324      	adds	r3, #36	; 0x24
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 ff78 	bl	8006b14 <RCCEx_PLL3_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004c28:	e007      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004c2e:	e004      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004c30:	bf00      	nop
 8004c32:	e002      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004c34:	58024400 	.word	0x58024400
      break;
 8004c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004c40:	4b99      	ldr	r3, [pc, #612]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c44:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c4e:	4996      	ldr	r1, [pc, #600]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	658b      	str	r3, [r1, #88]	; 0x58
 8004c54:	e001      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d032      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c6a:	2b30      	cmp	r3, #48	; 0x30
 8004c6c:	d01c      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004c6e:	2b30      	cmp	r3, #48	; 0x30
 8004c70:	d817      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004c72:	2b20      	cmp	r3, #32
 8004c74:	d00c      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d813      	bhi.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d016      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	d10f      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c82:	4b89      	ldr	r3, [pc, #548]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	4a88      	ldr	r2, [pc, #544]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004c8e:	e00e      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	2102      	movs	r1, #2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f001 fe8a 	bl	80069b0 <RCCEx_PLL2_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ca0:	e005      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ca6:	e002      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004ca8:	bf00      	nop
 8004caa:	e000      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cae:	7dfb      	ldrb	r3, [r7, #23]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004cb4:	4b7c      	ldr	r3, [pc, #496]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cc0:	4979      	ldr	r1, [pc, #484]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004cc6:	e001      	b.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc8:	7dfb      	ldrb	r3, [r7, #23]
 8004cca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d047      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce0:	d030      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce6:	d82a      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004ce8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cec:	d02c      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004cee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cf2:	d824      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf8:	d018      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cfe:	d81e      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004d04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d08:	d007      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004d0a:	e018      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d0c:	4b66      	ldr	r3, [pc, #408]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	4a65      	ldr	r2, [pc, #404]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d18:	e017      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f001 fe45 	bl	80069b0 <RCCEx_PLL2_Config>
 8004d26:	4603      	mov	r3, r0
 8004d28:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d2a:	e00e      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3324      	adds	r3, #36	; 0x24
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 feee 	bl	8006b14 <RCCEx_PLL3_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004d3c:	e005      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	75fb      	strb	r3, [r7, #23]
      break;
 8004d42:	e002      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004d44:	bf00      	nop
 8004d46:	e000      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004d48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d50:	4b55      	ldr	r3, [pc, #340]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d54:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	4952      	ldr	r1, [pc, #328]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	650b      	str	r3, [r1, #80]	; 0x50
 8004d62:	e001      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d049      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d7c:	d02e      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004d7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d82:	d828      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d88:	d02a      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004d8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d8e:	d822      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d94:	d026      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004d96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d9a:	d81c      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004d9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da0:	d010      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da6:	d816      	bhi.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d01d      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db0:	d111      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3304      	adds	r3, #4
 8004db6:	2101      	movs	r1, #1
 8004db8:	4618      	mov	r0, r3
 8004dba:	f001 fdf9 	bl	80069b0 <RCCEx_PLL2_Config>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004dc2:	e012      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3324      	adds	r3, #36	; 0x24
 8004dc8:	2101      	movs	r1, #1
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f001 fea2 	bl	8006b14 <RCCEx_PLL3_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004dd4:	e009      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8004dda:	e006      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004ddc:	bf00      	nop
 8004dde:	e004      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004de0:	bf00      	nop
 8004de2:	e002      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d109      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004df0:	4b2d      	ldr	r3, [pc, #180]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dfc:	492a      	ldr	r1, [pc, #168]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	650b      	str	r3, [r1, #80]	; 0x50
 8004e02:	e001      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
 8004e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d04d      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e1e:	d02e      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e24:	d828      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2a:	d02a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d822      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004e32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e36:	d026      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004e38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e3c:	d81c      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e42:	d010      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e48:	d816      	bhi.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01d      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004e4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e52:	d111      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	3304      	adds	r3, #4
 8004e58:	2101      	movs	r1, #1
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 fda8 	bl	80069b0 <RCCEx_PLL2_Config>
 8004e60:	4603      	mov	r3, r0
 8004e62:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e64:	e012      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3324      	adds	r3, #36	; 0x24
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f001 fe51 	bl	8006b14 <RCCEx_PLL3_Config>
 8004e72:	4603      	mov	r3, r0
 8004e74:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004e76:	e009      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e7c:	e006      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e7e:	bf00      	nop
 8004e80:	e004      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10c      	bne.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004e92:	4b05      	ldr	r3, [pc, #20]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004ea0:	4901      	ldr	r1, [pc, #4]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ea6:	e003      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004ea8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
 8004eae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d02f      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec4:	d00e      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004eca:	d814      	bhi.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d015      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ed4:	d10f      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ed6:	4baf      	ldr	r3, [pc, #700]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	4aae      	ldr	r2, [pc, #696]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ee2:	e00c      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	2101      	movs	r1, #1
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 fd60 	bl	80069b0 <RCCEx_PLL2_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004ef4:	e003      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
      break;
 8004efa:	e000      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004efe:	7dfb      	ldrb	r3, [r7, #23]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d109      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f04:	4ba3      	ldr	r3, [pc, #652]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f10:	49a0      	ldr	r1, [pc, #640]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	650b      	str	r3, [r1, #80]	; 0x50
 8004f16:	e001      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f18:	7dfb      	ldrb	r3, [r7, #23]
 8004f1a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d032      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d81b      	bhi.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f6f 	.word	0x08004f6f
 8004f3c:	08004f49 	.word	0x08004f49
 8004f40:	08004f57 	.word	0x08004f57
 8004f44:	08004f6f 	.word	0x08004f6f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f48:	4b92      	ldr	r3, [pc, #584]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	4a91      	ldr	r2, [pc, #580]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f54:	e00c      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	2102      	movs	r1, #2
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 fd27 	bl	80069b0 <RCCEx_PLL2_Config>
 8004f62:	4603      	mov	r3, r0
 8004f64:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004f66:	e003      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004f6c:	e000      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d109      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004f76:	4b87      	ldr	r3, [pc, #540]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7a:	f023 0203 	bic.w	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	4984      	ldr	r1, [pc, #528]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f88:	e001      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
 8004f8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8086 	beq.w	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f9c:	4b7e      	ldr	r3, [pc, #504]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a7d      	ldr	r2, [pc, #500]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fa8:	f7fc fff0 	bl	8001f8c <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fae:	e009      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fb0:	f7fc ffec 	bl	8001f8c <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	; 0x64
 8004fbc:	d902      	bls.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	75fb      	strb	r3, [r7, #23]
        break;
 8004fc2:	e005      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004fc4:	4b74      	ldr	r3, [pc, #464]	; (8005198 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d0ef      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004fd0:	7dfb      	ldrb	r3, [r7, #23]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d166      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004fd6:	4b6f      	ldr	r3, [pc, #444]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fe0:	4053      	eors	r3, r2
 8004fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d013      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fea:	4b6a      	ldr	r3, [pc, #424]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ff4:	4b67      	ldr	r3, [pc, #412]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	4a66      	ldr	r2, [pc, #408]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005000:	4b64      	ldr	r3, [pc, #400]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005004:	4a63      	ldr	r2, [pc, #396]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800500a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800500c:	4a61      	ldr	r2, [pc, #388]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800501c:	d115      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fc ffb5 	bl	8001f8c <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005024:	e00b      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005026:	f7fc ffb1 	bl	8001f8c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	f241 3288 	movw	r2, #5000	; 0x1388
 8005034:	4293      	cmp	r3, r2
 8005036:	d902      	bls.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	75fb      	strb	r3, [r7, #23]
            break;
 800503c:	e005      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800503e:	4b55      	ldr	r3, [pc, #340]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0ed      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800504a:	7dfb      	ldrb	r3, [r7, #23]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d126      	bne.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800505a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800505e:	d10d      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005060:	4b4c      	ldr	r3, [pc, #304]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800506e:	0919      	lsrs	r1, r3, #4
 8005070:	4b4a      	ldr	r3, [pc, #296]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005072:	400b      	ands	r3, r1
 8005074:	4947      	ldr	r1, [pc, #284]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005076:	4313      	orrs	r3, r2
 8005078:	610b      	str	r3, [r1, #16]
 800507a:	e005      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800507c:	4b45      	ldr	r3, [pc, #276]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	4a44      	ldr	r2, [pc, #272]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005082:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005086:	6113      	str	r3, [r2, #16]
 8005088:	4b42      	ldr	r3, [pc, #264]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800508a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005096:	493f      	ldr	r1, [pc, #252]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005098:	4313      	orrs	r3, r2
 800509a:	670b      	str	r3, [r1, #112]	; 0x70
 800509c:	e004      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800509e:	7dfb      	ldrb	r3, [r7, #23]
 80050a0:	75bb      	strb	r3, [r7, #22]
 80050a2:	e001      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a4:	7dfb      	ldrb	r3, [r7, #23]
 80050a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8085 	beq.w	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050ba:	2b28      	cmp	r3, #40	; 0x28
 80050bc:	d866      	bhi.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80050be:	a201      	add	r2, pc, #4	; (adr r2, 80050c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	080051a1 	.word	0x080051a1
 80050c8:	0800518d 	.word	0x0800518d
 80050cc:	0800518d 	.word	0x0800518d
 80050d0:	0800518d 	.word	0x0800518d
 80050d4:	0800518d 	.word	0x0800518d
 80050d8:	0800518d 	.word	0x0800518d
 80050dc:	0800518d 	.word	0x0800518d
 80050e0:	0800518d 	.word	0x0800518d
 80050e4:	08005169 	.word	0x08005169
 80050e8:	0800518d 	.word	0x0800518d
 80050ec:	0800518d 	.word	0x0800518d
 80050f0:	0800518d 	.word	0x0800518d
 80050f4:	0800518d 	.word	0x0800518d
 80050f8:	0800518d 	.word	0x0800518d
 80050fc:	0800518d 	.word	0x0800518d
 8005100:	0800518d 	.word	0x0800518d
 8005104:	0800517b 	.word	0x0800517b
 8005108:	0800518d 	.word	0x0800518d
 800510c:	0800518d 	.word	0x0800518d
 8005110:	0800518d 	.word	0x0800518d
 8005114:	0800518d 	.word	0x0800518d
 8005118:	0800518d 	.word	0x0800518d
 800511c:	0800518d 	.word	0x0800518d
 8005120:	0800518d 	.word	0x0800518d
 8005124:	080051a1 	.word	0x080051a1
 8005128:	0800518d 	.word	0x0800518d
 800512c:	0800518d 	.word	0x0800518d
 8005130:	0800518d 	.word	0x0800518d
 8005134:	0800518d 	.word	0x0800518d
 8005138:	0800518d 	.word	0x0800518d
 800513c:	0800518d 	.word	0x0800518d
 8005140:	0800518d 	.word	0x0800518d
 8005144:	080051a1 	.word	0x080051a1
 8005148:	0800518d 	.word	0x0800518d
 800514c:	0800518d 	.word	0x0800518d
 8005150:	0800518d 	.word	0x0800518d
 8005154:	0800518d 	.word	0x0800518d
 8005158:	0800518d 	.word	0x0800518d
 800515c:	0800518d 	.word	0x0800518d
 8005160:	0800518d 	.word	0x0800518d
 8005164:	080051a1 	.word	0x080051a1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	3304      	adds	r3, #4
 800516c:	2101      	movs	r1, #1
 800516e:	4618      	mov	r0, r3
 8005170:	f001 fc1e 	bl	80069b0 <RCCEx_PLL2_Config>
 8005174:	4603      	mov	r3, r0
 8005176:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005178:	e013      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3324      	adds	r3, #36	; 0x24
 800517e:	2101      	movs	r1, #1
 8005180:	4618      	mov	r0, r3
 8005182:	f001 fcc7 	bl	8006b14 <RCCEx_PLL3_Config>
 8005186:	4603      	mov	r3, r0
 8005188:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800518a:	e00a      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	75fb      	strb	r3, [r7, #23]
      break;
 8005190:	e007      	b.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005192:	bf00      	nop
 8005194:	58024400 	.word	0x58024400
 8005198:	58024800 	.word	0x58024800
 800519c:	00ffffcf 	.word	0x00ffffcf
      break;
 80051a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051a2:	7dfb      	ldrb	r3, [r7, #23]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d109      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80051a8:	4b96      	ldr	r3, [pc, #600]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ac:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80051b4:	4993      	ldr	r1, [pc, #588]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	654b      	str	r3, [r1, #84]	; 0x54
 80051ba:	e001      	b.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d038      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d0:	2b05      	cmp	r3, #5
 80051d2:	d821      	bhi.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80051d4:	a201      	add	r2, pc, #4	; (adr r2, 80051dc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80051d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051da:	bf00      	nop
 80051dc:	0800521f 	.word	0x0800521f
 80051e0:	080051f5 	.word	0x080051f5
 80051e4:	08005207 	.word	0x08005207
 80051e8:	0800521f 	.word	0x0800521f
 80051ec:	0800521f 	.word	0x0800521f
 80051f0:	0800521f 	.word	0x0800521f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3304      	adds	r3, #4
 80051f8:	2101      	movs	r1, #1
 80051fa:	4618      	mov	r0, r3
 80051fc:	f001 fbd8 	bl	80069b0 <RCCEx_PLL2_Config>
 8005200:	4603      	mov	r3, r0
 8005202:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005204:	e00c      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3324      	adds	r3, #36	; 0x24
 800520a:	2101      	movs	r1, #1
 800520c:	4618      	mov	r0, r3
 800520e:	f001 fc81 	bl	8006b14 <RCCEx_PLL3_Config>
 8005212:	4603      	mov	r3, r0
 8005214:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005216:	e003      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
      break;
 800521c:	e000      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800521e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005226:	4b77      	ldr	r3, [pc, #476]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522a:	f023 0207 	bic.w	r2, r3, #7
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005232:	4974      	ldr	r1, [pc, #464]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005234:	4313      	orrs	r3, r2
 8005236:	654b      	str	r3, [r1, #84]	; 0x54
 8005238:	e001      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800523a:	7dfb      	ldrb	r3, [r7, #23]
 800523c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d03a      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005250:	2b05      	cmp	r3, #5
 8005252:	d821      	bhi.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	0800529f 	.word	0x0800529f
 8005260:	08005275 	.word	0x08005275
 8005264:	08005287 	.word	0x08005287
 8005268:	0800529f 	.word	0x0800529f
 800526c:	0800529f 	.word	0x0800529f
 8005270:	0800529f 	.word	0x0800529f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3304      	adds	r3, #4
 8005278:	2101      	movs	r1, #1
 800527a:	4618      	mov	r0, r3
 800527c:	f001 fb98 	bl	80069b0 <RCCEx_PLL2_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005284:	e00c      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	3324      	adds	r3, #36	; 0x24
 800528a:	2101      	movs	r1, #1
 800528c:	4618      	mov	r0, r3
 800528e:	f001 fc41 	bl	8006b14 <RCCEx_PLL3_Config>
 8005292:	4603      	mov	r3, r0
 8005294:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005296:	e003      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	75fb      	strb	r3, [r7, #23]
      break;
 800529c:	e000      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800529e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052a0:	7dfb      	ldrb	r3, [r7, #23]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052a6:	4b57      	ldr	r3, [pc, #348]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052aa:	f023 0207 	bic.w	r2, r3, #7
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b4:	4953      	ldr	r1, [pc, #332]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	658b      	str	r3, [r1, #88]	; 0x58
 80052ba:	e001      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	7dfb      	ldrb	r3, [r7, #23]
 80052be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d04b      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052d6:	d02e      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80052d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052dc:	d828      	bhi.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e2:	d02a      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80052e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e8:	d822      	bhi.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80052ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052ee:	d026      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80052f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052f4:	d81c      	bhi.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80052f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fa:	d010      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80052fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005300:	d816      	bhi.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d01d      	beq.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800530a:	d111      	bne.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	2100      	movs	r1, #0
 8005312:	4618      	mov	r0, r3
 8005314:	f001 fb4c 	bl	80069b0 <RCCEx_PLL2_Config>
 8005318:	4603      	mov	r3, r0
 800531a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800531c:	e012      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	3324      	adds	r3, #36	; 0x24
 8005322:	2102      	movs	r1, #2
 8005324:	4618      	mov	r0, r3
 8005326:	f001 fbf5 	bl	8006b14 <RCCEx_PLL3_Config>
 800532a:	4603      	mov	r3, r0
 800532c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800532e:	e009      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75fb      	strb	r3, [r7, #23]
      break;
 8005334:	e006      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005336:	bf00      	nop
 8005338:	e004      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800533a:	bf00      	nop
 800533c:	e002      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800533e:	bf00      	nop
 8005340:	e000      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005344:	7dfb      	ldrb	r3, [r7, #23]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800534a:	4b2e      	ldr	r3, [pc, #184]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800534c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005358:	492a      	ldr	r1, [pc, #168]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800535a:	4313      	orrs	r3, r2
 800535c:	654b      	str	r3, [r1, #84]	; 0x54
 800535e:	e001      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	7dfb      	ldrb	r3, [r7, #23]
 8005362:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b00      	cmp	r3, #0
 800536e:	d04d      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005376:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800537a:	d02e      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800537c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005380:	d828      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005386:	d02a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538c:	d822      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800538e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005392:	d026      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005394:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005398:	d81c      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800539a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800539e:	d010      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80053a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a4:	d816      	bhi.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d01d      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80053aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ae:	d111      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	2100      	movs	r1, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 fafa 	bl	80069b0 <RCCEx_PLL2_Config>
 80053bc:	4603      	mov	r3, r0
 80053be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80053c0:	e012      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3324      	adds	r3, #36	; 0x24
 80053c6:	2102      	movs	r1, #2
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 fba3 	bl	8006b14 <RCCEx_PLL3_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80053d2:	e009      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	75fb      	strb	r3, [r7, #23]
      break;
 80053d8:	e006      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80053da:	bf00      	nop
 80053dc:	e004      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80053de:	bf00      	nop
 80053e0:	e002      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80053e2:	bf00      	nop
 80053e4:	e000      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80053e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e8:	7dfb      	ldrb	r3, [r7, #23]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10c      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80053fc:	4901      	ldr	r1, [pc, #4]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	658b      	str	r3, [r1, #88]	; 0x58
 8005402:	e003      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005404:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005408:	7dfb      	ldrb	r3, [r7, #23]
 800540a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005414:	2b00      	cmp	r3, #0
 8005416:	d04b      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800541e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005422:	d02e      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005424:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005428:	d828      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800542a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800542e:	d02a      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005434:	d822      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005436:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800543a:	d026      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800543c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005440:	d81c      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005446:	d010      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800544c:	d816      	bhi.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01d      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005456:	d111      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3304      	adds	r3, #4
 800545c:	2100      	movs	r1, #0
 800545e:	4618      	mov	r0, r3
 8005460:	f001 faa6 	bl	80069b0 <RCCEx_PLL2_Config>
 8005464:	4603      	mov	r3, r0
 8005466:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005468:	e012      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	3324      	adds	r3, #36	; 0x24
 800546e:	2102      	movs	r1, #2
 8005470:	4618      	mov	r0, r3
 8005472:	f001 fb4f 	bl	8006b14 <RCCEx_PLL3_Config>
 8005476:	4603      	mov	r3, r0
 8005478:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800547a:	e009      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	75fb      	strb	r3, [r7, #23]
      break;
 8005480:	e006      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005482:	bf00      	nop
 8005484:	e004      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005486:	bf00      	nop
 8005488:	e002      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800548e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005490:	7dfb      	ldrb	r3, [r7, #23]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10a      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005496:	4b9d      	ldr	r3, [pc, #628]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054a4:	4999      	ldr	r1, [pc, #612]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	658b      	str	r3, [r1, #88]	; 0x58
 80054aa:	e001      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
 80054ae:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0308 	and.w	r3, r3, #8
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d01a      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c6:	d10a      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3324      	adds	r3, #36	; 0x24
 80054cc:	2102      	movs	r1, #2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f001 fb20 	bl	8006b14 <RCCEx_PLL3_Config>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054de:	4b8b      	ldr	r3, [pc, #556]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ec:	4987      	ldr	r1, [pc, #540]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0310 	and.w	r3, r3, #16
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005508:	d10a      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	3324      	adds	r3, #36	; 0x24
 800550e:	2102      	movs	r1, #2
 8005510:	4618      	mov	r0, r3
 8005512:	f001 faff 	bl	8006b14 <RCCEx_PLL3_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005520:	4b7a      	ldr	r3, [pc, #488]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552e:	4977      	ldr	r1, [pc, #476]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005530:	4313      	orrs	r3, r2
 8005532:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d034      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800554a:	d01d      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800554c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005550:	d817      	bhi.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555a:	d009      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800555c:	e011      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3304      	adds	r3, #4
 8005562:	2100      	movs	r1, #0
 8005564:	4618      	mov	r0, r3
 8005566:	f001 fa23 	bl	80069b0 <RCCEx_PLL2_Config>
 800556a:	4603      	mov	r3, r0
 800556c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800556e:	e00c      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3324      	adds	r3, #36	; 0x24
 8005574:	2102      	movs	r1, #2
 8005576:	4618      	mov	r0, r3
 8005578:	f001 facc 	bl	8006b14 <RCCEx_PLL3_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005580:	e003      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	75fb      	strb	r3, [r7, #23]
      break;
 8005586:	e000      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005590:	4b5e      	ldr	r3, [pc, #376]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800559e:	495b      	ldr	r1, [pc, #364]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	658b      	str	r3, [r1, #88]	; 0x58
 80055a4:	e001      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d033      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055c0:	d01c      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80055c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055c6:	d816      	bhi.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80055c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055cc:	d003      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80055ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055d2:	d007      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80055d4:	e00f      	b.n	80055f6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055d6:	4b4d      	ldr	r3, [pc, #308]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	4a4c      	ldr	r2, [pc, #304]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80055e2:	e00c      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3324      	adds	r3, #36	; 0x24
 80055e8:	2101      	movs	r1, #1
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fa92 	bl	8006b14 <RCCEx_PLL3_Config>
 80055f0:	4603      	mov	r3, r0
 80055f2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80055f4:	e003      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
      break;
 80055fa:	e000      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80055fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10a      	bne.n	800561a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005604:	4b41      	ldr	r3, [pc, #260]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005608:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005612:	493e      	ldr	r1, [pc, #248]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005614:	4313      	orrs	r3, r2
 8005616:	654b      	str	r3, [r1, #84]	; 0x54
 8005618:	e001      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800561a:	7dfb      	ldrb	r3, [r7, #23]
 800561c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d029      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005636:	d007      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005638:	e00f      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800563a:	4b34      	ldr	r3, [pc, #208]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	4a33      	ldr	r2, [pc, #204]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005644:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005646:	e00b      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	2102      	movs	r1, #2
 800564e:	4618      	mov	r0, r3
 8005650:	f001 f9ae 	bl	80069b0 <RCCEx_PLL2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005658:	e002      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	75fb      	strb	r3, [r7, #23]
      break;
 800565e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005660:	7dfb      	ldrb	r3, [r7, #23]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005666:	4b29      	ldr	r3, [pc, #164]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800566a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005672:	4926      	ldr	r1, [pc, #152]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005674:	4313      	orrs	r3, r2
 8005676:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005678:	e001      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567a:	7dfb      	ldrb	r3, [r7, #23]
 800567c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3324      	adds	r3, #36	; 0x24
 800568e:	2102      	movs	r1, #2
 8005690:	4618      	mov	r0, r3
 8005692:	f001 fa3f 	bl	8006b14 <RCCEx_PLL3_Config>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d033      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056b4:	d017      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80056b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ba:	d811      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80056bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c0:	d013      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80056c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056c6:	d80b      	bhi.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d010      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80056cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d0:	d106      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d2:	4b0e      	ldr	r3, [pc, #56]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	4a0d      	ldr	r2, [pc, #52]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80056de:	e007      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	75fb      	strb	r3, [r7, #23]
      break;
 80056e4:	e004      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80056e6:	bf00      	nop
 80056e8:	e002      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80056ea:	bf00      	nop
 80056ec:	e000      	b.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80056ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10c      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80056f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005702:	4902      	ldr	r1, [pc, #8]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005704:	4313      	orrs	r3, r2
 8005706:	654b      	str	r3, [r1, #84]	; 0x54
 8005708:	e004      	b.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800570a:	bf00      	nop
 800570c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005710:	7dfb      	ldrb	r3, [r7, #23]
 8005712:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005720:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005724:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	492e      	ldr	r1, [pc, #184]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800572e:	4313      	orrs	r3, r2
 8005730:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d009      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800573e:	4b2a      	ldr	r3, [pc, #168]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800574c:	4926      	ldr	r1, [pc, #152]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800574e:	4313      	orrs	r3, r2
 8005750:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800575e:	4b22      	ldr	r3, [pc, #136]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005762:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800576a:	491f      	ldr	r1, [pc, #124]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800576c:	4313      	orrs	r3, r2
 800576e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00d      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800577c:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	4a19      	ldr	r2, [pc, #100]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005782:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005786:	6113      	str	r3, [r2, #16]
 8005788:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005792:	4915      	ldr	r1, [pc, #84]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005794:	4313      	orrs	r3, r2
 8005796:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	da08      	bge.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80057a0:	4b11      	ldr	r3, [pc, #68]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ac:	490e      	ldr	r1, [pc, #56]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057be:	4b0a      	ldr	r3, [pc, #40]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057cc:	4906      	ldr	r1, [pc, #24]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80057d2:	7dbb      	ldrb	r3, [r7, #22]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d101      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80057d8:	2300      	movs	r3, #0
 80057da:	e000      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3718      	adds	r7, #24
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	58024400 	.word	0x58024400

080057ec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b090      	sub	sp, #64	; 0x40
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057fa:	f040 8095 	bne.w	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80057fe:	4b97      	ldr	r3, [pc, #604]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580a:	2b04      	cmp	r3, #4
 800580c:	f200 8088 	bhi.w	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005810:	a201      	add	r2, pc, #4	; (adr r2, 8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	0800582d 	.word	0x0800582d
 800581c:	08005855 	.word	0x08005855
 8005820:	0800587d 	.word	0x0800587d
 8005824:	08005919 	.word	0x08005919
 8005828:	080058a5 	.word	0x080058a5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800582c:	4b8b      	ldr	r3, [pc, #556]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005834:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005838:	d108      	bne.n	800584c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800583a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800583e:	4618      	mov	r0, r3
 8005840:	f000 ff64 	bl	800670c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005848:	f000 bc94 	b.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005850:	f000 bc90 	b.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005854:	4b81      	ldr	r3, [pc, #516]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800585c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005860:	d108      	bne.n	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005862:	f107 0318 	add.w	r3, r7, #24
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fca8 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005870:	f000 bc80 	b.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005878:	f000 bc7c 	b.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800587c:	4b77      	ldr	r3, [pc, #476]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005888:	d108      	bne.n	800589c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800588a:	f107 030c 	add.w	r3, r7, #12
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fde8 	bl	8006464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005898:	f000 bc6c 	b.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058a0:	f000 bc68 	b.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058a4:	4b6d      	ldr	r3, [pc, #436]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80058a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058ac:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058ae:	4b6b      	ldr	r3, [pc, #428]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058c0:	4b66      	ldr	r3, [pc, #408]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	08db      	lsrs	r3, r3, #3
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	4a65      	ldr	r2, [pc, #404]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
 80058d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d2:	e01f      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058d4:	4b61      	ldr	r3, [pc, #388]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058e0:	d106      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80058e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058e8:	d102      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80058ea:	4b5e      	ldr	r3, [pc, #376]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058ee:	e011      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058f0:	4b5a      	ldr	r3, [pc, #360]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058fc:	d106      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80058fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005904:	d102      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005906:	4b58      	ldr	r3, [pc, #352]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800590a:	e003      	b.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005910:	f000 bc30 	b.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005914:	f000 bc2e 	b.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005918:	4b54      	ldr	r3, [pc, #336]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800591c:	f000 bc2a 	b.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005924:	f000 bc26 	b.w	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800592e:	f040 809f 	bne.w	8005a70 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005932:	4b4a      	ldr	r3, [pc, #296]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005936:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800593a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005942:	d04d      	beq.n	80059e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800594a:	f200 8084 	bhi.w	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005950:	2bc0      	cmp	r3, #192	; 0xc0
 8005952:	d07d      	beq.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005956:	2bc0      	cmp	r3, #192	; 0xc0
 8005958:	d87d      	bhi.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	d02d      	beq.n	80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005962:	2b80      	cmp	r3, #128	; 0x80
 8005964:	d877      	bhi.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d012      	beq.n	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005972:	e070      	b.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005974:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005980:	d107      	bne.n	8005992 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fec0 	bl	800670c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005990:	e3f0      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005996:	e3ed      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005998:	4b30      	ldr	r3, [pc, #192]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059a4:	d107      	bne.n	80059b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059a6:	f107 0318 	add.w	r3, r7, #24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 fc06 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059b4:	e3de      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059ba:	e3db      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059bc:	4b27      	ldr	r3, [pc, #156]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c8:	d107      	bne.n	80059da <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059ca:	f107 030c 	add.w	r3, r7, #12
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fd48 	bl	8006464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80059d8:	e3cc      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059de:	e3c9      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80059e0:	4b1e      	ldr	r3, [pc, #120]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80059e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059e8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059ea:	4b1c      	ldr	r3, [pc, #112]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d10c      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d109      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80059fc:	4b17      	ldr	r3, [pc, #92]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	08db      	lsrs	r3, r3, #3
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	4a16      	ldr	r2, [pc, #88]	; (8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005a08:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0e:	e01e      	b.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a10:	4b12      	ldr	r3, [pc, #72]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a1c:	d106      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a24:	d102      	bne.n	8005a2c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005a26:	4b0f      	ldr	r3, [pc, #60]	; (8005a64 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a2a:	e010      	b.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a38:	d106      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8005a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a40:	d102      	bne.n	8005a48 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005a42:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a46:	e002      	b.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005a4c:	e392      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005a4e:	e391      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005a50:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005a52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a54:	e38e      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a5a:	e38b      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005a5c:	58024400 	.word	0x58024400
 8005a60:	03d09000 	.word	0x03d09000
 8005a64:	003d0900 	.word	0x003d0900
 8005a68:	00f42400 	.word	0x00f42400
 8005a6c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a76:	f040 809c 	bne.w	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8005a7a:	4b9d      	ldr	r3, [pc, #628]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8005a82:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a8a:	d054      	beq.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a92:	f200 808b 	bhi.w	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a9c:	f000 8083 	beq.w	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005aa6:	f200 8081 	bhi.w	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ab0:	d02f      	beq.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ab8:	d878      	bhi.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d004      	beq.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ac6:	d012      	beq.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8005ac8:	e070      	b.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005aca:	4b89      	ldr	r3, [pc, #548]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ad6:	d107      	bne.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ad8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 fe15 	bl	800670c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ae6:	e345      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aec:	e342      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005aee:	4b80      	ldr	r3, [pc, #512]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005afa:	d107      	bne.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005afc:	f107 0318 	add.w	r3, r7, #24
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fb5b 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b0a:	e333      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b10:	e330      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b12:	4b77      	ldr	r3, [pc, #476]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b1e:	d107      	bne.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b20:	f107 030c 	add.w	r3, r7, #12
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fc9d 	bl	8006464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b2e:	e321      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b34:	e31e      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005b36:	4b6e      	ldr	r3, [pc, #440]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b3e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005b40:	4b6b      	ldr	r3, [pc, #428]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d10c      	bne.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b52:	4b67      	ldr	r3, [pc, #412]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	08db      	lsrs	r3, r3, #3
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	4a65      	ldr	r2, [pc, #404]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b64:	e01e      	b.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005b66:	4b62      	ldr	r3, [pc, #392]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b72:	d106      	bne.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b7a:	d102      	bne.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005b7c:	4b5e      	ldr	r3, [pc, #376]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b80:	e010      	b.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005b82:	4b5b      	ldr	r3, [pc, #364]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b8e:	d106      	bne.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b96:	d102      	bne.n	8005b9e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005b98:	4b58      	ldr	r3, [pc, #352]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b9c:	e002      	b.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005ba2:	e2e7      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005ba4:	e2e6      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005ba6:	4b56      	ldr	r3, [pc, #344]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005baa:	e2e3      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bb0:	e2e0      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb8:	f040 80a7 	bne.w	8005d0a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005bbc:	4b4c      	ldr	r3, [pc, #304]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bc0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005bc4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bcc:	d055      	beq.n	8005c7a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bd4:	f200 8096 	bhi.w	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005bde:	f000 8084 	beq.w	8005cea <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005be8:	f200 808c 	bhi.w	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bf2:	d030      	beq.n	8005c56 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bfa:	f200 8083 	bhi.w	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d004      	beq.n	8005c0e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c0a:	d012      	beq.n	8005c32 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005c0c:	e07a      	b.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c0e:	4b38      	ldr	r3, [pc, #224]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c1a:	d107      	bne.n	8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 fd73 	bl	800670c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c2a:	e2a3      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c30:	e2a0      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c32:	4b2f      	ldr	r3, [pc, #188]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c3e:	d107      	bne.n	8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c40:	f107 0318 	add.w	r3, r7, #24
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fab9 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005c4e:	e291      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c54:	e28e      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005c56:	4b26      	ldr	r3, [pc, #152]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c62:	d107      	bne.n	8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c64:	f107 030c 	add.w	r3, r7, #12
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 fbfb 	bl	8006464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005c72:	e27f      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005c74:	2300      	movs	r3, #0
 8005c76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c78:	e27c      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005c7a:	4b1d      	ldr	r3, [pc, #116]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c84:	4b1a      	ldr	r3, [pc, #104]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d10c      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c96:	4b16      	ldr	r3, [pc, #88]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	08db      	lsrs	r3, r3, #3
 8005c9c:	f003 0303 	and.w	r3, r3, #3
 8005ca0:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca8:	e01e      	b.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005caa:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb6:	d106      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cbe:	d102      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	; (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cc4:	e010      	b.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005cc6:	4b0a      	ldr	r3, [pc, #40]	; (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cd2:	d106      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cda:	d102      	bne.n	8005ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005cdc:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce0:	e002      	b.n	8005ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005ce6:	e245      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005ce8:	e244      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005cea:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cee:	e241      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005cf0:	58024400 	.word	0x58024400
 8005cf4:	03d09000 	.word	0x03d09000
 8005cf8:	003d0900 	.word	0x003d0900
 8005cfc:	00f42400 	.word	0x00f42400
 8005d00:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d08:	e234      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d10:	f040 809c 	bne.w	8005e4c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005d14:	4b9b      	ldr	r3, [pc, #620]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d18:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005d1c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d24:	d054      	beq.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d2c:	f200 808b 	bhi.w	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d36:	f000 8083 	beq.w	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8005d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d40:	f200 8081 	bhi.w	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d4a:	d02f      	beq.n	8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d52:	d878      	bhi.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d60:	d012      	beq.n	8005d88 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005d62:	e070      	b.n	8005e46 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005d64:	4b87      	ldr	r3, [pc, #540]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d70:	d107      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fcc8 	bl	800670c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d80:	e1f8      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d86:	e1f5      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005d88:	4b7e      	ldr	r3, [pc, #504]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d94:	d107      	bne.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d96:	f107 0318 	add.w	r3, r7, #24
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fa0e 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005da4:	e1e6      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005da6:	2300      	movs	r3, #0
 8005da8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005daa:	e1e3      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005dac:	4b75      	ldr	r3, [pc, #468]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005db8:	d107      	bne.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dba:	f107 030c 	add.w	r3, r7, #12
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fb50 	bl	8006464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005dc8:	e1d4      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005dce:	e1d1      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005dd0:	4b6c      	ldr	r3, [pc, #432]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005dd8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005dda:	4b6a      	ldr	r3, [pc, #424]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0304 	and.w	r3, r3, #4
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d10c      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d109      	bne.n	8005e00 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005dec:	4b65      	ldr	r3, [pc, #404]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	08db      	lsrs	r3, r3, #3
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	4a64      	ldr	r2, [pc, #400]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005df8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dfe:	e01e      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e00:	4b60      	ldr	r3, [pc, #384]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e0c:	d106      	bne.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e14:	d102      	bne.n	8005e1c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005e16:	4b5d      	ldr	r3, [pc, #372]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e1a:	e010      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e1c:	4b59      	ldr	r3, [pc, #356]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e28:	d106      	bne.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e30:	d102      	bne.n	8005e38 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005e32:	4b57      	ldr	r3, [pc, #348]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005e34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e36:	e002      	b.n	8005e3e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005e3c:	e19a      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005e3e:	e199      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e40:	4b54      	ldr	r3, [pc, #336]	; (8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e44:	e196      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e4a:	e193      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005e52:	d173      	bne.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005e54:	4b4b      	ldr	r3, [pc, #300]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e5c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e64:	d02f      	beq.n	8005ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e6c:	d863      	bhi.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d004      	beq.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8005e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e7a:	d012      	beq.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8005e7c:	e05b      	b.n	8005f36 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005e7e:	4b41      	ldr	r3, [pc, #260]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e8a:	d107      	bne.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e8c:	f107 0318 	add.w	r3, r7, #24
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 f993 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e9a:	e16b      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ea0:	e168      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ea2:	4b38      	ldr	r3, [pc, #224]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eae:	d107      	bne.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005eb0:	f107 030c 	add.w	r3, r7, #12
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fad5 	bl	8006464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ebe:	e159      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ec4:	e156      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005ec6:	4b2f      	ldr	r3, [pc, #188]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ece:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ed0:	4b2c      	ldr	r3, [pc, #176]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b04      	cmp	r3, #4
 8005eda:	d10c      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8005edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ee2:	4b28      	ldr	r3, [pc, #160]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	4a26      	ldr	r2, [pc, #152]	; (8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005eee:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ef4:	e01e      	b.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ef6:	4b23      	ldr	r3, [pc, #140]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f02:	d106      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8005f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f0a:	d102      	bne.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005f0c:	4b1f      	ldr	r3, [pc, #124]	; (8005f8c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f10:	e010      	b.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005f12:	4b1c      	ldr	r3, [pc, #112]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f1e:	d106      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8005f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f26:	d102      	bne.n	8005f2e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005f28:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f2c:	e002      	b.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005f32:	e11f      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005f34:	e11e      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f3a:	e11b      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f42:	d13e      	bne.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005f44:	4b0f      	ldr	r3, [pc, #60]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f4c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d004      	beq.n	8005f5e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5a:	d01d      	beq.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005f5c:	e02e      	b.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005f5e:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f6a:	d107      	bne.n	8005f7c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 fbcb 	bl	800670c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f7a:	e0fb      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f80:	e0f8      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005f82:	bf00      	nop
 8005f84:	58024400 	.word	0x58024400
 8005f88:	03d09000 	.word	0x03d09000
 8005f8c:	003d0900 	.word	0x003d0900
 8005f90:	00f42400 	.word	0x00f42400
 8005f94:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f98:	4b79      	ldr	r3, [pc, #484]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fa4:	d107      	bne.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fa6:	f107 0318 	add.w	r3, r7, #24
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 f906 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005fb4:	e0de      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fba:	e0db      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fc0:	e0d8      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fc8:	f040 8085 	bne.w	80060d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005fcc:	4b6c      	ldr	r3, [pc, #432]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005fd4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fdc:	d06b      	beq.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fe4:	d874      	bhi.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fec:	d056      	beq.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff4:	d86c      	bhi.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005ffc:	d03b      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006004:	d864      	bhi.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800600c:	d021      	beq.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800600e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006014:	d85c      	bhi.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	2b00      	cmp	r3, #0
 800601a:	d004      	beq.n	8006026 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006022:	d004      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006024:	e054      	b.n	80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006026:	f000 f8b3 	bl	8006190 <HAL_RCCEx_GetD3PCLK1Freq>
 800602a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800602c:	e0a2      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800602e:	4b54      	ldr	r3, [pc, #336]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800603a:	d107      	bne.n	800604c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800603c:	f107 0318 	add.w	r3, r7, #24
 8006040:	4618      	mov	r0, r3
 8006042:	f000 f8bb 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800604a:	e093      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006050:	e090      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006052:	4b4b      	ldr	r3, [pc, #300]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800605a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800605e:	d107      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	4618      	mov	r0, r3
 8006066:	f000 f9fd 	bl	8006464 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800606e:	e081      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006074:	e07e      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006076:	4b42      	ldr	r3, [pc, #264]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b04      	cmp	r3, #4
 8006080:	d109      	bne.n	8006096 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006082:	4b3f      	ldr	r3, [pc, #252]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	08db      	lsrs	r3, r3, #3
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	4a3d      	ldr	r2, [pc, #244]	; (8006184 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800608e:	fa22 f303 	lsr.w	r3, r2, r3
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006094:	e06e      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800609a:	e06b      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800609c:	4b38      	ldr	r3, [pc, #224]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a8:	d102      	bne.n	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80060aa:	4b37      	ldr	r3, [pc, #220]	; (8006188 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80060ae:	e061      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060b4:	e05e      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80060b6:	4b32      	ldr	r3, [pc, #200]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80060c2:	d102      	bne.n	80060ca <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80060c4:	4b31      	ldr	r3, [pc, #196]	; (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80060c8:	e054      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060ce:	e051      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 80060d0:	2300      	movs	r3, #0
 80060d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060d4:	e04e      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060dc:	d148      	bne.n	8006170 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80060de:	4b28      	ldr	r3, [pc, #160]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80060e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80060e6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80060e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060ee:	d02a      	beq.n	8006146 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80060f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060f6:	d838      	bhi.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d004      	beq.n	8006108 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 80060fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006100:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006104:	d00d      	beq.n	8006122 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006106:	e030      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006108:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006114:	d102      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8006116:	4b1d      	ldr	r3, [pc, #116]	; (800618c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006118:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800611a:	e02b      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800611c:	2300      	movs	r3, #0
 800611e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006120:	e028      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006122:	4b17      	ldr	r3, [pc, #92]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800612e:	d107      	bne.n	8006140 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fae9 	bl	800670c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800613e:	e019      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006144:	e016      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006146:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800614e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006152:	d107      	bne.n	8006164 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006154:	f107 0318 	add.w	r3, r7, #24
 8006158:	4618      	mov	r0, r3
 800615a:	f000 f82f 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006162:	e007      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006164:	2300      	movs	r3, #0
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006168:	e004      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800616e:	e001      	b.n	8006174 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006176:	4618      	mov	r0, r3
 8006178:	3740      	adds	r7, #64	; 0x40
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	58024400 	.word	0x58024400
 8006184:	03d09000 	.word	0x03d09000
 8006188:	003d0900 	.word	0x003d0900
 800618c:	00f42400 	.word	0x00f42400

08006190 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006194:	f7fe fb46 	bl	8004824 <HAL_RCC_GetHCLKFreq>
 8006198:	4602      	mov	r2, r0
 800619a:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	091b      	lsrs	r3, r3, #4
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	4904      	ldr	r1, [pc, #16]	; (80061b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80061a6:	5ccb      	ldrb	r3, [r1, r3]
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	58024400 	.word	0x58024400
 80061b8:	0800bae8 	.word	0x0800bae8

080061bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80061bc:	b480      	push	{r7}
 80061be:	b089      	sub	sp, #36	; 0x24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061c4:	4ba1      	ldr	r3, [pc, #644]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c8:	f003 0303 	and.w	r3, r3, #3
 80061cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80061ce:	4b9f      	ldr	r3, [pc, #636]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d2:	0b1b      	lsrs	r3, r3, #12
 80061d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80061da:	4b9c      	ldr	r3, [pc, #624]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	091b      	lsrs	r3, r3, #4
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80061e6:	4b99      	ldr	r3, [pc, #612]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ea:	08db      	lsrs	r3, r3, #3
 80061ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	fb02 f303 	mul.w	r3, r2, r3
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8111 	beq.w	800642c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	2b02      	cmp	r3, #2
 800620e:	f000 8083 	beq.w	8006318 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b02      	cmp	r3, #2
 8006216:	f200 80a1 	bhi.w	800635c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d056      	beq.n	80062d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006226:	e099      	b.n	800635c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006228:	4b88      	ldr	r3, [pc, #544]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0320 	and.w	r3, r3, #32
 8006230:	2b00      	cmp	r3, #0
 8006232:	d02d      	beq.n	8006290 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006234:	4b85      	ldr	r3, [pc, #532]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	08db      	lsrs	r3, r3, #3
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	4a84      	ldr	r2, [pc, #528]	; (8006450 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006240:	fa22 f303 	lsr.w	r3, r2, r3
 8006244:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	ee07 3a90 	vmov	s15, r3
 800624c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800625e:	4b7b      	ldr	r3, [pc, #492]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800626e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006272:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800627a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800627e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800628a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800628e:	e087      	b.n	80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006458 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800629e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a2:	4b6a      	ldr	r3, [pc, #424]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062aa:	ee07 3a90 	vmov	s15, r3
 80062ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062d2:	e065      	b.n	80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800645c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062e6:	4b59      	ldr	r3, [pc, #356]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ee:	ee07 3a90 	vmov	s15, r3
 80062f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80062fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800630a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800630e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006312:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006316:	e043      	b.n	80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006322:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006460 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800632a:	4b48      	ldr	r3, [pc, #288]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800632c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006332:	ee07 3a90 	vmov	s15, r3
 8006336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800633a:	ed97 6a03 	vldr	s12, [r7, #12]
 800633e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800634a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800634e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006356:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800635a:	e021      	b.n	80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006366:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800645c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800636a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800636e:	4b37      	ldr	r3, [pc, #220]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800637e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006382:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006454 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800638a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800638e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800639e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80063a0:	4b2a      	ldr	r3, [pc, #168]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	0a5b      	lsrs	r3, r3, #9
 80063a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063aa:	ee07 3a90 	vmov	s15, r3
 80063ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80063be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c6:	ee17 2a90 	vmov	r2, s15
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80063ce:	4b1f      	ldr	r3, [pc, #124]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d2:	0c1b      	lsrs	r3, r3, #16
 80063d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063d8:	ee07 3a90 	vmov	s15, r3
 80063dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80063ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063f4:	ee17 2a90 	vmov	r2, s15
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80063fc:	4b13      	ldr	r3, [pc, #76]	; (800644c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	0e1b      	lsrs	r3, r3, #24
 8006402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006412:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006416:	edd7 6a07 	vldr	s13, [r7, #28]
 800641a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800641e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006422:	ee17 2a90 	vmov	r2, s15
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800642a:	e008      	b.n	800643e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	609a      	str	r2, [r3, #8]
}
 800643e:	bf00      	nop
 8006440:	3724      	adds	r7, #36	; 0x24
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	58024400 	.word	0x58024400
 8006450:	03d09000 	.word	0x03d09000
 8006454:	46000000 	.word	0x46000000
 8006458:	4c742400 	.word	0x4c742400
 800645c:	4a742400 	.word	0x4a742400
 8006460:	4b742400 	.word	0x4b742400

08006464 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006464:	b480      	push	{r7}
 8006466:	b089      	sub	sp, #36	; 0x24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800646c:	4ba1      	ldr	r3, [pc, #644]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006470:	f003 0303 	and.w	r3, r3, #3
 8006474:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006476:	4b9f      	ldr	r3, [pc, #636]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800647a:	0d1b      	lsrs	r3, r3, #20
 800647c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006480:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006482:	4b9c      	ldr	r3, [pc, #624]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800648e:	4b99      	ldr	r3, [pc, #612]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	08db      	lsrs	r3, r3, #3
 8006494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	fb02 f303 	mul.w	r3, r2, r3
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8111 	beq.w	80066d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	f000 8083 	beq.w	80065c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	f200 80a1 	bhi.w	8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d056      	beq.n	800657c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80064ce:	e099      	b.n	8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064d0:	4b88      	ldr	r3, [pc, #544]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 0320 	and.w	r3, r3, #32
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d02d      	beq.n	8006538 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80064dc:	4b85      	ldr	r3, [pc, #532]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	08db      	lsrs	r3, r3, #3
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	4a84      	ldr	r2, [pc, #528]	; (80066f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80064e8:	fa22 f303 	lsr.w	r3, r2, r3
 80064ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	ee07 3a90 	vmov	s15, r3
 80064f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006506:	4b7b      	ldr	r3, [pc, #492]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006516:	ed97 6a03 	vldr	s12, [r7, #12]
 800651a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80066fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800651e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800652a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006536:	e087      	b.n	8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006700 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654a:	4b6a      	ldr	r3, [pc, #424]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655a:	ed97 6a03 	vldr	s12, [r7, #12]
 800655e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80066fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800656e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006576:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800657a:	e065      	b.n	8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006586:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800658a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800658e:	4b59      	ldr	r3, [pc, #356]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006596:	ee07 3a90 	vmov	s15, r3
 800659a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800659e:	ed97 6a03 	vldr	s12, [r7, #12]
 80065a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80066fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80065be:	e043      	b.n	8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80065ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065d2:	4b48      	ldr	r3, [pc, #288]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80065e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80066fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80065ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006602:	e021      	b.n	8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	ee07 3a90 	vmov	s15, r3
 800660a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006704 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006616:	4b37      	ldr	r3, [pc, #220]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800661e:	ee07 3a90 	vmov	s15, r3
 8006622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006626:	ed97 6a03 	vldr	s12, [r7, #12]
 800662a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80066fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800662e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800663a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800663e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006646:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006648:	4b2a      	ldr	r3, [pc, #168]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	0a5b      	lsrs	r3, r3, #9
 800664e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006652:	ee07 3a90 	vmov	s15, r3
 8006656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800665a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800665e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006662:	edd7 6a07 	vldr	s13, [r7, #28]
 8006666:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800666a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800666e:	ee17 2a90 	vmov	r2, s15
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006676:	4b1f      	ldr	r3, [pc, #124]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667a:	0c1b      	lsrs	r3, r3, #16
 800667c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006680:	ee07 3a90 	vmov	s15, r3
 8006684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800668c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006690:	edd7 6a07 	vldr	s13, [r7, #28]
 8006694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006698:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800669c:	ee17 2a90 	vmov	r2, s15
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80066a4:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80066a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a8:	0e1b      	lsrs	r3, r3, #24
 80066aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066be:	edd7 6a07 	vldr	s13, [r7, #28]
 80066c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ca:	ee17 2a90 	vmov	r2, s15
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80066d2:	e008      	b.n	80066e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	609a      	str	r2, [r3, #8]
}
 80066e6:	bf00      	nop
 80066e8:	3724      	adds	r7, #36	; 0x24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	58024400 	.word	0x58024400
 80066f8:	03d09000 	.word	0x03d09000
 80066fc:	46000000 	.word	0x46000000
 8006700:	4c742400 	.word	0x4c742400
 8006704:	4a742400 	.word	0x4a742400
 8006708:	4b742400 	.word	0x4b742400

0800670c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800670c:	b480      	push	{r7}
 800670e:	b089      	sub	sp, #36	; 0x24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006714:	4ba0      	ldr	r3, [pc, #640]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	f003 0303 	and.w	r3, r3, #3
 800671c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800671e:	4b9e      	ldr	r3, [pc, #632]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	091b      	lsrs	r3, r3, #4
 8006724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006728:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800672a:	4b9b      	ldr	r3, [pc, #620]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006734:	4b98      	ldr	r3, [pc, #608]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006738:	08db      	lsrs	r3, r3, #3
 800673a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	fb02 f303 	mul.w	r3, r2, r3
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f000 8111 	beq.w	800697a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b02      	cmp	r3, #2
 800675c:	f000 8083 	beq.w	8006866 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	2b02      	cmp	r3, #2
 8006764:	f200 80a1 	bhi.w	80068aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d056      	beq.n	8006822 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006774:	e099      	b.n	80068aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006776:	4b88      	ldr	r3, [pc, #544]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0320 	and.w	r3, r3, #32
 800677e:	2b00      	cmp	r3, #0
 8006780:	d02d      	beq.n	80067de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006782:	4b85      	ldr	r3, [pc, #532]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	08db      	lsrs	r3, r3, #3
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	4a83      	ldr	r2, [pc, #524]	; (800699c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800678e:	fa22 f303 	lsr.w	r3, r2, r3
 8006792:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	ee07 3a90 	vmov	s15, r3
 80067a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ac:	4b7a      	ldr	r3, [pc, #488]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b4:	ee07 3a90 	vmov	s15, r3
 80067b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80067c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80069a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80067dc:	e087      	b.n	80068ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80067ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067f0:	4b69      	ldr	r3, [pc, #420]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f8:	ee07 3a90 	vmov	s15, r3
 80067fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006800:	ed97 6a03 	vldr	s12, [r7, #12]
 8006804:	eddf 5a66 	vldr	s11, [pc, #408]	; 80069a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006808:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006810:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006814:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006820:	e065      	b.n	80068ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	ee07 3a90 	vmov	s15, r3
 8006828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80069a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006830:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006834:	4b58      	ldr	r3, [pc, #352]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006844:	ed97 6a03 	vldr	s12, [r7, #12]
 8006848:	eddf 5a55 	vldr	s11, [pc, #340]	; 80069a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800684c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006850:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006858:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006860:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006864:	e043      	b.n	80068ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	ee07 3a90 	vmov	s15, r3
 800686c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006870:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80069ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006874:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006878:	4b47      	ldr	r3, [pc, #284]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006880:	ee07 3a90 	vmov	s15, r3
 8006884:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006888:	ed97 6a03 	vldr	s12, [r7, #12]
 800688c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80069a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006890:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006894:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800689c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068a8:	e021      	b.n	80068ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	ee07 3a90 	vmov	s15, r3
 80068b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80069a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80068b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068bc:	4b36      	ldr	r3, [pc, #216]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80068d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80069a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80068d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80068ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80068ee:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	0a5b      	lsrs	r3, r3, #9
 80068f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f8:	ee07 3a90 	vmov	s15, r3
 80068fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006904:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006908:	edd7 6a07 	vldr	s13, [r7, #28]
 800690c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006914:	ee17 2a90 	vmov	r2, s15
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800691c:	4b1e      	ldr	r3, [pc, #120]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	0c1b      	lsrs	r3, r3, #16
 8006922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800692e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006932:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006936:	edd7 6a07 	vldr	s13, [r7, #28]
 800693a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800693e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006942:	ee17 2a90 	vmov	r2, s15
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800694a:	4b13      	ldr	r3, [pc, #76]	; (8006998 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800694c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694e:	0e1b      	lsrs	r3, r3, #24
 8006950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006954:	ee07 3a90 	vmov	s15, r3
 8006958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006960:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006964:	edd7 6a07 	vldr	s13, [r7, #28]
 8006968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006970:	ee17 2a90 	vmov	r2, s15
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006978:	e008      	b.n	800698c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	609a      	str	r2, [r3, #8]
}
 800698c:	bf00      	nop
 800698e:	3724      	adds	r7, #36	; 0x24
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	58024400 	.word	0x58024400
 800699c:	03d09000 	.word	0x03d09000
 80069a0:	46000000 	.word	0x46000000
 80069a4:	4c742400 	.word	0x4c742400
 80069a8:	4a742400 	.word	0x4a742400
 80069ac:	4b742400 	.word	0x4b742400

080069b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069be:	4b53      	ldr	r3, [pc, #332]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 80069c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d101      	bne.n	80069ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e099      	b.n	8006b02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80069ce:	4b4f      	ldr	r3, [pc, #316]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a4e      	ldr	r2, [pc, #312]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 80069d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069da:	f7fb fad7 	bl	8001f8c <HAL_GetTick>
 80069de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069e0:	e008      	b.n	80069f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80069e2:	f7fb fad3 	bl	8001f8c <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d901      	bls.n	80069f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069f0:	2303      	movs	r3, #3
 80069f2:	e086      	b.n	8006b02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069f4:	4b45      	ldr	r3, [pc, #276]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1f0      	bne.n	80069e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006a00:	4b42      	ldr	r3, [pc, #264]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	031b      	lsls	r3, r3, #12
 8006a0e:	493f      	ldr	r1, [pc, #252]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	628b      	str	r3, [r1, #40]	; 0x28
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	3b01      	subs	r3, #1
 8006a24:	025b      	lsls	r3, r3, #9
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68db      	ldr	r3, [r3, #12]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	041b      	lsls	r3, r3, #16
 8006a32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	061b      	lsls	r3, r3, #24
 8006a40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a44:	4931      	ldr	r1, [pc, #196]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a4a:	4b30      	ldr	r3, [pc, #192]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	492d      	ldr	r1, [pc, #180]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a5c:	4b2b      	ldr	r3, [pc, #172]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a60:	f023 0220 	bic.w	r2, r3, #32
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	4928      	ldr	r1, [pc, #160]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a6e:	4b27      	ldr	r3, [pc, #156]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a72:	4a26      	ldr	r2, [pc, #152]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a74:	f023 0310 	bic.w	r3, r3, #16
 8006a78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a7a:	4b24      	ldr	r3, [pc, #144]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a7e:	4b24      	ldr	r3, [pc, #144]	; (8006b10 <RCCEx_PLL2_Config+0x160>)
 8006a80:	4013      	ands	r3, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	69d2      	ldr	r2, [r2, #28]
 8006a86:	00d2      	lsls	r2, r2, #3
 8006a88:	4920      	ldr	r1, [pc, #128]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a8e:	4b1f      	ldr	r3, [pc, #124]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	4a1e      	ldr	r2, [pc, #120]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006a94:	f043 0310 	orr.w	r3, r3, #16
 8006a98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d106      	bne.n	8006aae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006aa0:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006aac:	e00f      	b.n	8006ace <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d106      	bne.n	8006ac2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ab4:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	4a14      	ldr	r2, [pc, #80]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006abe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ac0:	e005      	b.n	8006ace <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ac2:	4b12      	ldr	r3, [pc, #72]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	4a11      	ldr	r2, [pc, #68]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006acc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006ace:	4b0f      	ldr	r3, [pc, #60]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a0e      	ldr	r2, [pc, #56]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ada:	f7fb fa57 	bl	8001f8c <HAL_GetTick>
 8006ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ae0:	e008      	b.n	8006af4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006ae2:	f7fb fa53 	bl	8001f8c <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d901      	bls.n	8006af4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	e006      	b.n	8006b02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <RCCEx_PLL2_Config+0x15c>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0f0      	beq.n	8006ae2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	ffff0007 	.word	0xffff0007

08006b14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b22:	4b53      	ldr	r3, [pc, #332]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b26:	f003 0303 	and.w	r3, r3, #3
 8006b2a:	2b03      	cmp	r3, #3
 8006b2c:	d101      	bne.n	8006b32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e099      	b.n	8006c66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b32:	4b4f      	ldr	r3, [pc, #316]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a4e      	ldr	r2, [pc, #312]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b3e:	f7fb fa25 	bl	8001f8c <HAL_GetTick>
 8006b42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b44:	e008      	b.n	8006b58 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b46:	f7fb fa21 	bl	8001f8c <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d901      	bls.n	8006b58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e086      	b.n	8006c66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b58:	4b45      	ldr	r3, [pc, #276]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1f0      	bne.n	8006b46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b64:	4b42      	ldr	r3, [pc, #264]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	051b      	lsls	r3, r3, #20
 8006b72:	493f      	ldr	r1, [pc, #252]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	628b      	str	r3, [r1, #40]	; 0x28
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	025b      	lsls	r3, r3, #9
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	041b      	lsls	r3, r3, #16
 8006b96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	3b01      	subs	r3, #1
 8006ba2:	061b      	lsls	r3, r3, #24
 8006ba4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ba8:	4931      	ldr	r1, [pc, #196]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006bae:	4b30      	ldr	r3, [pc, #192]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	492d      	ldr	r1, [pc, #180]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006bc0:	4b2b      	ldr	r3, [pc, #172]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	4928      	ldr	r1, [pc, #160]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006bd2:	4b27      	ldr	r3, [pc, #156]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd6:	4a26      	ldr	r2, [pc, #152]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006bde:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006be2:	4b24      	ldr	r3, [pc, #144]	; (8006c74 <RCCEx_PLL3_Config+0x160>)
 8006be4:	4013      	ands	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	69d2      	ldr	r2, [r2, #28]
 8006bea:	00d2      	lsls	r2, r2, #3
 8006bec:	4920      	ldr	r1, [pc, #128]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006bf2:	4b1f      	ldr	r3, [pc, #124]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	4a1e      	ldr	r2, [pc, #120]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d106      	bne.n	8006c12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006c04:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	4a19      	ldr	r2, [pc, #100]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006c0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c10:	e00f      	b.n	8006c32 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d106      	bne.n	8006c26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c18:	4b15      	ldr	r3, [pc, #84]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	4a14      	ldr	r2, [pc, #80]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006c1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006c24:	e005      	b.n	8006c32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c26:	4b12      	ldr	r3, [pc, #72]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2a:	4a11      	ldr	r2, [pc, #68]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c32:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a0e      	ldr	r2, [pc, #56]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c3e:	f7fb f9a5 	bl	8001f8c <HAL_GetTick>
 8006c42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c44:	e008      	b.n	8006c58 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006c46:	f7fb f9a1 	bl	8001f8c <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d901      	bls.n	8006c58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e006      	b.n	8006c66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c58:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <RCCEx_PLL3_Config+0x15c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d0f0      	beq.n	8006c46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	58024400 	.word	0x58024400
 8006c74:	ffff0007 	.word	0xffff0007

08006c78 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e0f1      	b.n	8006e6e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a78      	ldr	r2, [pc, #480]	; (8006e78 <HAL_SPI_Init+0x200>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00f      	beq.n	8006cba <HAL_SPI_Init+0x42>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a77      	ldr	r2, [pc, #476]	; (8006e7c <HAL_SPI_Init+0x204>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00a      	beq.n	8006cba <HAL_SPI_Init+0x42>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a75      	ldr	r2, [pc, #468]	; (8006e80 <HAL_SPI_Init+0x208>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d005      	beq.n	8006cba <HAL_SPI_Init+0x42>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	2b0f      	cmp	r3, #15
 8006cb4:	d901      	bls.n	8006cba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e0d9      	b.n	8006e6e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f8e2 	bl	8006e84 <SPI_GetPacketSize>
 8006cc0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a6c      	ldr	r2, [pc, #432]	; (8006e78 <HAL_SPI_Init+0x200>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00c      	beq.n	8006ce6 <HAL_SPI_Init+0x6e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a6a      	ldr	r2, [pc, #424]	; (8006e7c <HAL_SPI_Init+0x204>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d007      	beq.n	8006ce6 <HAL_SPI_Init+0x6e>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a69      	ldr	r2, [pc, #420]	; (8006e80 <HAL_SPI_Init+0x208>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d002      	beq.n	8006ce6 <HAL_SPI_Init+0x6e>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b08      	cmp	r3, #8
 8006ce4:	d811      	bhi.n	8006d0a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006cea:	4a63      	ldr	r2, [pc, #396]	; (8006e78 <HAL_SPI_Init+0x200>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a61      	ldr	r2, [pc, #388]	; (8006e7c <HAL_SPI_Init+0x204>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d004      	beq.n	8006d04 <HAL_SPI_Init+0x8c>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a60      	ldr	r2, [pc, #384]	; (8006e80 <HAL_SPI_Init+0x208>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d104      	bne.n	8006d0e <HAL_SPI_Init+0x96>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2b10      	cmp	r3, #16
 8006d08:	d901      	bls.n	8006d0e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e0af      	b.n	8006e6e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fa fcdc 	bl	80016e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0201 	bic.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006d4a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d54:	d119      	bne.n	8006d8a <HAL_SPI_Init+0x112>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d5e:	d103      	bne.n	8006d68 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10c      	bne.n	8006d8a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006d74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d78:	d107      	bne.n	8006d8a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d88:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69da      	ldr	r2, [r3, #28]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d92:	431a      	orrs	r2, r3
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9c:	ea42 0103 	orr.w	r1, r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	431a      	orrs	r2, r3
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dea:	ea42 0103 	orr.w	r1, r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d113      	bne.n	8006e2a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e14:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e28:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0201 	bic.w	r2, r2, #1
 8006e38:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40013000 	.word	0x40013000
 8006e7c:	40003800 	.word	0x40003800
 8006e80:	40003c00 	.word	0x40003c00

08006e84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e90:	095b      	lsrs	r3, r3, #5
 8006e92:	3301      	adds	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	3307      	adds	r3, #7
 8006ea2:	08db      	lsrs	r3, r3, #3
 8006ea4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e049      	b.n	8006f60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f841 	bl	8006f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2202      	movs	r2, #2
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4610      	mov	r0, r2
 8006efa:	f000 fb69 	bl	80075d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2201      	movs	r2, #1
 8006f12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2201      	movs	r2, #1
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d001      	beq.n	8006f94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e054      	b.n	800703e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f042 0201 	orr.w	r2, r2, #1
 8006faa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a26      	ldr	r2, [pc, #152]	; (800704c <HAL_TIM_Base_Start_IT+0xd0>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d022      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbe:	d01d      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a22      	ldr	r2, [pc, #136]	; (8007050 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d018      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a21      	ldr	r2, [pc, #132]	; (8007054 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d013      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a1f      	ldr	r2, [pc, #124]	; (8007058 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00e      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a1e      	ldr	r2, [pc, #120]	; (800705c <HAL_TIM_Base_Start_IT+0xe0>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d009      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <HAL_TIM_Base_Start_IT+0xe4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d004      	beq.n	8006ffc <HAL_TIM_Base_Start_IT+0x80>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a1b      	ldr	r2, [pc, #108]	; (8007064 <HAL_TIM_Base_Start_IT+0xe8>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d115      	bne.n	8007028 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	4b19      	ldr	r3, [pc, #100]	; (8007068 <HAL_TIM_Base_Start_IT+0xec>)
 8007004:	4013      	ands	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2b06      	cmp	r3, #6
 800700c:	d015      	beq.n	800703a <HAL_TIM_Base_Start_IT+0xbe>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007014:	d011      	beq.n	800703a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0201 	orr.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007026:	e008      	b.n	800703a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	e000      	b.n	800703c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40010000 	.word	0x40010000
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
 800705c:	40010400 	.word	0x40010400
 8007060:	40001800 	.word	0x40001800
 8007064:	40014000 	.word	0x40014000
 8007068:	00010007 	.word	0x00010007

0800706c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d101      	bne.n	800707e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e049      	b.n	8007112 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7fa fb88 	bl	80017a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	3304      	adds	r3, #4
 80070a8:	4619      	mov	r1, r3
 80070aa:	4610      	mov	r0, r2
 80070ac:	f000 fa90 	bl	80075d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b02      	cmp	r3, #2
 800712e:	d122      	bne.n	8007176 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0302 	and.w	r3, r3, #2
 800713a:	2b02      	cmp	r3, #2
 800713c:	d11b      	bne.n	8007176 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f06f 0202 	mvn.w	r2, #2
 8007146:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	f003 0303 	and.w	r3, r3, #3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fa19 	bl	8007594 <HAL_TIM_IC_CaptureCallback>
 8007162:	e005      	b.n	8007170 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fa0b 	bl	8007580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa1c 	bl	80075a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b04      	cmp	r3, #4
 8007182:	d122      	bne.n	80071ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b04      	cmp	r3, #4
 8007190:	d11b      	bne.n	80071ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f06f 0204 	mvn.w	r2, #4
 800719a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d003      	beq.n	80071b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f9ef 	bl	8007594 <HAL_TIM_IC_CaptureCallback>
 80071b6:	e005      	b.n	80071c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f9e1 	bl	8007580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f9f2 	bl	80075a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d122      	bne.n	800721e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d11b      	bne.n	800721e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f06f 0208 	mvn.w	r2, #8
 80071ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2204      	movs	r2, #4
 80071f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f9c5 	bl	8007594 <HAL_TIM_IC_CaptureCallback>
 800720a:	e005      	b.n	8007218 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f9b7 	bl	8007580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f9c8 	bl	80075a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b10      	cmp	r3, #16
 800722a:	d122      	bne.n	8007272 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b10      	cmp	r3, #16
 8007238:	d11b      	bne.n	8007272 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f06f 0210 	mvn.w	r2, #16
 8007242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2208      	movs	r2, #8
 8007248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f99b 	bl	8007594 <HAL_TIM_IC_CaptureCallback>
 800725e:	e005      	b.n	800726c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f98d 	bl	8007580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 f99e 	bl	80075a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	d10e      	bne.n	800729e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f003 0301 	and.w	r3, r3, #1
 800728a:	2b01      	cmp	r3, #1
 800728c:	d107      	bne.n	800729e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f06f 0201 	mvn.w	r2, #1
 8007296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7fa f86d 	bl	8001378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a8:	2b80      	cmp	r3, #128	; 0x80
 80072aa:	d10e      	bne.n	80072ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b6:	2b80      	cmp	r3, #128	; 0x80
 80072b8:	d107      	bne.n	80072ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fd8b 	bl	8007de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d8:	d10e      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e4:	2b80      	cmp	r3, #128	; 0x80
 80072e6:	d107      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80072f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fd7e 	bl	8007df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b40      	cmp	r3, #64	; 0x40
 8007304:	d10e      	bne.n	8007324 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007310:	2b40      	cmp	r3, #64	; 0x40
 8007312:	d107      	bne.n	8007324 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800731c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f94c 	bl	80075bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0320 	and.w	r3, r3, #32
 800732e:	2b20      	cmp	r3, #32
 8007330:	d10e      	bne.n	8007350 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0320 	and.w	r3, r3, #32
 800733c:	2b20      	cmp	r3, #32
 800733e:	d107      	bne.n	8007350 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0220 	mvn.w	r2, #32
 8007348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fd3e 	bl	8007dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007372:	2302      	movs	r3, #2
 8007374:	e0ff      	b.n	8007576 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b14      	cmp	r3, #20
 8007382:	f200 80f0 	bhi.w	8007566 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007386:	a201      	add	r2, pc, #4	; (adr r2, 800738c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738c:	080073e1 	.word	0x080073e1
 8007390:	08007567 	.word	0x08007567
 8007394:	08007567 	.word	0x08007567
 8007398:	08007567 	.word	0x08007567
 800739c:	08007421 	.word	0x08007421
 80073a0:	08007567 	.word	0x08007567
 80073a4:	08007567 	.word	0x08007567
 80073a8:	08007567 	.word	0x08007567
 80073ac:	08007463 	.word	0x08007463
 80073b0:	08007567 	.word	0x08007567
 80073b4:	08007567 	.word	0x08007567
 80073b8:	08007567 	.word	0x08007567
 80073bc:	080074a3 	.word	0x080074a3
 80073c0:	08007567 	.word	0x08007567
 80073c4:	08007567 	.word	0x08007567
 80073c8:	08007567 	.word	0x08007567
 80073cc:	080074e5 	.word	0x080074e5
 80073d0:	08007567 	.word	0x08007567
 80073d4:	08007567 	.word	0x08007567
 80073d8:	08007567 	.word	0x08007567
 80073dc:	08007525 	.word	0x08007525
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f000 f98c 	bl	8007704 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699a      	ldr	r2, [r3, #24]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0208 	orr.w	r2, r2, #8
 80073fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0204 	bic.w	r2, r2, #4
 800740a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6999      	ldr	r1, [r3, #24]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	430a      	orrs	r2, r1
 800741c:	619a      	str	r2, [r3, #24]
      break;
 800741e:	e0a5      	b.n	800756c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68b9      	ldr	r1, [r7, #8]
 8007426:	4618      	mov	r0, r3
 8007428:	f000 f9fc 	bl	8007824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800743a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	699a      	ldr	r2, [r3, #24]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800744a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6999      	ldr	r1, [r3, #24]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	021a      	lsls	r2, r3, #8
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	619a      	str	r2, [r3, #24]
      break;
 8007460:	e084      	b.n	800756c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fa65 	bl	8007938 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69da      	ldr	r2, [r3, #28]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f042 0208 	orr.w	r2, r2, #8
 800747c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	69da      	ldr	r2, [r3, #28]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0204 	bic.w	r2, r2, #4
 800748c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	69d9      	ldr	r1, [r3, #28]
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	691a      	ldr	r2, [r3, #16]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	430a      	orrs	r2, r1
 800749e:	61da      	str	r2, [r3, #28]
      break;
 80074a0:	e064      	b.n	800756c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68b9      	ldr	r1, [r7, #8]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 facd 	bl	8007a48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69da      	ldr	r2, [r3, #28]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69d9      	ldr	r1, [r3, #28]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	021a      	lsls	r2, r3, #8
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	61da      	str	r2, [r3, #28]
      break;
 80074e2:	e043      	b.n	800756c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68b9      	ldr	r1, [r7, #8]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fb16 	bl	8007b1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0208 	orr.w	r2, r2, #8
 80074fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0204 	bic.w	r2, r2, #4
 800750e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	691a      	ldr	r2, [r3, #16]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007522:	e023      	b.n	800756c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68b9      	ldr	r1, [r7, #8]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fb5a 	bl	8007be4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800753e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800754e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	021a      	lsls	r2, r3, #8
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007564:	e002      	b.n	800756c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	75fb      	strb	r3, [r7, #23]
      break;
 800756a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007574:	7dfb      	ldrb	r3, [r7, #23]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop

08007580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007588:	bf00      	nop
 800758a:	370c      	adds	r7, #12
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007594:	b480      	push	{r7}
 8007596:	b083      	sub	sp, #12
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a40      	ldr	r2, [pc, #256]	; (80076e4 <TIM_Base_SetConfig+0x114>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d013      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ee:	d00f      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a3d      	ldr	r2, [pc, #244]	; (80076e8 <TIM_Base_SetConfig+0x118>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d00b      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a3c      	ldr	r2, [pc, #240]	; (80076ec <TIM_Base_SetConfig+0x11c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d007      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a3b      	ldr	r2, [pc, #236]	; (80076f0 <TIM_Base_SetConfig+0x120>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d003      	beq.n	8007610 <TIM_Base_SetConfig+0x40>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a3a      	ldr	r2, [pc, #232]	; (80076f4 <TIM_Base_SetConfig+0x124>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d108      	bne.n	8007622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	4313      	orrs	r3, r2
 8007620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a2f      	ldr	r2, [pc, #188]	; (80076e4 <TIM_Base_SetConfig+0x114>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d01f      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d01b      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a2c      	ldr	r2, [pc, #176]	; (80076e8 <TIM_Base_SetConfig+0x118>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d017      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a2b      	ldr	r2, [pc, #172]	; (80076ec <TIM_Base_SetConfig+0x11c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d013      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a2a      	ldr	r2, [pc, #168]	; (80076f0 <TIM_Base_SetConfig+0x120>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d00f      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a29      	ldr	r2, [pc, #164]	; (80076f4 <TIM_Base_SetConfig+0x124>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d00b      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a28      	ldr	r2, [pc, #160]	; (80076f8 <TIM_Base_SetConfig+0x128>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d007      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a27      	ldr	r2, [pc, #156]	; (80076fc <TIM_Base_SetConfig+0x12c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d003      	beq.n	800766a <TIM_Base_SetConfig+0x9a>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a26      	ldr	r2, [pc, #152]	; (8007700 <TIM_Base_SetConfig+0x130>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d108      	bne.n	800767c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a10      	ldr	r2, [pc, #64]	; (80076e4 <TIM_Base_SetConfig+0x114>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d00f      	beq.n	80076c8 <TIM_Base_SetConfig+0xf8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a12      	ldr	r2, [pc, #72]	; (80076f4 <TIM_Base_SetConfig+0x124>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00b      	beq.n	80076c8 <TIM_Base_SetConfig+0xf8>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a11      	ldr	r2, [pc, #68]	; (80076f8 <TIM_Base_SetConfig+0x128>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d007      	beq.n	80076c8 <TIM_Base_SetConfig+0xf8>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a10      	ldr	r2, [pc, #64]	; (80076fc <TIM_Base_SetConfig+0x12c>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d003      	beq.n	80076c8 <TIM_Base_SetConfig+0xf8>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a0f      	ldr	r2, [pc, #60]	; (8007700 <TIM_Base_SetConfig+0x130>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d103      	bne.n	80076d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	615a      	str	r2, [r3, #20]
}
 80076d6:	bf00      	nop
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40010000 	.word	0x40010000
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40000c00 	.word	0x40000c00
 80076f4:	40010400 	.word	0x40010400
 80076f8:	40014000 	.word	0x40014000
 80076fc:	40014400 	.word	0x40014400
 8007700:	40014800 	.word	0x40014800

08007704 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a1b      	ldr	r3, [r3, #32]
 8007712:	f023 0201 	bic.w	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	4b37      	ldr	r3, [pc, #220]	; (800780c <TIM_OC1_SetConfig+0x108>)
 8007730:	4013      	ands	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0303 	bic.w	r3, r3, #3
 800773a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	4313      	orrs	r3, r2
 8007744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f023 0302 	bic.w	r3, r3, #2
 800774c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	4313      	orrs	r3, r2
 8007756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a2d      	ldr	r2, [pc, #180]	; (8007810 <TIM_OC1_SetConfig+0x10c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00f      	beq.n	8007780 <TIM_OC1_SetConfig+0x7c>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	4a2c      	ldr	r2, [pc, #176]	; (8007814 <TIM_OC1_SetConfig+0x110>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d00b      	beq.n	8007780 <TIM_OC1_SetConfig+0x7c>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a2b      	ldr	r2, [pc, #172]	; (8007818 <TIM_OC1_SetConfig+0x114>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d007      	beq.n	8007780 <TIM_OC1_SetConfig+0x7c>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a2a      	ldr	r2, [pc, #168]	; (800781c <TIM_OC1_SetConfig+0x118>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d003      	beq.n	8007780 <TIM_OC1_SetConfig+0x7c>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a29      	ldr	r2, [pc, #164]	; (8007820 <TIM_OC1_SetConfig+0x11c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d10c      	bne.n	800779a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f023 0308 	bic.w	r3, r3, #8
 8007786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f023 0304 	bic.w	r3, r3, #4
 8007798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a1c      	ldr	r2, [pc, #112]	; (8007810 <TIM_OC1_SetConfig+0x10c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d00f      	beq.n	80077c2 <TIM_OC1_SetConfig+0xbe>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a1b      	ldr	r2, [pc, #108]	; (8007814 <TIM_OC1_SetConfig+0x110>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00b      	beq.n	80077c2 <TIM_OC1_SetConfig+0xbe>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a1a      	ldr	r2, [pc, #104]	; (8007818 <TIM_OC1_SetConfig+0x114>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d007      	beq.n	80077c2 <TIM_OC1_SetConfig+0xbe>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a19      	ldr	r2, [pc, #100]	; (800781c <TIM_OC1_SetConfig+0x118>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d003      	beq.n	80077c2 <TIM_OC1_SetConfig+0xbe>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a18      	ldr	r2, [pc, #96]	; (8007820 <TIM_OC1_SetConfig+0x11c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d111      	bne.n	80077e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4313      	orrs	r3, r2
 80077da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	621a      	str	r2, [r3, #32]
}
 8007800:	bf00      	nop
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	fffeff8f 	.word	0xfffeff8f
 8007810:	40010000 	.word	0x40010000
 8007814:	40010400 	.word	0x40010400
 8007818:	40014000 	.word	0x40014000
 800781c:	40014400 	.word	0x40014400
 8007820:	40014800 	.word	0x40014800

08007824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	f023 0210 	bic.w	r2, r3, #16
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	4b34      	ldr	r3, [pc, #208]	; (8007920 <TIM_OC2_SetConfig+0xfc>)
 8007850:	4013      	ands	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	f023 0320 	bic.w	r3, r3, #32
 800786e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	011b      	lsls	r3, r3, #4
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	4313      	orrs	r3, r2
 800787a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a29      	ldr	r2, [pc, #164]	; (8007924 <TIM_OC2_SetConfig+0x100>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d003      	beq.n	800788c <TIM_OC2_SetConfig+0x68>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a28      	ldr	r2, [pc, #160]	; (8007928 <TIM_OC2_SetConfig+0x104>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d10d      	bne.n	80078a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	011b      	lsls	r3, r3, #4
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	4313      	orrs	r3, r2
 800789e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a1e      	ldr	r2, [pc, #120]	; (8007924 <TIM_OC2_SetConfig+0x100>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d00f      	beq.n	80078d0 <TIM_OC2_SetConfig+0xac>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a1d      	ldr	r2, [pc, #116]	; (8007928 <TIM_OC2_SetConfig+0x104>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00b      	beq.n	80078d0 <TIM_OC2_SetConfig+0xac>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a1c      	ldr	r2, [pc, #112]	; (800792c <TIM_OC2_SetConfig+0x108>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d007      	beq.n	80078d0 <TIM_OC2_SetConfig+0xac>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a1b      	ldr	r2, [pc, #108]	; (8007930 <TIM_OC2_SetConfig+0x10c>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d003      	beq.n	80078d0 <TIM_OC2_SetConfig+0xac>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a1a      	ldr	r2, [pc, #104]	; (8007934 <TIM_OC2_SetConfig+0x110>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d113      	bne.n	80078f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	685a      	ldr	r2, [r3, #4]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	621a      	str	r2, [r3, #32]
}
 8007912:	bf00      	nop
 8007914:	371c      	adds	r7, #28
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	feff8fff 	.word	0xfeff8fff
 8007924:	40010000 	.word	0x40010000
 8007928:	40010400 	.word	0x40010400
 800792c:	40014000 	.word	0x40014000
 8007930:	40014400 	.word	0x40014400
 8007934:	40014800 	.word	0x40014800

08007938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a1b      	ldr	r3, [r3, #32]
 8007946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4b33      	ldr	r3, [pc, #204]	; (8007a30 <TIM_OC3_SetConfig+0xf8>)
 8007964:	4013      	ands	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 0303 	bic.w	r3, r3, #3
 800796e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	021b      	lsls	r3, r3, #8
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	4313      	orrs	r3, r2
 800798c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a28      	ldr	r2, [pc, #160]	; (8007a34 <TIM_OC3_SetConfig+0xfc>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d003      	beq.n	800799e <TIM_OC3_SetConfig+0x66>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a27      	ldr	r2, [pc, #156]	; (8007a38 <TIM_OC3_SetConfig+0x100>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d10d      	bne.n	80079ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	021b      	lsls	r3, r3, #8
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <TIM_OC3_SetConfig+0xfc>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00f      	beq.n	80079e2 <TIM_OC3_SetConfig+0xaa>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <TIM_OC3_SetConfig+0x100>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d00b      	beq.n	80079e2 <TIM_OC3_SetConfig+0xaa>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a1b      	ldr	r2, [pc, #108]	; (8007a3c <TIM_OC3_SetConfig+0x104>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d007      	beq.n	80079e2 <TIM_OC3_SetConfig+0xaa>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1a      	ldr	r2, [pc, #104]	; (8007a40 <TIM_OC3_SetConfig+0x108>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d003      	beq.n	80079e2 <TIM_OC3_SetConfig+0xaa>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a19      	ldr	r2, [pc, #100]	; (8007a44 <TIM_OC3_SetConfig+0x10c>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d113      	bne.n	8007a0a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	011b      	lsls	r3, r3, #4
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	697a      	ldr	r2, [r7, #20]
 8007a22:	621a      	str	r2, [r3, #32]
}
 8007a24:	bf00      	nop
 8007a26:	371c      	adds	r7, #28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr
 8007a30:	fffeff8f 	.word	0xfffeff8f
 8007a34:	40010000 	.word	0x40010000
 8007a38:	40010400 	.word	0x40010400
 8007a3c:	40014000 	.word	0x40014000
 8007a40:	40014400 	.word	0x40014400
 8007a44:	40014800 	.word	0x40014800

08007a48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b087      	sub	sp, #28
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4b24      	ldr	r3, [pc, #144]	; (8007b04 <TIM_OC4_SetConfig+0xbc>)
 8007a74:	4013      	ands	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	021b      	lsls	r3, r3, #8
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	031b      	lsls	r3, r3, #12
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a19      	ldr	r2, [pc, #100]	; (8007b08 <TIM_OC4_SetConfig+0xc0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d00f      	beq.n	8007ac8 <TIM_OC4_SetConfig+0x80>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a18      	ldr	r2, [pc, #96]	; (8007b0c <TIM_OC4_SetConfig+0xc4>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00b      	beq.n	8007ac8 <TIM_OC4_SetConfig+0x80>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a17      	ldr	r2, [pc, #92]	; (8007b10 <TIM_OC4_SetConfig+0xc8>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d007      	beq.n	8007ac8 <TIM_OC4_SetConfig+0x80>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a16      	ldr	r2, [pc, #88]	; (8007b14 <TIM_OC4_SetConfig+0xcc>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d003      	beq.n	8007ac8 <TIM_OC4_SetConfig+0x80>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <TIM_OC4_SetConfig+0xd0>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d109      	bne.n	8007adc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ace:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	695b      	ldr	r3, [r3, #20]
 8007ad4:	019b      	lsls	r3, r3, #6
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	697a      	ldr	r2, [r7, #20]
 8007ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	621a      	str	r2, [r3, #32]
}
 8007af6:	bf00      	nop
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	feff8fff 	.word	0xfeff8fff
 8007b08:	40010000 	.word	0x40010000
 8007b0c:	40010400 	.word	0x40010400
 8007b10:	40014000 	.word	0x40014000
 8007b14:	40014400 	.word	0x40014400
 8007b18:	40014800 	.word	0x40014800

08007b1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a1b      	ldr	r3, [r3, #32]
 8007b36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4b21      	ldr	r3, [pc, #132]	; (8007bcc <TIM_OC5_SetConfig+0xb0>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b5c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	041b      	lsls	r3, r3, #16
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a18      	ldr	r2, [pc, #96]	; (8007bd0 <TIM_OC5_SetConfig+0xb4>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d00f      	beq.n	8007b92 <TIM_OC5_SetConfig+0x76>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a17      	ldr	r2, [pc, #92]	; (8007bd4 <TIM_OC5_SetConfig+0xb8>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d00b      	beq.n	8007b92 <TIM_OC5_SetConfig+0x76>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a16      	ldr	r2, [pc, #88]	; (8007bd8 <TIM_OC5_SetConfig+0xbc>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d007      	beq.n	8007b92 <TIM_OC5_SetConfig+0x76>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a15      	ldr	r2, [pc, #84]	; (8007bdc <TIM_OC5_SetConfig+0xc0>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d003      	beq.n	8007b92 <TIM_OC5_SetConfig+0x76>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a14      	ldr	r2, [pc, #80]	; (8007be0 <TIM_OC5_SetConfig+0xc4>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d109      	bne.n	8007ba6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b98:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	693a      	ldr	r2, [r7, #16]
 8007bbe:	621a      	str	r2, [r3, #32]
}
 8007bc0:	bf00      	nop
 8007bc2:	371c      	adds	r7, #28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	fffeff8f 	.word	0xfffeff8f
 8007bd0:	40010000 	.word	0x40010000
 8007bd4:	40010400 	.word	0x40010400
 8007bd8:	40014000 	.word	0x40014000
 8007bdc:	40014400 	.word	0x40014400
 8007be0:	40014800 	.word	0x40014800

08007be4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a1b      	ldr	r3, [r3, #32]
 8007bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	4b22      	ldr	r3, [pc, #136]	; (8007c98 <TIM_OC6_SetConfig+0xb4>)
 8007c10:	4013      	ands	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	021b      	lsls	r3, r3, #8
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	051b      	lsls	r3, r3, #20
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a19      	ldr	r2, [pc, #100]	; (8007c9c <TIM_OC6_SetConfig+0xb8>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d00f      	beq.n	8007c5c <TIM_OC6_SetConfig+0x78>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a18      	ldr	r2, [pc, #96]	; (8007ca0 <TIM_OC6_SetConfig+0xbc>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00b      	beq.n	8007c5c <TIM_OC6_SetConfig+0x78>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a17      	ldr	r2, [pc, #92]	; (8007ca4 <TIM_OC6_SetConfig+0xc0>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d007      	beq.n	8007c5c <TIM_OC6_SetConfig+0x78>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a16      	ldr	r2, [pc, #88]	; (8007ca8 <TIM_OC6_SetConfig+0xc4>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d003      	beq.n	8007c5c <TIM_OC6_SetConfig+0x78>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a15      	ldr	r2, [pc, #84]	; (8007cac <TIM_OC6_SetConfig+0xc8>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d109      	bne.n	8007c70 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	695b      	ldr	r3, [r3, #20]
 8007c68:	029b      	lsls	r3, r3, #10
 8007c6a:	697a      	ldr	r2, [r7, #20]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	621a      	str	r2, [r3, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	feff8fff 	.word	0xfeff8fff
 8007c9c:	40010000 	.word	0x40010000
 8007ca0:	40010400 	.word	0x40010400
 8007ca4:	40014000 	.word	0x40014000
 8007ca8:	40014400 	.word	0x40014400
 8007cac:	40014800 	.word	0x40014800

08007cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d101      	bne.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e06d      	b.n	8007da4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2202      	movs	r2, #2
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a30      	ldr	r2, [pc, #192]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a2f      	ldr	r2, [pc, #188]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d108      	bne.n	8007d0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a20      	ldr	r2, [pc, #128]	; (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d022      	beq.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d3a:	d01d      	beq.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a1d      	ldr	r2, [pc, #116]	; (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d018      	beq.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1c      	ldr	r2, [pc, #112]	; (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d013      	beq.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a1a      	ldr	r2, [pc, #104]	; (8007dc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00e      	beq.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a15      	ldr	r2, [pc, #84]	; (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d009      	beq.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a16      	ldr	r2, [pc, #88]	; (8007dc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d004      	beq.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d10c      	bne.n	8007d92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3714      	adds	r7, #20
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr
 8007db0:	40010000 	.word	0x40010000
 8007db4:	40010400 	.word	0x40010400
 8007db8:	40000400 	.word	0x40000400
 8007dbc:	40000800 	.word	0x40000800
 8007dc0:	40000c00 	.word	0x40000c00
 8007dc4:	40001800 	.word	0x40001800
 8007dc8:	40014000 	.word	0x40014000

08007dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e042      	b.n	8007ea0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d106      	bne.n	8007e32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7f9 fd99 	bl	8001964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2224      	movs	r2, #36	; 0x24
 8007e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 0201 	bic.w	r2, r2, #1
 8007e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f82c 	bl	8007ea8 <UART_SetConfig>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e022      	b.n	8007ea0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fd88 	bl	8008978 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0201 	orr.w	r2, r2, #1
 8007e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fe0f 	bl	8008abc <UART_CheckIdleState>
 8007e9e:	4603      	mov	r3, r0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eac:	b092      	sub	sp, #72	; 0x48
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	69db      	ldr	r3, [r3, #28]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	4bbe      	ldr	r3, [pc, #760]	; (80081d0 <UART_SetConfig+0x328>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	6812      	ldr	r2, [r2, #0]
 8007ede:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ee0:	430b      	orrs	r3, r1
 8007ee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	430a      	orrs	r2, r1
 8007ef8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4ab3      	ldr	r2, [pc, #716]	; (80081d4 <UART_SetConfig+0x32c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d004      	beq.n	8007f14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f10:	4313      	orrs	r3, r2
 8007f12:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	4baf      	ldr	r3, [pc, #700]	; (80081d8 <UART_SetConfig+0x330>)
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	6812      	ldr	r2, [r2, #0]
 8007f22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f24:	430b      	orrs	r3, r1
 8007f26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2e:	f023 010f 	bic.w	r1, r3, #15
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4aa6      	ldr	r2, [pc, #664]	; (80081dc <UART_SetConfig+0x334>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d177      	bne.n	8008038 <UART_SetConfig+0x190>
 8007f48:	4ba5      	ldr	r3, [pc, #660]	; (80081e0 <UART_SetConfig+0x338>)
 8007f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f50:	2b28      	cmp	r3, #40	; 0x28
 8007f52:	d86d      	bhi.n	8008030 <UART_SetConfig+0x188>
 8007f54:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <UART_SetConfig+0xb4>)
 8007f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5a:	bf00      	nop
 8007f5c:	08008001 	.word	0x08008001
 8007f60:	08008031 	.word	0x08008031
 8007f64:	08008031 	.word	0x08008031
 8007f68:	08008031 	.word	0x08008031
 8007f6c:	08008031 	.word	0x08008031
 8007f70:	08008031 	.word	0x08008031
 8007f74:	08008031 	.word	0x08008031
 8007f78:	08008031 	.word	0x08008031
 8007f7c:	08008009 	.word	0x08008009
 8007f80:	08008031 	.word	0x08008031
 8007f84:	08008031 	.word	0x08008031
 8007f88:	08008031 	.word	0x08008031
 8007f8c:	08008031 	.word	0x08008031
 8007f90:	08008031 	.word	0x08008031
 8007f94:	08008031 	.word	0x08008031
 8007f98:	08008031 	.word	0x08008031
 8007f9c:	08008011 	.word	0x08008011
 8007fa0:	08008031 	.word	0x08008031
 8007fa4:	08008031 	.word	0x08008031
 8007fa8:	08008031 	.word	0x08008031
 8007fac:	08008031 	.word	0x08008031
 8007fb0:	08008031 	.word	0x08008031
 8007fb4:	08008031 	.word	0x08008031
 8007fb8:	08008031 	.word	0x08008031
 8007fbc:	08008019 	.word	0x08008019
 8007fc0:	08008031 	.word	0x08008031
 8007fc4:	08008031 	.word	0x08008031
 8007fc8:	08008031 	.word	0x08008031
 8007fcc:	08008031 	.word	0x08008031
 8007fd0:	08008031 	.word	0x08008031
 8007fd4:	08008031 	.word	0x08008031
 8007fd8:	08008031 	.word	0x08008031
 8007fdc:	08008021 	.word	0x08008021
 8007fe0:	08008031 	.word	0x08008031
 8007fe4:	08008031 	.word	0x08008031
 8007fe8:	08008031 	.word	0x08008031
 8007fec:	08008031 	.word	0x08008031
 8007ff0:	08008031 	.word	0x08008031
 8007ff4:	08008031 	.word	0x08008031
 8007ff8:	08008031 	.word	0x08008031
 8007ffc:	08008029 	.word	0x08008029
 8008000:	2301      	movs	r3, #1
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008006:	e222      	b.n	800844e <UART_SetConfig+0x5a6>
 8008008:	2304      	movs	r3, #4
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800e:	e21e      	b.n	800844e <UART_SetConfig+0x5a6>
 8008010:	2308      	movs	r3, #8
 8008012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008016:	e21a      	b.n	800844e <UART_SetConfig+0x5a6>
 8008018:	2310      	movs	r3, #16
 800801a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801e:	e216      	b.n	800844e <UART_SetConfig+0x5a6>
 8008020:	2320      	movs	r3, #32
 8008022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008026:	e212      	b.n	800844e <UART_SetConfig+0x5a6>
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802e:	e20e      	b.n	800844e <UART_SetConfig+0x5a6>
 8008030:	2380      	movs	r3, #128	; 0x80
 8008032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008036:	e20a      	b.n	800844e <UART_SetConfig+0x5a6>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a69      	ldr	r2, [pc, #420]	; (80081e4 <UART_SetConfig+0x33c>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d130      	bne.n	80080a4 <UART_SetConfig+0x1fc>
 8008042:	4b67      	ldr	r3, [pc, #412]	; (80081e0 <UART_SetConfig+0x338>)
 8008044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008046:	f003 0307 	and.w	r3, r3, #7
 800804a:	2b05      	cmp	r3, #5
 800804c:	d826      	bhi.n	800809c <UART_SetConfig+0x1f4>
 800804e:	a201      	add	r2, pc, #4	; (adr r2, 8008054 <UART_SetConfig+0x1ac>)
 8008050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008054:	0800806d 	.word	0x0800806d
 8008058:	08008075 	.word	0x08008075
 800805c:	0800807d 	.word	0x0800807d
 8008060:	08008085 	.word	0x08008085
 8008064:	0800808d 	.word	0x0800808d
 8008068:	08008095 	.word	0x08008095
 800806c:	2300      	movs	r3, #0
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008072:	e1ec      	b.n	800844e <UART_SetConfig+0x5a6>
 8008074:	2304      	movs	r3, #4
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807a:	e1e8      	b.n	800844e <UART_SetConfig+0x5a6>
 800807c:	2308      	movs	r3, #8
 800807e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008082:	e1e4      	b.n	800844e <UART_SetConfig+0x5a6>
 8008084:	2310      	movs	r3, #16
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808a:	e1e0      	b.n	800844e <UART_SetConfig+0x5a6>
 800808c:	2320      	movs	r3, #32
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008092:	e1dc      	b.n	800844e <UART_SetConfig+0x5a6>
 8008094:	2340      	movs	r3, #64	; 0x40
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809a:	e1d8      	b.n	800844e <UART_SetConfig+0x5a6>
 800809c:	2380      	movs	r3, #128	; 0x80
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a2:	e1d4      	b.n	800844e <UART_SetConfig+0x5a6>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a4f      	ldr	r2, [pc, #316]	; (80081e8 <UART_SetConfig+0x340>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d130      	bne.n	8008110 <UART_SetConfig+0x268>
 80080ae:	4b4c      	ldr	r3, [pc, #304]	; (80081e0 <UART_SetConfig+0x338>)
 80080b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	2b05      	cmp	r3, #5
 80080b8:	d826      	bhi.n	8008108 <UART_SetConfig+0x260>
 80080ba:	a201      	add	r2, pc, #4	; (adr r2, 80080c0 <UART_SetConfig+0x218>)
 80080bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c0:	080080d9 	.word	0x080080d9
 80080c4:	080080e1 	.word	0x080080e1
 80080c8:	080080e9 	.word	0x080080e9
 80080cc:	080080f1 	.word	0x080080f1
 80080d0:	080080f9 	.word	0x080080f9
 80080d4:	08008101 	.word	0x08008101
 80080d8:	2300      	movs	r3, #0
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080de:	e1b6      	b.n	800844e <UART_SetConfig+0x5a6>
 80080e0:	2304      	movs	r3, #4
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e6:	e1b2      	b.n	800844e <UART_SetConfig+0x5a6>
 80080e8:	2308      	movs	r3, #8
 80080ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ee:	e1ae      	b.n	800844e <UART_SetConfig+0x5a6>
 80080f0:	2310      	movs	r3, #16
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f6:	e1aa      	b.n	800844e <UART_SetConfig+0x5a6>
 80080f8:	2320      	movs	r3, #32
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fe:	e1a6      	b.n	800844e <UART_SetConfig+0x5a6>
 8008100:	2340      	movs	r3, #64	; 0x40
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008106:	e1a2      	b.n	800844e <UART_SetConfig+0x5a6>
 8008108:	2380      	movs	r3, #128	; 0x80
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800810e:	e19e      	b.n	800844e <UART_SetConfig+0x5a6>
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a35      	ldr	r2, [pc, #212]	; (80081ec <UART_SetConfig+0x344>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d130      	bne.n	800817c <UART_SetConfig+0x2d4>
 800811a:	4b31      	ldr	r3, [pc, #196]	; (80081e0 <UART_SetConfig+0x338>)
 800811c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	2b05      	cmp	r3, #5
 8008124:	d826      	bhi.n	8008174 <UART_SetConfig+0x2cc>
 8008126:	a201      	add	r2, pc, #4	; (adr r2, 800812c <UART_SetConfig+0x284>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008145 	.word	0x08008145
 8008130:	0800814d 	.word	0x0800814d
 8008134:	08008155 	.word	0x08008155
 8008138:	0800815d 	.word	0x0800815d
 800813c:	08008165 	.word	0x08008165
 8008140:	0800816d 	.word	0x0800816d
 8008144:	2300      	movs	r3, #0
 8008146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814a:	e180      	b.n	800844e <UART_SetConfig+0x5a6>
 800814c:	2304      	movs	r3, #4
 800814e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008152:	e17c      	b.n	800844e <UART_SetConfig+0x5a6>
 8008154:	2308      	movs	r3, #8
 8008156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815a:	e178      	b.n	800844e <UART_SetConfig+0x5a6>
 800815c:	2310      	movs	r3, #16
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008162:	e174      	b.n	800844e <UART_SetConfig+0x5a6>
 8008164:	2320      	movs	r3, #32
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800816a:	e170      	b.n	800844e <UART_SetConfig+0x5a6>
 800816c:	2340      	movs	r3, #64	; 0x40
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008172:	e16c      	b.n	800844e <UART_SetConfig+0x5a6>
 8008174:	2380      	movs	r3, #128	; 0x80
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800817a:	e168      	b.n	800844e <UART_SetConfig+0x5a6>
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a1b      	ldr	r2, [pc, #108]	; (80081f0 <UART_SetConfig+0x348>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d142      	bne.n	800820c <UART_SetConfig+0x364>
 8008186:	4b16      	ldr	r3, [pc, #88]	; (80081e0 <UART_SetConfig+0x338>)
 8008188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	2b05      	cmp	r3, #5
 8008190:	d838      	bhi.n	8008204 <UART_SetConfig+0x35c>
 8008192:	a201      	add	r2, pc, #4	; (adr r2, 8008198 <UART_SetConfig+0x2f0>)
 8008194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008198:	080081b1 	.word	0x080081b1
 800819c:	080081b9 	.word	0x080081b9
 80081a0:	080081c1 	.word	0x080081c1
 80081a4:	080081c9 	.word	0x080081c9
 80081a8:	080081f5 	.word	0x080081f5
 80081ac:	080081fd 	.word	0x080081fd
 80081b0:	2300      	movs	r3, #0
 80081b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b6:	e14a      	b.n	800844e <UART_SetConfig+0x5a6>
 80081b8:	2304      	movs	r3, #4
 80081ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081be:	e146      	b.n	800844e <UART_SetConfig+0x5a6>
 80081c0:	2308      	movs	r3, #8
 80081c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c6:	e142      	b.n	800844e <UART_SetConfig+0x5a6>
 80081c8:	2310      	movs	r3, #16
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ce:	e13e      	b.n	800844e <UART_SetConfig+0x5a6>
 80081d0:	cfff69f3 	.word	0xcfff69f3
 80081d4:	58000c00 	.word	0x58000c00
 80081d8:	11fff4ff 	.word	0x11fff4ff
 80081dc:	40011000 	.word	0x40011000
 80081e0:	58024400 	.word	0x58024400
 80081e4:	40004400 	.word	0x40004400
 80081e8:	40004800 	.word	0x40004800
 80081ec:	40004c00 	.word	0x40004c00
 80081f0:	40005000 	.word	0x40005000
 80081f4:	2320      	movs	r3, #32
 80081f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fa:	e128      	b.n	800844e <UART_SetConfig+0x5a6>
 80081fc:	2340      	movs	r3, #64	; 0x40
 80081fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008202:	e124      	b.n	800844e <UART_SetConfig+0x5a6>
 8008204:	2380      	movs	r3, #128	; 0x80
 8008206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820a:	e120      	b.n	800844e <UART_SetConfig+0x5a6>
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4acb      	ldr	r2, [pc, #812]	; (8008540 <UART_SetConfig+0x698>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d176      	bne.n	8008304 <UART_SetConfig+0x45c>
 8008216:	4bcb      	ldr	r3, [pc, #812]	; (8008544 <UART_SetConfig+0x69c>)
 8008218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800821a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800821e:	2b28      	cmp	r3, #40	; 0x28
 8008220:	d86c      	bhi.n	80082fc <UART_SetConfig+0x454>
 8008222:	a201      	add	r2, pc, #4	; (adr r2, 8008228 <UART_SetConfig+0x380>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	080082cd 	.word	0x080082cd
 800822c:	080082fd 	.word	0x080082fd
 8008230:	080082fd 	.word	0x080082fd
 8008234:	080082fd 	.word	0x080082fd
 8008238:	080082fd 	.word	0x080082fd
 800823c:	080082fd 	.word	0x080082fd
 8008240:	080082fd 	.word	0x080082fd
 8008244:	080082fd 	.word	0x080082fd
 8008248:	080082d5 	.word	0x080082d5
 800824c:	080082fd 	.word	0x080082fd
 8008250:	080082fd 	.word	0x080082fd
 8008254:	080082fd 	.word	0x080082fd
 8008258:	080082fd 	.word	0x080082fd
 800825c:	080082fd 	.word	0x080082fd
 8008260:	080082fd 	.word	0x080082fd
 8008264:	080082fd 	.word	0x080082fd
 8008268:	080082dd 	.word	0x080082dd
 800826c:	080082fd 	.word	0x080082fd
 8008270:	080082fd 	.word	0x080082fd
 8008274:	080082fd 	.word	0x080082fd
 8008278:	080082fd 	.word	0x080082fd
 800827c:	080082fd 	.word	0x080082fd
 8008280:	080082fd 	.word	0x080082fd
 8008284:	080082fd 	.word	0x080082fd
 8008288:	080082e5 	.word	0x080082e5
 800828c:	080082fd 	.word	0x080082fd
 8008290:	080082fd 	.word	0x080082fd
 8008294:	080082fd 	.word	0x080082fd
 8008298:	080082fd 	.word	0x080082fd
 800829c:	080082fd 	.word	0x080082fd
 80082a0:	080082fd 	.word	0x080082fd
 80082a4:	080082fd 	.word	0x080082fd
 80082a8:	080082ed 	.word	0x080082ed
 80082ac:	080082fd 	.word	0x080082fd
 80082b0:	080082fd 	.word	0x080082fd
 80082b4:	080082fd 	.word	0x080082fd
 80082b8:	080082fd 	.word	0x080082fd
 80082bc:	080082fd 	.word	0x080082fd
 80082c0:	080082fd 	.word	0x080082fd
 80082c4:	080082fd 	.word	0x080082fd
 80082c8:	080082f5 	.word	0x080082f5
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d2:	e0bc      	b.n	800844e <UART_SetConfig+0x5a6>
 80082d4:	2304      	movs	r3, #4
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082da:	e0b8      	b.n	800844e <UART_SetConfig+0x5a6>
 80082dc:	2308      	movs	r3, #8
 80082de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082e2:	e0b4      	b.n	800844e <UART_SetConfig+0x5a6>
 80082e4:	2310      	movs	r3, #16
 80082e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ea:	e0b0      	b.n	800844e <UART_SetConfig+0x5a6>
 80082ec:	2320      	movs	r3, #32
 80082ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082f2:	e0ac      	b.n	800844e <UART_SetConfig+0x5a6>
 80082f4:	2340      	movs	r3, #64	; 0x40
 80082f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fa:	e0a8      	b.n	800844e <UART_SetConfig+0x5a6>
 80082fc:	2380      	movs	r3, #128	; 0x80
 80082fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008302:	e0a4      	b.n	800844e <UART_SetConfig+0x5a6>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a8f      	ldr	r2, [pc, #572]	; (8008548 <UART_SetConfig+0x6a0>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d130      	bne.n	8008370 <UART_SetConfig+0x4c8>
 800830e:	4b8d      	ldr	r3, [pc, #564]	; (8008544 <UART_SetConfig+0x69c>)
 8008310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	2b05      	cmp	r3, #5
 8008318:	d826      	bhi.n	8008368 <UART_SetConfig+0x4c0>
 800831a:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <UART_SetConfig+0x478>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	08008339 	.word	0x08008339
 8008324:	08008341 	.word	0x08008341
 8008328:	08008349 	.word	0x08008349
 800832c:	08008351 	.word	0x08008351
 8008330:	08008359 	.word	0x08008359
 8008334:	08008361 	.word	0x08008361
 8008338:	2300      	movs	r3, #0
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833e:	e086      	b.n	800844e <UART_SetConfig+0x5a6>
 8008340:	2304      	movs	r3, #4
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e082      	b.n	800844e <UART_SetConfig+0x5a6>
 8008348:	2308      	movs	r3, #8
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e07e      	b.n	800844e <UART_SetConfig+0x5a6>
 8008350:	2310      	movs	r3, #16
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e07a      	b.n	800844e <UART_SetConfig+0x5a6>
 8008358:	2320      	movs	r3, #32
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e076      	b.n	800844e <UART_SetConfig+0x5a6>
 8008360:	2340      	movs	r3, #64	; 0x40
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008366:	e072      	b.n	800844e <UART_SetConfig+0x5a6>
 8008368:	2380      	movs	r3, #128	; 0x80
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836e:	e06e      	b.n	800844e <UART_SetConfig+0x5a6>
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a75      	ldr	r2, [pc, #468]	; (800854c <UART_SetConfig+0x6a4>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d130      	bne.n	80083dc <UART_SetConfig+0x534>
 800837a:	4b72      	ldr	r3, [pc, #456]	; (8008544 <UART_SetConfig+0x69c>)
 800837c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837e:	f003 0307 	and.w	r3, r3, #7
 8008382:	2b05      	cmp	r3, #5
 8008384:	d826      	bhi.n	80083d4 <UART_SetConfig+0x52c>
 8008386:	a201      	add	r2, pc, #4	; (adr r2, 800838c <UART_SetConfig+0x4e4>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083a5 	.word	0x080083a5
 8008390:	080083ad 	.word	0x080083ad
 8008394:	080083b5 	.word	0x080083b5
 8008398:	080083bd 	.word	0x080083bd
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083cd 	.word	0x080083cd
 80083a4:	2300      	movs	r3, #0
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e050      	b.n	800844e <UART_SetConfig+0x5a6>
 80083ac:	2304      	movs	r3, #4
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e04c      	b.n	800844e <UART_SetConfig+0x5a6>
 80083b4:	2308      	movs	r3, #8
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e048      	b.n	800844e <UART_SetConfig+0x5a6>
 80083bc:	2310      	movs	r3, #16
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e044      	b.n	800844e <UART_SetConfig+0x5a6>
 80083c4:	2320      	movs	r3, #32
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e040      	b.n	800844e <UART_SetConfig+0x5a6>
 80083cc:	2340      	movs	r3, #64	; 0x40
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083d2:	e03c      	b.n	800844e <UART_SetConfig+0x5a6>
 80083d4:	2380      	movs	r3, #128	; 0x80
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083da:	e038      	b.n	800844e <UART_SetConfig+0x5a6>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a5b      	ldr	r2, [pc, #364]	; (8008550 <UART_SetConfig+0x6a8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d130      	bne.n	8008448 <UART_SetConfig+0x5a0>
 80083e6:	4b57      	ldr	r3, [pc, #348]	; (8008544 <UART_SetConfig+0x69c>)
 80083e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	2b05      	cmp	r3, #5
 80083f0:	d826      	bhi.n	8008440 <UART_SetConfig+0x598>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <UART_SetConfig+0x550>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008411 	.word	0x08008411
 80083fc:	08008419 	.word	0x08008419
 8008400:	08008421 	.word	0x08008421
 8008404:	08008429 	.word	0x08008429
 8008408:	08008431 	.word	0x08008431
 800840c:	08008439 	.word	0x08008439
 8008410:	2302      	movs	r3, #2
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008416:	e01a      	b.n	800844e <UART_SetConfig+0x5a6>
 8008418:	2304      	movs	r3, #4
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e016      	b.n	800844e <UART_SetConfig+0x5a6>
 8008420:	2308      	movs	r3, #8
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008426:	e012      	b.n	800844e <UART_SetConfig+0x5a6>
 8008428:	2310      	movs	r3, #16
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e00e      	b.n	800844e <UART_SetConfig+0x5a6>
 8008430:	2320      	movs	r3, #32
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e00a      	b.n	800844e <UART_SetConfig+0x5a6>
 8008438:	2340      	movs	r3, #64	; 0x40
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800843e:	e006      	b.n	800844e <UART_SetConfig+0x5a6>
 8008440:	2380      	movs	r3, #128	; 0x80
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008446:	e002      	b.n	800844e <UART_SetConfig+0x5a6>
 8008448:	2380      	movs	r3, #128	; 0x80
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a3f      	ldr	r2, [pc, #252]	; (8008550 <UART_SetConfig+0x6a8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	f040 80f8 	bne.w	800864a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800845a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800845e:	2b20      	cmp	r3, #32
 8008460:	dc46      	bgt.n	80084f0 <UART_SetConfig+0x648>
 8008462:	2b02      	cmp	r3, #2
 8008464:	f2c0 8082 	blt.w	800856c <UART_SetConfig+0x6c4>
 8008468:	3b02      	subs	r3, #2
 800846a:	2b1e      	cmp	r3, #30
 800846c:	d87e      	bhi.n	800856c <UART_SetConfig+0x6c4>
 800846e:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <UART_SetConfig+0x5cc>)
 8008470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008474:	080084f7 	.word	0x080084f7
 8008478:	0800856d 	.word	0x0800856d
 800847c:	080084ff 	.word	0x080084ff
 8008480:	0800856d 	.word	0x0800856d
 8008484:	0800856d 	.word	0x0800856d
 8008488:	0800856d 	.word	0x0800856d
 800848c:	0800850f 	.word	0x0800850f
 8008490:	0800856d 	.word	0x0800856d
 8008494:	0800856d 	.word	0x0800856d
 8008498:	0800856d 	.word	0x0800856d
 800849c:	0800856d 	.word	0x0800856d
 80084a0:	0800856d 	.word	0x0800856d
 80084a4:	0800856d 	.word	0x0800856d
 80084a8:	0800856d 	.word	0x0800856d
 80084ac:	0800851f 	.word	0x0800851f
 80084b0:	0800856d 	.word	0x0800856d
 80084b4:	0800856d 	.word	0x0800856d
 80084b8:	0800856d 	.word	0x0800856d
 80084bc:	0800856d 	.word	0x0800856d
 80084c0:	0800856d 	.word	0x0800856d
 80084c4:	0800856d 	.word	0x0800856d
 80084c8:	0800856d 	.word	0x0800856d
 80084cc:	0800856d 	.word	0x0800856d
 80084d0:	0800856d 	.word	0x0800856d
 80084d4:	0800856d 	.word	0x0800856d
 80084d8:	0800856d 	.word	0x0800856d
 80084dc:	0800856d 	.word	0x0800856d
 80084e0:	0800856d 	.word	0x0800856d
 80084e4:	0800856d 	.word	0x0800856d
 80084e8:	0800856d 	.word	0x0800856d
 80084ec:	0800855f 	.word	0x0800855f
 80084f0:	2b40      	cmp	r3, #64	; 0x40
 80084f2:	d037      	beq.n	8008564 <UART_SetConfig+0x6bc>
 80084f4:	e03a      	b.n	800856c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80084f6:	f7fd fe4b 	bl	8006190 <HAL_RCCEx_GetD3PCLK1Freq>
 80084fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084fc:	e03c      	b.n	8008578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008502:	4618      	mov	r0, r3
 8008504:	f7fd fe5a 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800850c:	e034      	b.n	8008578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800850e:	f107 0318 	add.w	r3, r7, #24
 8008512:	4618      	mov	r0, r3
 8008514:	f7fd ffa6 	bl	8006464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800851c:	e02c      	b.n	8008578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <UART_SetConfig+0x69c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b00      	cmp	r3, #0
 8008528:	d016      	beq.n	8008558 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800852a:	4b06      	ldr	r3, [pc, #24]	; (8008544 <UART_SetConfig+0x69c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	08db      	lsrs	r3, r3, #3
 8008530:	f003 0303 	and.w	r3, r3, #3
 8008534:	4a07      	ldr	r2, [pc, #28]	; (8008554 <UART_SetConfig+0x6ac>)
 8008536:	fa22 f303 	lsr.w	r3, r2, r3
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800853c:	e01c      	b.n	8008578 <UART_SetConfig+0x6d0>
 800853e:	bf00      	nop
 8008540:	40011400 	.word	0x40011400
 8008544:	58024400 	.word	0x58024400
 8008548:	40007800 	.word	0x40007800
 800854c:	40007c00 	.word	0x40007c00
 8008550:	58000c00 	.word	0x58000c00
 8008554:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008558:	4b9d      	ldr	r3, [pc, #628]	; (80087d0 <UART_SetConfig+0x928>)
 800855a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800855c:	e00c      	b.n	8008578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800855e:	4b9d      	ldr	r3, [pc, #628]	; (80087d4 <UART_SetConfig+0x92c>)
 8008560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008562:	e009      	b.n	8008578 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800856a:	e005      	b.n	8008578 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008576:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 81de 	beq.w	800893c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	4a94      	ldr	r2, [pc, #592]	; (80087d8 <UART_SetConfig+0x930>)
 8008586:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800858a:	461a      	mov	r2, r3
 800858c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800858e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008592:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	685a      	ldr	r2, [r3, #4]
 8008598:	4613      	mov	r3, r2
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	4413      	add	r3, r2
 800859e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d305      	bcc.n	80085b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d903      	bls.n	80085b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80085b6:	e1c1      	b.n	800893c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ba:	2200      	movs	r2, #0
 80085bc:	60bb      	str	r3, [r7, #8]
 80085be:	60fa      	str	r2, [r7, #12]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	4a84      	ldr	r2, [pc, #528]	; (80087d8 <UART_SetConfig+0x930>)
 80085c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	2200      	movs	r2, #0
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	607a      	str	r2, [r7, #4]
 80085d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085da:	f7f7 fe81 	bl	80002e0 <__aeabi_uldivmod>
 80085de:	4602      	mov	r2, r0
 80085e0:	460b      	mov	r3, r1
 80085e2:	4610      	mov	r0, r2
 80085e4:	4619      	mov	r1, r3
 80085e6:	f04f 0200 	mov.w	r2, #0
 80085ea:	f04f 0300 	mov.w	r3, #0
 80085ee:	020b      	lsls	r3, r1, #8
 80085f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085f4:	0202      	lsls	r2, r0, #8
 80085f6:	6979      	ldr	r1, [r7, #20]
 80085f8:	6849      	ldr	r1, [r1, #4]
 80085fa:	0849      	lsrs	r1, r1, #1
 80085fc:	2000      	movs	r0, #0
 80085fe:	460c      	mov	r4, r1
 8008600:	4605      	mov	r5, r0
 8008602:	eb12 0804 	adds.w	r8, r2, r4
 8008606:	eb43 0905 	adc.w	r9, r3, r5
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	469a      	mov	sl, r3
 8008612:	4693      	mov	fp, r2
 8008614:	4652      	mov	r2, sl
 8008616:	465b      	mov	r3, fp
 8008618:	4640      	mov	r0, r8
 800861a:	4649      	mov	r1, r9
 800861c:	f7f7 fe60 	bl	80002e0 <__aeabi_uldivmod>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4613      	mov	r3, r2
 8008626:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800862e:	d308      	bcc.n	8008642 <UART_SetConfig+0x79a>
 8008630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008636:	d204      	bcs.n	8008642 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800863e:	60da      	str	r2, [r3, #12]
 8008640:	e17c      	b.n	800893c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008648:	e178      	b.n	800893c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008652:	f040 80c5 	bne.w	80087e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008656:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800865a:	2b20      	cmp	r3, #32
 800865c:	dc48      	bgt.n	80086f0 <UART_SetConfig+0x848>
 800865e:	2b00      	cmp	r3, #0
 8008660:	db7b      	blt.n	800875a <UART_SetConfig+0x8b2>
 8008662:	2b20      	cmp	r3, #32
 8008664:	d879      	bhi.n	800875a <UART_SetConfig+0x8b2>
 8008666:	a201      	add	r2, pc, #4	; (adr r2, 800866c <UART_SetConfig+0x7c4>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	080086f7 	.word	0x080086f7
 8008670:	080086ff 	.word	0x080086ff
 8008674:	0800875b 	.word	0x0800875b
 8008678:	0800875b 	.word	0x0800875b
 800867c:	08008707 	.word	0x08008707
 8008680:	0800875b 	.word	0x0800875b
 8008684:	0800875b 	.word	0x0800875b
 8008688:	0800875b 	.word	0x0800875b
 800868c:	08008717 	.word	0x08008717
 8008690:	0800875b 	.word	0x0800875b
 8008694:	0800875b 	.word	0x0800875b
 8008698:	0800875b 	.word	0x0800875b
 800869c:	0800875b 	.word	0x0800875b
 80086a0:	0800875b 	.word	0x0800875b
 80086a4:	0800875b 	.word	0x0800875b
 80086a8:	0800875b 	.word	0x0800875b
 80086ac:	08008727 	.word	0x08008727
 80086b0:	0800875b 	.word	0x0800875b
 80086b4:	0800875b 	.word	0x0800875b
 80086b8:	0800875b 	.word	0x0800875b
 80086bc:	0800875b 	.word	0x0800875b
 80086c0:	0800875b 	.word	0x0800875b
 80086c4:	0800875b 	.word	0x0800875b
 80086c8:	0800875b 	.word	0x0800875b
 80086cc:	0800875b 	.word	0x0800875b
 80086d0:	0800875b 	.word	0x0800875b
 80086d4:	0800875b 	.word	0x0800875b
 80086d8:	0800875b 	.word	0x0800875b
 80086dc:	0800875b 	.word	0x0800875b
 80086e0:	0800875b 	.word	0x0800875b
 80086e4:	0800875b 	.word	0x0800875b
 80086e8:	0800875b 	.word	0x0800875b
 80086ec:	0800874d 	.word	0x0800874d
 80086f0:	2b40      	cmp	r3, #64	; 0x40
 80086f2:	d02e      	beq.n	8008752 <UART_SetConfig+0x8aa>
 80086f4:	e031      	b.n	800875a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086f6:	f7fc f8c5 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 80086fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80086fc:	e033      	b.n	8008766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086fe:	f7fc f8d7 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 8008702:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008704:	e02f      	b.n	8008766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800870a:	4618      	mov	r0, r3
 800870c:	f7fd fd56 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008714:	e027      	b.n	8008766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008716:	f107 0318 	add.w	r3, r7, #24
 800871a:	4618      	mov	r0, r3
 800871c:	f7fd fea2 	bl	8006464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008724:	e01f      	b.n	8008766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008726:	4b2d      	ldr	r3, [pc, #180]	; (80087dc <UART_SetConfig+0x934>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 0320 	and.w	r3, r3, #32
 800872e:	2b00      	cmp	r3, #0
 8008730:	d009      	beq.n	8008746 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008732:	4b2a      	ldr	r3, [pc, #168]	; (80087dc <UART_SetConfig+0x934>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	08db      	lsrs	r3, r3, #3
 8008738:	f003 0303 	and.w	r3, r3, #3
 800873c:	4a24      	ldr	r2, [pc, #144]	; (80087d0 <UART_SetConfig+0x928>)
 800873e:	fa22 f303 	lsr.w	r3, r2, r3
 8008742:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008744:	e00f      	b.n	8008766 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008746:	4b22      	ldr	r3, [pc, #136]	; (80087d0 <UART_SetConfig+0x928>)
 8008748:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800874a:	e00c      	b.n	8008766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800874c:	4b21      	ldr	r3, [pc, #132]	; (80087d4 <UART_SetConfig+0x92c>)
 800874e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008750:	e009      	b.n	8008766 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008756:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008758:	e005      	b.n	8008766 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 80e7 	beq.w	800893c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008772:	4a19      	ldr	r2, [pc, #100]	; (80087d8 <UART_SetConfig+0x930>)
 8008774:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008778:	461a      	mov	r2, r3
 800877a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008780:	005a      	lsls	r2, r3, #1
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	085b      	lsrs	r3, r3, #1
 8008788:	441a      	add	r2, r3
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008792:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008796:	2b0f      	cmp	r3, #15
 8008798:	d916      	bls.n	80087c8 <UART_SetConfig+0x920>
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a0:	d212      	bcs.n	80087c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	f023 030f 	bic.w	r3, r3, #15
 80087aa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	085b      	lsrs	r3, r3, #1
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	f003 0307 	and.w	r3, r3, #7
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80087ba:	4313      	orrs	r3, r2
 80087bc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80087c4:	60da      	str	r2, [r3, #12]
 80087c6:	e0b9      	b.n	800893c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80087ce:	e0b5      	b.n	800893c <UART_SetConfig+0xa94>
 80087d0:	03d09000 	.word	0x03d09000
 80087d4:	003d0900 	.word	0x003d0900
 80087d8:	0800baf8 	.word	0x0800baf8
 80087dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80087e0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80087e4:	2b20      	cmp	r3, #32
 80087e6:	dc49      	bgt.n	800887c <UART_SetConfig+0x9d4>
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	db7c      	blt.n	80088e6 <UART_SetConfig+0xa3e>
 80087ec:	2b20      	cmp	r3, #32
 80087ee:	d87a      	bhi.n	80088e6 <UART_SetConfig+0xa3e>
 80087f0:	a201      	add	r2, pc, #4	; (adr r2, 80087f8 <UART_SetConfig+0x950>)
 80087f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f6:	bf00      	nop
 80087f8:	08008883 	.word	0x08008883
 80087fc:	0800888b 	.word	0x0800888b
 8008800:	080088e7 	.word	0x080088e7
 8008804:	080088e7 	.word	0x080088e7
 8008808:	08008893 	.word	0x08008893
 800880c:	080088e7 	.word	0x080088e7
 8008810:	080088e7 	.word	0x080088e7
 8008814:	080088e7 	.word	0x080088e7
 8008818:	080088a3 	.word	0x080088a3
 800881c:	080088e7 	.word	0x080088e7
 8008820:	080088e7 	.word	0x080088e7
 8008824:	080088e7 	.word	0x080088e7
 8008828:	080088e7 	.word	0x080088e7
 800882c:	080088e7 	.word	0x080088e7
 8008830:	080088e7 	.word	0x080088e7
 8008834:	080088e7 	.word	0x080088e7
 8008838:	080088b3 	.word	0x080088b3
 800883c:	080088e7 	.word	0x080088e7
 8008840:	080088e7 	.word	0x080088e7
 8008844:	080088e7 	.word	0x080088e7
 8008848:	080088e7 	.word	0x080088e7
 800884c:	080088e7 	.word	0x080088e7
 8008850:	080088e7 	.word	0x080088e7
 8008854:	080088e7 	.word	0x080088e7
 8008858:	080088e7 	.word	0x080088e7
 800885c:	080088e7 	.word	0x080088e7
 8008860:	080088e7 	.word	0x080088e7
 8008864:	080088e7 	.word	0x080088e7
 8008868:	080088e7 	.word	0x080088e7
 800886c:	080088e7 	.word	0x080088e7
 8008870:	080088e7 	.word	0x080088e7
 8008874:	080088e7 	.word	0x080088e7
 8008878:	080088d9 	.word	0x080088d9
 800887c:	2b40      	cmp	r3, #64	; 0x40
 800887e:	d02e      	beq.n	80088de <UART_SetConfig+0xa36>
 8008880:	e031      	b.n	80088e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008882:	f7fb ffff 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8008886:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008888:	e033      	b.n	80088f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800888a:	f7fc f811 	bl	80048b0 <HAL_RCC_GetPCLK2Freq>
 800888e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008890:	e02f      	b.n	80088f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008892:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008896:	4618      	mov	r0, r3
 8008898:	f7fd fc90 	bl	80061bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088a0:	e027      	b.n	80088f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088a2:	f107 0318 	add.w	r3, r7, #24
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fd fddc 	bl	8006464 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088b0:	e01f      	b.n	80088f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088b2:	4b2d      	ldr	r3, [pc, #180]	; (8008968 <UART_SetConfig+0xac0>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0320 	and.w	r3, r3, #32
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d009      	beq.n	80088d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088be:	4b2a      	ldr	r3, [pc, #168]	; (8008968 <UART_SetConfig+0xac0>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	08db      	lsrs	r3, r3, #3
 80088c4:	f003 0303 	and.w	r3, r3, #3
 80088c8:	4a28      	ldr	r2, [pc, #160]	; (800896c <UART_SetConfig+0xac4>)
 80088ca:	fa22 f303 	lsr.w	r3, r2, r3
 80088ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088d0:	e00f      	b.n	80088f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80088d2:	4b26      	ldr	r3, [pc, #152]	; (800896c <UART_SetConfig+0xac4>)
 80088d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088d6:	e00c      	b.n	80088f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088d8:	4b25      	ldr	r3, [pc, #148]	; (8008970 <UART_SetConfig+0xac8>)
 80088da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088dc:	e009      	b.n	80088f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80088e4:	e005      	b.n	80088f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80088e6:	2300      	movs	r3, #0
 80088e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80088f0:	bf00      	nop
    }

    if (pclk != 0U)
 80088f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d021      	beq.n	800893c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fc:	4a1d      	ldr	r2, [pc, #116]	; (8008974 <UART_SetConfig+0xacc>)
 80088fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008902:	461a      	mov	r2, r3
 8008904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008906:	fbb3 f2f2 	udiv	r2, r3, r2
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	085b      	lsrs	r3, r3, #1
 8008910:	441a      	add	r2, r3
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	fbb2 f3f3 	udiv	r3, r2, r3
 800891a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800891c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891e:	2b0f      	cmp	r3, #15
 8008920:	d909      	bls.n	8008936 <UART_SetConfig+0xa8e>
 8008922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008928:	d205      	bcs.n	8008936 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	b29a      	uxth	r2, r3
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	60da      	str	r2, [r3, #12]
 8008934:	e002      	b.n	800893c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	2201      	movs	r2, #1
 8008940:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	2201      	movs	r2, #1
 8008948:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2200      	movs	r2, #0
 8008950:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2200      	movs	r2, #0
 8008956:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008958:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800895c:	4618      	mov	r0, r3
 800895e:	3748      	adds	r7, #72	; 0x48
 8008960:	46bd      	mov	sp, r7
 8008962:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008966:	bf00      	nop
 8008968:	58024400 	.word	0x58024400
 800896c:	03d09000 	.word	0x03d09000
 8008970:	003d0900 	.word	0x003d0900
 8008974:	0800baf8 	.word	0x0800baf8

08008978 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00a      	beq.n	80089a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a6:	f003 0302 	and.w	r3, r3, #2
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00a      	beq.n	80089c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00a      	beq.n	80089e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ea:	f003 0308 	and.w	r3, r3, #8
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d00a      	beq.n	8008a08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	430a      	orrs	r2, r1
 8008a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0c:	f003 0310 	and.w	r3, r3, #16
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00a      	beq.n	8008a2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d01a      	beq.n	8008a8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a76:	d10a      	bne.n	8008a8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d00a      	beq.n	8008ab0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	430a      	orrs	r2, r1
 8008aae:	605a      	str	r2, [r3, #4]
  }
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af02      	add	r7, sp, #8
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008acc:	f7f9 fa5e 	bl	8001f8c <HAL_GetTick>
 8008ad0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	d10e      	bne.n	8008afe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f82f 	bl	8008b52 <UART_WaitOnFlagUntilTimeout>
 8008af4:	4603      	mov	r3, r0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d001      	beq.n	8008afe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e025      	b.n	8008b4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b04      	cmp	r3, #4
 8008b0a:	d10e      	bne.n	8008b2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b10:	9300      	str	r3, [sp, #0]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f819 	bl	8008b52 <UART_WaitOnFlagUntilTimeout>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e00f      	b.n	8008b4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2220      	movs	r2, #32
 8008b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b09c      	sub	sp, #112	; 0x70
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	60f8      	str	r0, [r7, #12]
 8008b5a:	60b9      	str	r1, [r7, #8]
 8008b5c:	603b      	str	r3, [r7, #0]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b62:	e0a9      	b.n	8008cb8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6a:	f000 80a5 	beq.w	8008cb8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6e:	f7f9 fa0d 	bl	8001f8c <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d302      	bcc.n	8008b84 <UART_WaitOnFlagUntilTimeout+0x32>
 8008b7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d140      	bne.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b98:	667b      	str	r3, [r7, #100]	; 0x64
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ba4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ba8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e6      	bne.n	8008b84 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	f023 0301 	bic.w	r3, r3, #1
 8008bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008bd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8008bd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008bdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e5      	bne.n	8008bb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e069      	b.n	8008cda <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 0304 	and.w	r3, r3, #4
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d051      	beq.n	8008cb8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c22:	d149      	bne.n	8008cb8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c2c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c36:	e853 3f00 	ldrex	r3, [r3]
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	461a      	mov	r2, r3
 8008c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008c4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e6      	bne.n	8008c2e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3308      	adds	r3, #8
 8008c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	e853 3f00 	ldrex	r3, [r3]
 8008c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f023 0301 	bic.w	r3, r3, #1
 8008c76:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c80:	623a      	str	r2, [r7, #32]
 8008c82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c84:	69f9      	ldr	r1, [r7, #28]
 8008c86:	6a3a      	ldr	r2, [r7, #32]
 8008c88:	e841 2300 	strex	r3, r2, [r1]
 8008c8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1e5      	bne.n	8008c60 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2220      	movs	r2, #32
 8008ca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e010      	b.n	8008cda <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	69da      	ldr	r2, [r3, #28]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	bf0c      	ite	eq
 8008cc8:	2301      	moveq	r3, #1
 8008cca:	2300      	movne	r3, #0
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	461a      	mov	r2, r3
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	f43f af46 	beq.w	8008b64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3770      	adds	r7, #112	; 0x70
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b085      	sub	sp, #20
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_UARTEx_DisableFifoMode+0x16>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e027      	b.n	8008d48 <HAL_UARTEx_DisableFifoMode+0x66>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2224      	movs	r2, #36	; 0x24
 8008d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0201 	bic.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d101      	bne.n	8008d6c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	e02d      	b.n	8008dc8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2224      	movs	r2, #36	; 0x24
 8008d78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f022 0201 	bic.w	r2, r2, #1
 8008d92:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	683a      	ldr	r2, [r7, #0]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f84f 	bl	8008e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2220      	movs	r2, #32
 8008dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d101      	bne.n	8008de8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008de4:	2302      	movs	r3, #2
 8008de6:	e02d      	b.n	8008e44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2224      	movs	r2, #36	; 0x24
 8008df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0201 	bic.w	r2, r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f811 	bl	8008e4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2220      	movs	r2, #32
 8008e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d108      	bne.n	8008e6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008e6c:	e031      	b.n	8008ed2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008e6e:	2310      	movs	r3, #16
 8008e70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008e72:	2310      	movs	r3, #16
 8008e74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	0e5b      	lsrs	r3, r3, #25
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	f003 0307 	and.w	r3, r3, #7
 8008e84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	0f5b      	lsrs	r3, r3, #29
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	f003 0307 	and.w	r3, r3, #7
 8008e94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	7b3a      	ldrb	r2, [r7, #12]
 8008e9a:	4911      	ldr	r1, [pc, #68]	; (8008ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8008e9c:	5c8a      	ldrb	r2, [r1, r2]
 8008e9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ea2:	7b3a      	ldrb	r2, [r7, #12]
 8008ea4:	490f      	ldr	r1, [pc, #60]	; (8008ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8008ea6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	7b7a      	ldrb	r2, [r7, #13]
 8008eb8:	4909      	ldr	r1, [pc, #36]	; (8008ee0 <UARTEx_SetNbDataToProcess+0x94>)
 8008eba:	5c8a      	ldrb	r2, [r1, r2]
 8008ebc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ec0:	7b7a      	ldrb	r2, [r7, #13]
 8008ec2:	4908      	ldr	r1, [pc, #32]	; (8008ee4 <UARTEx_SetNbDataToProcess+0x98>)
 8008ec4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ec6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008ed2:	bf00      	nop
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	0800bb10 	.word	0x0800bb10
 8008ee4:	0800bb18 	.word	0x0800bb18

08008ee8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b085      	sub	sp, #20
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	4603      	mov	r3, r0
 8008ef0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008efa:	2b84      	cmp	r3, #132	; 0x84
 8008efc:	d005      	beq.n	8008f0a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008efe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	4413      	add	r3, r2
 8008f06:	3303      	adds	r3, #3
 8008f08:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	3714      	adds	r7, #20
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008f1c:	f000 ffde 	bl	8009edc <vTaskStartScheduler>
  
  return osOK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f28:	b089      	sub	sp, #36	; 0x24
 8008f2a:	af04      	add	r7, sp, #16
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	695b      	ldr	r3, [r3, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d020      	beq.n	8008f7a <osThreadCreate+0x54>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	699b      	ldr	r3, [r3, #24]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d01c      	beq.n	8008f7a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685c      	ldr	r4, [r3, #4]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681d      	ldr	r5, [r3, #0]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	691e      	ldr	r6, [r3, #16]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff ffc8 	bl	8008ee8 <makeFreeRtosPriority>
 8008f58:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f62:	9202      	str	r2, [sp, #8]
 8008f64:	9301      	str	r3, [sp, #4]
 8008f66:	9100      	str	r1, [sp, #0]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	4632      	mov	r2, r6
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f000 fdd6 	bl	8009b20 <xTaskCreateStatic>
 8008f74:	4603      	mov	r3, r0
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	e01c      	b.n	8008fb4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	685c      	ldr	r4, [r3, #4]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008f86:	b29e      	uxth	r6, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7ff ffaa 	bl	8008ee8 <makeFreeRtosPriority>
 8008f94:	4602      	mov	r2, r0
 8008f96:	f107 030c 	add.w	r3, r7, #12
 8008f9a:	9301      	str	r3, [sp, #4]
 8008f9c:	9200      	str	r2, [sp, #0]
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	4632      	mov	r2, r6
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f000 fe18 	bl	8009bda <xTaskCreate>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d001      	beq.n	8008fb4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	e000      	b.n	8008fb6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fbe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <osDelay+0x16>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	e000      	b.n	8008fd6 <osDelay+0x18>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 ff4c 	bl	8009e74 <vTaskDelay>
  
  return osOK;
 8008fdc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f103 0208 	add.w	r2, r3, #8
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffe:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f103 0208 	add.w	r2, r3, #8
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f103 0208 	add.w	r2, r3, #8
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	683a      	ldr	r2, [r7, #0]
 8009064:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	601a      	str	r2, [r3, #0]
}
 800907c:	bf00      	nop
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800909e:	d103      	bne.n	80090a8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	60fb      	str	r3, [r7, #12]
 80090a6:	e00c      	b.n	80090c2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3308      	adds	r3, #8
 80090ac:	60fb      	str	r3, [r7, #12]
 80090ae:	e002      	b.n	80090b6 <vListInsert+0x2e>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d2f6      	bcs.n	80090b0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	601a      	str	r2, [r3, #0]
}
 80090ee:	bf00      	nop
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80090fa:	b480      	push	{r7}
 80090fc:	b085      	sub	sp, #20
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	6892      	ldr	r2, [r2, #8]
 8009110:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	6852      	ldr	r2, [r2, #4]
 800911a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	429a      	cmp	r2, r3
 8009124:	d103      	bne.n	800912e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689a      	ldr	r2, [r3, #8]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	1e5a      	subs	r2, r3, #1
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
	...

08009150 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d10a      	bne.n	800917a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	f383 8811 	msr	BASEPRI, r3
 800916c:	f3bf 8f6f 	isb	sy
 8009170:	f3bf 8f4f 	dsb	sy
 8009174:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009176:	bf00      	nop
 8009178:	e7fe      	b.n	8009178 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800917a:	f002 f86b 	bl	800b254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009186:	68f9      	ldr	r1, [r7, #12]
 8009188:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800918a:	fb01 f303 	mul.w	r3, r1, r3
 800918e:	441a      	add	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091aa:	3b01      	subs	r3, #1
 80091ac:	68f9      	ldr	r1, [r7, #12]
 80091ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091b0:	fb01 f303 	mul.w	r3, r1, r3
 80091b4:	441a      	add	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	22ff      	movs	r2, #255	; 0xff
 80091be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	22ff      	movs	r2, #255	; 0xff
 80091c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d114      	bne.n	80091fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01a      	beq.n	800920e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	3310      	adds	r3, #16
 80091dc:	4618      	mov	r0, r3
 80091de:	f001 f911 	bl	800a404 <xTaskRemoveFromEventList>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d012      	beq.n	800920e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80091e8:	4b0c      	ldr	r3, [pc, #48]	; (800921c <xQueueGenericReset+0xcc>)
 80091ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	f3bf 8f4f 	dsb	sy
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	e009      	b.n	800920e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	3310      	adds	r3, #16
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff fef1 	bl	8008fe6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	3324      	adds	r3, #36	; 0x24
 8009208:	4618      	mov	r0, r3
 800920a:	f7ff feec 	bl	8008fe6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800920e:	f002 f851 	bl	800b2b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009212:	2301      	movs	r3, #1
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	e000ed04 	.word	0xe000ed04

08009220 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08e      	sub	sp, #56	; 0x38
 8009224:	af02      	add	r7, sp, #8
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10a      	bne.n	800924a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10a      	bne.n	8009266 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d002      	beq.n	8009272 <xQueueGenericCreateStatic+0x52>
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <xQueueGenericCreateStatic+0x56>
 8009272:	2301      	movs	r3, #1
 8009274:	e000      	b.n	8009278 <xQueueGenericCreateStatic+0x58>
 8009276:	2300      	movs	r3, #0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	623b      	str	r3, [r7, #32]
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d102      	bne.n	800929e <xQueueGenericCreateStatic+0x7e>
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <xQueueGenericCreateStatic+0x82>
 800929e:	2301      	movs	r3, #1
 80092a0:	e000      	b.n	80092a4 <xQueueGenericCreateStatic+0x84>
 80092a2:	2300      	movs	r3, #0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10a      	bne.n	80092be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	61fb      	str	r3, [r7, #28]
}
 80092ba:	bf00      	nop
 80092bc:	e7fe      	b.n	80092bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80092be:	2348      	movs	r3, #72	; 0x48
 80092c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	2b48      	cmp	r3, #72	; 0x48
 80092c6:	d00a      	beq.n	80092de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	61bb      	str	r3, [r7, #24]
}
 80092da:	bf00      	nop
 80092dc:	e7fe      	b.n	80092dc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80092de:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80092e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00d      	beq.n	8009306 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80092ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80092f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	4613      	mov	r3, r2
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 f805 	bl	8009310 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009308:	4618      	mov	r0, r3
 800930a:	3730      	adds	r7, #48	; 0x30
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d103      	bne.n	800932c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	e002      	b.n	8009332 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800933e:	2101      	movs	r1, #1
 8009340:	69b8      	ldr	r0, [r7, #24]
 8009342:	f7ff ff05 	bl	8009150 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009346:	bf00      	nop
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
	...

08009350 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08e      	sub	sp, #56	; 0x38
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
 800935c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800935e:	2300      	movs	r3, #0
 8009360:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10a      	bne.n	8009382 <xQueueGenericSend+0x32>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d103      	bne.n	8009390 <xQueueGenericSend+0x40>
 8009388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938c:	2b00      	cmp	r3, #0
 800938e:	d101      	bne.n	8009394 <xQueueGenericSend+0x44>
 8009390:	2301      	movs	r3, #1
 8009392:	e000      	b.n	8009396 <xQueueGenericSend+0x46>
 8009394:	2300      	movs	r3, #0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d10a      	bne.n	80093b0 <xQueueGenericSend+0x60>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093ac:	bf00      	nop
 80093ae:	e7fe      	b.n	80093ae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d103      	bne.n	80093be <xQueueGenericSend+0x6e>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <xQueueGenericSend+0x72>
 80093be:	2301      	movs	r3, #1
 80093c0:	e000      	b.n	80093c4 <xQueueGenericSend+0x74>
 80093c2:	2300      	movs	r3, #0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <xQueueGenericSend+0x8e>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	623b      	str	r3, [r7, #32]
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093de:	f001 f9d1 	bl	800a784 <xTaskGetSchedulerState>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <xQueueGenericSend+0x9e>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d101      	bne.n	80093f2 <xQueueGenericSend+0xa2>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <xQueueGenericSend+0xa4>
 80093f2:	2300      	movs	r3, #0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xQueueGenericSend+0xbe>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	61fb      	str	r3, [r7, #28]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800940e:	f001 ff21 	bl	800b254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800941a:	429a      	cmp	r2, r3
 800941c:	d302      	bcc.n	8009424 <xQueueGenericSend+0xd4>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b02      	cmp	r3, #2
 8009422:	d129      	bne.n	8009478 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	68b9      	ldr	r1, [r7, #8]
 8009428:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800942a:	f000 fa0b 	bl	8009844 <prvCopyDataToQueue>
 800942e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	2b00      	cmp	r3, #0
 8009436:	d010      	beq.n	800945a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	3324      	adds	r3, #36	; 0x24
 800943c:	4618      	mov	r0, r3
 800943e:	f000 ffe1 	bl	800a404 <xTaskRemoveFromEventList>
 8009442:	4603      	mov	r3, r0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d013      	beq.n	8009470 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009448:	4b3f      	ldr	r3, [pc, #252]	; (8009548 <xQueueGenericSend+0x1f8>)
 800944a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	f3bf 8f6f 	isb	sy
 8009458:	e00a      	b.n	8009470 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945c:	2b00      	cmp	r3, #0
 800945e:	d007      	beq.n	8009470 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009460:	4b39      	ldr	r3, [pc, #228]	; (8009548 <xQueueGenericSend+0x1f8>)
 8009462:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	f3bf 8f4f 	dsb	sy
 800946c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009470:	f001 ff20 	bl	800b2b4 <vPortExitCritical>
				return pdPASS;
 8009474:	2301      	movs	r3, #1
 8009476:	e063      	b.n	8009540 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d103      	bne.n	8009486 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800947e:	f001 ff19 	bl	800b2b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009482:	2300      	movs	r3, #0
 8009484:	e05c      	b.n	8009540 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009488:	2b00      	cmp	r3, #0
 800948a:	d106      	bne.n	800949a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800948c:	f107 0314 	add.w	r3, r7, #20
 8009490:	4618      	mov	r0, r3
 8009492:	f001 f819 	bl	800a4c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009496:	2301      	movs	r3, #1
 8009498:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800949a:	f001 ff0b 	bl	800b2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800949e:	f000 fd8d 	bl	8009fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094a2:	f001 fed7 	bl	800b254 <vPortEnterCritical>
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094ac:	b25b      	sxtb	r3, r3
 80094ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b2:	d103      	bne.n	80094bc <xQueueGenericSend+0x16c>
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094c2:	b25b      	sxtb	r3, r3
 80094c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c8:	d103      	bne.n	80094d2 <xQueueGenericSend+0x182>
 80094ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094d2:	f001 feef 	bl	800b2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094d6:	1d3a      	adds	r2, r7, #4
 80094d8:	f107 0314 	add.w	r3, r7, #20
 80094dc:	4611      	mov	r1, r2
 80094de:	4618      	mov	r0, r3
 80094e0:	f001 f808 	bl	800a4f4 <xTaskCheckForTimeOut>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d124      	bne.n	8009534 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ec:	f000 faa2 	bl	8009a34 <prvIsQueueFull>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d018      	beq.n	8009528 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	3310      	adds	r3, #16
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	4611      	mov	r1, r2
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 ff30 	bl	800a364 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009504:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009506:	f000 fa2d 	bl	8009964 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800950a:	f000 fd65 	bl	8009fd8 <xTaskResumeAll>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	f47f af7c 	bne.w	800940e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009516:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <xQueueGenericSend+0x1f8>)
 8009518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	f3bf 8f4f 	dsb	sy
 8009522:	f3bf 8f6f 	isb	sy
 8009526:	e772      	b.n	800940e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800952a:	f000 fa1b 	bl	8009964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800952e:	f000 fd53 	bl	8009fd8 <xTaskResumeAll>
 8009532:	e76c      	b.n	800940e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009536:	f000 fa15 	bl	8009964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800953a:	f000 fd4d 	bl	8009fd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800953e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009540:	4618      	mov	r0, r3
 8009542:	3738      	adds	r7, #56	; 0x38
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	e000ed04 	.word	0xe000ed04

0800954c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b090      	sub	sp, #64	; 0x40
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10a      	bne.n	800957a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009568:	f383 8811 	msr	BASEPRI, r3
 800956c:	f3bf 8f6f 	isb	sy
 8009570:	f3bf 8f4f 	dsb	sy
 8009574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d103      	bne.n	8009588 <xQueueGenericSendFromISR+0x3c>
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <xQueueGenericSendFromISR+0x40>
 8009588:	2301      	movs	r3, #1
 800958a:	e000      	b.n	800958e <xQueueGenericSendFromISR+0x42>
 800958c:	2300      	movs	r3, #0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d10a      	bne.n	80095a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009596:	f383 8811 	msr	BASEPRI, r3
 800959a:	f3bf 8f6f 	isb	sy
 800959e:	f3bf 8f4f 	dsb	sy
 80095a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095a4:	bf00      	nop
 80095a6:	e7fe      	b.n	80095a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d103      	bne.n	80095b6 <xQueueGenericSendFromISR+0x6a>
 80095ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d101      	bne.n	80095ba <xQueueGenericSendFromISR+0x6e>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e000      	b.n	80095bc <xQueueGenericSendFromISR+0x70>
 80095ba:	2300      	movs	r3, #0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10a      	bne.n	80095d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80095c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c4:	f383 8811 	msr	BASEPRI, r3
 80095c8:	f3bf 8f6f 	isb	sy
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	623b      	str	r3, [r7, #32]
}
 80095d2:	bf00      	nop
 80095d4:	e7fe      	b.n	80095d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095d6:	f001 ff1f 	bl	800b418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80095da:	f3ef 8211 	mrs	r2, BASEPRI
 80095de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e2:	f383 8811 	msr	BASEPRI, r3
 80095e6:	f3bf 8f6f 	isb	sy
 80095ea:	f3bf 8f4f 	dsb	sy
 80095ee:	61fa      	str	r2, [r7, #28]
 80095f0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80095f2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095f4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80095f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095fe:	429a      	cmp	r2, r3
 8009600:	d302      	bcc.n	8009608 <xQueueGenericSendFromISR+0xbc>
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	2b02      	cmp	r3, #2
 8009606:	d12f      	bne.n	8009668 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009616:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	68b9      	ldr	r1, [r7, #8]
 800961c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800961e:	f000 f911 	bl	8009844 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009622:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800962a:	d112      	bne.n	8009652 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800962c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	2b00      	cmp	r3, #0
 8009632:	d016      	beq.n	8009662 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009636:	3324      	adds	r3, #36	; 0x24
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fee3 	bl	800a404 <xTaskRemoveFromEventList>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00e      	beq.n	8009662 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00b      	beq.n	8009662 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	e007      	b.n	8009662 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009652:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009656:	3301      	adds	r3, #1
 8009658:	b2db      	uxtb	r3, r3
 800965a:	b25a      	sxtb	r2, r3
 800965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009662:	2301      	movs	r3, #1
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009666:	e001      	b.n	800966c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009668:	2300      	movs	r3, #0
 800966a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800966c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009676:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800967a:	4618      	mov	r0, r3
 800967c:	3740      	adds	r7, #64	; 0x40
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08c      	sub	sp, #48	; 0x30
 8009688:	af00      	add	r7, sp, #0
 800968a:	60f8      	str	r0, [r7, #12]
 800968c:	60b9      	str	r1, [r7, #8]
 800968e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009690:	2300      	movs	r3, #0
 8009692:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10a      	bne.n	80096b4 <xQueueReceive+0x30>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	f383 8811 	msr	BASEPRI, r3
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	623b      	str	r3, [r7, #32]
}
 80096b0:	bf00      	nop
 80096b2:	e7fe      	b.n	80096b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d103      	bne.n	80096c2 <xQueueReceive+0x3e>
 80096ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <xQueueReceive+0x42>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e000      	b.n	80096c8 <xQueueReceive+0x44>
 80096c6:	2300      	movs	r3, #0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10a      	bne.n	80096e2 <xQueueReceive+0x5e>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	61fb      	str	r3, [r7, #28]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096e2:	f001 f84f 	bl	800a784 <xTaskGetSchedulerState>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d102      	bne.n	80096f2 <xQueueReceive+0x6e>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <xQueueReceive+0x72>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e000      	b.n	80096f8 <xQueueReceive+0x74>
 80096f6:	2300      	movs	r3, #0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10a      	bne.n	8009712 <xQueueReceive+0x8e>
	__asm volatile
 80096fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009700:	f383 8811 	msr	BASEPRI, r3
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	61bb      	str	r3, [r7, #24]
}
 800970e:	bf00      	nop
 8009710:	e7fe      	b.n	8009710 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009712:	f001 fd9f 	bl	800b254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800971a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971e:	2b00      	cmp	r3, #0
 8009720:	d01f      	beq.n	8009762 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009722:	68b9      	ldr	r1, [r7, #8]
 8009724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009726:	f000 f8f7 	bl	8009918 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800972a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972c:	1e5a      	subs	r2, r3, #1
 800972e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009730:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d00f      	beq.n	800975a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800973a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973c:	3310      	adds	r3, #16
 800973e:	4618      	mov	r0, r3
 8009740:	f000 fe60 	bl	800a404 <xTaskRemoveFromEventList>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d007      	beq.n	800975a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800974a:	4b3d      	ldr	r3, [pc, #244]	; (8009840 <xQueueReceive+0x1bc>)
 800974c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009750:	601a      	str	r2, [r3, #0]
 8009752:	f3bf 8f4f 	dsb	sy
 8009756:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800975a:	f001 fdab 	bl	800b2b4 <vPortExitCritical>
				return pdPASS;
 800975e:	2301      	movs	r3, #1
 8009760:	e069      	b.n	8009836 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d103      	bne.n	8009770 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009768:	f001 fda4 	bl	800b2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800976c:	2300      	movs	r3, #0
 800976e:	e062      	b.n	8009836 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009772:	2b00      	cmp	r3, #0
 8009774:	d106      	bne.n	8009784 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009776:	f107 0310 	add.w	r3, r7, #16
 800977a:	4618      	mov	r0, r3
 800977c:	f000 fea4 	bl	800a4c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009780:	2301      	movs	r3, #1
 8009782:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009784:	f001 fd96 	bl	800b2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009788:	f000 fc18 	bl	8009fbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800978c:	f001 fd62 	bl	800b254 <vPortEnterCritical>
 8009790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009792:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009796:	b25b      	sxtb	r3, r3
 8009798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979c:	d103      	bne.n	80097a6 <xQueueReceive+0x122>
 800979e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097ac:	b25b      	sxtb	r3, r3
 80097ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b2:	d103      	bne.n	80097bc <xQueueReceive+0x138>
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097bc:	f001 fd7a 	bl	800b2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097c0:	1d3a      	adds	r2, r7, #4
 80097c2:	f107 0310 	add.w	r3, r7, #16
 80097c6:	4611      	mov	r1, r2
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 fe93 	bl	800a4f4 <xTaskCheckForTimeOut>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d123      	bne.n	800981c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097d6:	f000 f917 	bl	8009a08 <prvIsQueueEmpty>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d017      	beq.n	8009810 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e2:	3324      	adds	r3, #36	; 0x24
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	4611      	mov	r1, r2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 fdbb 	bl	800a364 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f0:	f000 f8b8 	bl	8009964 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097f4:	f000 fbf0 	bl	8009fd8 <xTaskResumeAll>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d189      	bne.n	8009712 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80097fe:	4b10      	ldr	r3, [pc, #64]	; (8009840 <xQueueReceive+0x1bc>)
 8009800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009804:	601a      	str	r2, [r3, #0]
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	f3bf 8f6f 	isb	sy
 800980e:	e780      	b.n	8009712 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009812:	f000 f8a7 	bl	8009964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009816:	f000 fbdf 	bl	8009fd8 <xTaskResumeAll>
 800981a:	e77a      	b.n	8009712 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800981c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800981e:	f000 f8a1 	bl	8009964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009822:	f000 fbd9 	bl	8009fd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009828:	f000 f8ee 	bl	8009a08 <prvIsQueueEmpty>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	f43f af6f 	beq.w	8009712 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009834:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009836:	4618      	mov	r0, r3
 8009838:	3730      	adds	r7, #48	; 0x30
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	e000ed04 	.word	0xe000ed04

08009844 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10d      	bne.n	800987e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d14d      	bne.n	8009906 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	4618      	mov	r0, r3
 8009870:	f000 ffa6 	bl	800a7c0 <xTaskPriorityDisinherit>
 8009874:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	609a      	str	r2, [r3, #8]
 800987c:	e043      	b.n	8009906 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d119      	bne.n	80098b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6858      	ldr	r0, [r3, #4]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988c:	461a      	mov	r2, r3
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	f002 f812 	bl	800b8b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989c:	441a      	add	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d32b      	bcc.n	8009906 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	605a      	str	r2, [r3, #4]
 80098b6:	e026      	b.n	8009906 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	68d8      	ldr	r0, [r3, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c0:	461a      	mov	r2, r3
 80098c2:	68b9      	ldr	r1, [r7, #8]
 80098c4:	f001 fff8 	bl	800b8b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d0:	425b      	negs	r3, r3
 80098d2:	441a      	add	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d207      	bcs.n	80098f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ec:	425b      	negs	r3, r3
 80098ee:	441a      	add	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d105      	bne.n	8009906 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	3b01      	subs	r3, #1
 8009904:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800990e:	697b      	ldr	r3, [r7, #20]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009926:	2b00      	cmp	r3, #0
 8009928:	d018      	beq.n	800995c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	441a      	add	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68da      	ldr	r2, [r3, #12]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	429a      	cmp	r2, r3
 8009942:	d303      	bcc.n	800994c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68d9      	ldr	r1, [r3, #12]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009954:	461a      	mov	r2, r3
 8009956:	6838      	ldr	r0, [r7, #0]
 8009958:	f001 ffae 	bl	800b8b8 <memcpy>
	}
}
 800995c:	bf00      	nop
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800996c:	f001 fc72 	bl	800b254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009976:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009978:	e011      	b.n	800999e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997e:	2b00      	cmp	r3, #0
 8009980:	d012      	beq.n	80099a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3324      	adds	r3, #36	; 0x24
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fd3c 	bl	800a404 <xTaskRemoveFromEventList>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009992:	f000 fe11 	bl	800a5b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	3b01      	subs	r3, #1
 800999a:	b2db      	uxtb	r3, r3
 800999c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800999e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dce9      	bgt.n	800997a <prvUnlockQueue+0x16>
 80099a6:	e000      	b.n	80099aa <prvUnlockQueue+0x46>
					break;
 80099a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	22ff      	movs	r2, #255	; 0xff
 80099ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80099b2:	f001 fc7f 	bl	800b2b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099b6:	f001 fc4d 	bl	800b254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099c2:	e011      	b.n	80099e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d012      	beq.n	80099f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3310      	adds	r3, #16
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 fd17 	bl	800a404 <xTaskRemoveFromEventList>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099dc:	f000 fdec 	bl	800a5b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	dce9      	bgt.n	80099c4 <prvUnlockQueue+0x60>
 80099f0:	e000      	b.n	80099f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	22ff      	movs	r2, #255	; 0xff
 80099f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80099fc:	f001 fc5a 	bl	800b2b4 <vPortExitCritical>
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a10:	f001 fc20 	bl	800b254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d102      	bne.n	8009a22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	e001      	b.n	8009a26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a26:	f001 fc45 	bl	800b2b4 <vPortExitCritical>

	return xReturn;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a3c:	f001 fc0a 	bl	800b254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d102      	bne.n	8009a52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	e001      	b.n	8009a56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a56:	f001 fc2d 	bl	800b2b4 <vPortExitCritical>

	return xReturn;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60fb      	str	r3, [r7, #12]
 8009a72:	e014      	b.n	8009a9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009a74:	4a0f      	ldr	r2, [pc, #60]	; (8009ab4 <vQueueAddToRegistry+0x50>)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10b      	bne.n	8009a98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009a80:	490c      	ldr	r1, [pc, #48]	; (8009ab4 <vQueueAddToRegistry+0x50>)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	683a      	ldr	r2, [r7, #0]
 8009a86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009a8a:	4a0a      	ldr	r2, [pc, #40]	; (8009ab4 <vQueueAddToRegistry+0x50>)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	00db      	lsls	r3, r3, #3
 8009a90:	4413      	add	r3, r2
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009a96:	e006      	b.n	8009aa6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	60fb      	str	r3, [r7, #12]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2b07      	cmp	r3, #7
 8009aa2:	d9e7      	bls.n	8009a74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009aa4:	bf00      	nop
 8009aa6:	bf00      	nop
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
 8009ab2:	bf00      	nop
 8009ab4:	24000dd8 	.word	0x24000dd8

08009ab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b086      	sub	sp, #24
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ac8:	f001 fbc4 	bl	800b254 <vPortEnterCritical>
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ad2:	b25b      	sxtb	r3, r3
 8009ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ad8:	d103      	bne.n	8009ae2 <vQueueWaitForMessageRestricted+0x2a>
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ae8:	b25b      	sxtb	r3, r3
 8009aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aee:	d103      	bne.n	8009af8 <vQueueWaitForMessageRestricted+0x40>
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009af8:	f001 fbdc 	bl	800b2b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d106      	bne.n	8009b12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	3324      	adds	r3, #36	; 0x24
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	68b9      	ldr	r1, [r7, #8]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 fc4d 	bl	800a3ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b12:	6978      	ldr	r0, [r7, #20]
 8009b14:	f7ff ff26 	bl	8009964 <prvUnlockQueue>
	}
 8009b18:	bf00      	nop
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08e      	sub	sp, #56	; 0x38
 8009b24:	af04      	add	r7, sp, #16
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
 8009b2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10a      	bne.n	8009b4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	623b      	str	r3, [r7, #32]
}
 8009b46:	bf00      	nop
 8009b48:	e7fe      	b.n	8009b48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10a      	bne.n	8009b66 <xTaskCreateStatic+0x46>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	61fb      	str	r3, [r7, #28]
}
 8009b62:	bf00      	nop
 8009b64:	e7fe      	b.n	8009b64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009b66:	23b4      	movs	r3, #180	; 0xb4
 8009b68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2bb4      	cmp	r3, #180	; 0xb4
 8009b6e:	d00a      	beq.n	8009b86 <xTaskCreateStatic+0x66>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	61bb      	str	r3, [r7, #24]
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009b86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d01e      	beq.n	8009bcc <xTaskCreateStatic+0xac>
 8009b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d01b      	beq.n	8009bcc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba0:	2202      	movs	r2, #2
 8009ba2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	9303      	str	r3, [sp, #12]
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	9302      	str	r3, [sp, #8]
 8009bae:	f107 0314 	add.w	r3, r7, #20
 8009bb2:	9301      	str	r3, [sp, #4]
 8009bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	687a      	ldr	r2, [r7, #4]
 8009bbc:	68b9      	ldr	r1, [r7, #8]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 f850 	bl	8009c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009bc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009bc6:	f000 f8eb 	bl	8009da0 <prvAddNewTaskToReadyList>
 8009bca:	e001      	b.n	8009bd0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009bd0:	697b      	ldr	r3, [r7, #20]
	}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3728      	adds	r7, #40	; 0x28
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b08c      	sub	sp, #48	; 0x30
 8009bde:	af04      	add	r7, sp, #16
 8009be0:	60f8      	str	r0, [r7, #12]
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	603b      	str	r3, [r7, #0]
 8009be6:	4613      	mov	r3, r2
 8009be8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009bea:	88fb      	ldrh	r3, [r7, #6]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f001 fc52 	bl	800b498 <pvPortMalloc>
 8009bf4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00e      	beq.n	8009c1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009bfc:	20b4      	movs	r0, #180	; 0xb4
 8009bfe:	f001 fc4b 	bl	800b498 <pvPortMalloc>
 8009c02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d003      	beq.n	8009c12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	631a      	str	r2, [r3, #48]	; 0x30
 8009c10:	e005      	b.n	8009c1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c12:	6978      	ldr	r0, [r7, #20]
 8009c14:	f001 fd0c 	bl	800b630 <vPortFree>
 8009c18:	e001      	b.n	8009c1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d017      	beq.n	8009c54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	2200      	movs	r2, #0
 8009c28:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c2c:	88fa      	ldrh	r2, [r7, #6]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	9303      	str	r3, [sp, #12]
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	9302      	str	r3, [sp, #8]
 8009c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	68b9      	ldr	r1, [r7, #8]
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f000 f80e 	bl	8009c64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c48:	69f8      	ldr	r0, [r7, #28]
 8009c4a:	f000 f8a9 	bl	8009da0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	61bb      	str	r3, [r7, #24]
 8009c52:	e002      	b.n	8009c5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009c54:	f04f 33ff 	mov.w	r3, #4294967295
 8009c58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009c5a:	69bb      	ldr	r3, [r7, #24]
	}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b088      	sub	sp, #32
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
 8009c70:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009c7c:	440b      	add	r3, r1
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	4413      	add	r3, r2
 8009c82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009c84:	69bb      	ldr	r3, [r7, #24]
 8009c86:	f023 0307 	bic.w	r3, r3, #7
 8009c8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	f003 0307 	and.w	r3, r3, #7
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00a      	beq.n	8009cac <prvInitialiseNewTask+0x48>
	__asm volatile
 8009c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	617b      	str	r3, [r7, #20]
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d01f      	beq.n	8009cf2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	61fb      	str	r3, [r7, #28]
 8009cb6:	e012      	b.n	8009cde <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	69fb      	ldr	r3, [r7, #28]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	7819      	ldrb	r1, [r3, #0]
 8009cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	3334      	adds	r3, #52	; 0x34
 8009cc8:	460a      	mov	r2, r1
 8009cca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d006      	beq.n	8009ce6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	61fb      	str	r3, [r7, #28]
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	2b0f      	cmp	r3, #15
 8009ce2:	d9e9      	bls.n	8009cb8 <prvInitialiseNewTask+0x54>
 8009ce4:	e000      	b.n	8009ce8 <prvInitialiseNewTask+0x84>
			{
				break;
 8009ce6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009cf0:	e003      	b.n	8009cfa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfc:	2b06      	cmp	r3, #6
 8009cfe:	d901      	bls.n	8009d04 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d00:	2306      	movs	r3, #6
 8009d02:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d08:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d0e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d12:	2200      	movs	r2, #0
 8009d14:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	3304      	adds	r3, #4
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7ff f983 	bl	8009026 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	3318      	adds	r3, #24
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff f97e 	bl	8009026 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d32:	f1c3 0207 	rsb	r2, r3, #7
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d3e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	334c      	adds	r3, #76	; 0x4c
 8009d54:	2260      	movs	r2, #96	; 0x60
 8009d56:	2100      	movs	r1, #0
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f001 fdbb 	bl	800b8d4 <memset>
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	4a0c      	ldr	r2, [pc, #48]	; (8009d94 <prvInitialiseNewTask+0x130>)
 8009d62:	651a      	str	r2, [r3, #80]	; 0x50
 8009d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d66:	4a0c      	ldr	r2, [pc, #48]	; (8009d98 <prvInitialiseNewTask+0x134>)
 8009d68:	655a      	str	r2, [r3, #84]	; 0x54
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	4a0b      	ldr	r2, [pc, #44]	; (8009d9c <prvInitialiseNewTask+0x138>)
 8009d6e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d70:	683a      	ldr	r2, [r7, #0]
 8009d72:	68f9      	ldr	r1, [r7, #12]
 8009d74:	69b8      	ldr	r0, [r7, #24]
 8009d76:	f001 f941 	bl	800affc <pxPortInitialiseStack>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d002      	beq.n	8009d8c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d8a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d8c:	bf00      	nop
 8009d8e:	3720      	adds	r7, #32
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	0800bb40 	.word	0x0800bb40
 8009d98:	0800bb60 	.word	0x0800bb60
 8009d9c:	0800bb20 	.word	0x0800bb20

08009da0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009da8:	f001 fa54 	bl	800b254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009dac:	4b2a      	ldr	r3, [pc, #168]	; (8009e58 <prvAddNewTaskToReadyList+0xb8>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3301      	adds	r3, #1
 8009db2:	4a29      	ldr	r2, [pc, #164]	; (8009e58 <prvAddNewTaskToReadyList+0xb8>)
 8009db4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009db6:	4b29      	ldr	r3, [pc, #164]	; (8009e5c <prvAddNewTaskToReadyList+0xbc>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d109      	bne.n	8009dd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009dbe:	4a27      	ldr	r2, [pc, #156]	; (8009e5c <prvAddNewTaskToReadyList+0xbc>)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009dc4:	4b24      	ldr	r3, [pc, #144]	; (8009e58 <prvAddNewTaskToReadyList+0xb8>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d110      	bne.n	8009dee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009dcc:	f000 fc18 	bl	800a600 <prvInitialiseTaskLists>
 8009dd0:	e00d      	b.n	8009dee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009dd2:	4b23      	ldr	r3, [pc, #140]	; (8009e60 <prvAddNewTaskToReadyList+0xc0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d109      	bne.n	8009dee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009dda:	4b20      	ldr	r3, [pc, #128]	; (8009e5c <prvAddNewTaskToReadyList+0xbc>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d802      	bhi.n	8009dee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009de8:	4a1c      	ldr	r2, [pc, #112]	; (8009e5c <prvAddNewTaskToReadyList+0xbc>)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009dee:	4b1d      	ldr	r3, [pc, #116]	; (8009e64 <prvAddNewTaskToReadyList+0xc4>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3301      	adds	r3, #1
 8009df4:	4a1b      	ldr	r2, [pc, #108]	; (8009e64 <prvAddNewTaskToReadyList+0xc4>)
 8009df6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	409a      	lsls	r2, r3
 8009e00:	4b19      	ldr	r3, [pc, #100]	; (8009e68 <prvAddNewTaskToReadyList+0xc8>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	4a18      	ldr	r2, [pc, #96]	; (8009e68 <prvAddNewTaskToReadyList+0xc8>)
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0e:	4613      	mov	r3, r2
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	4a15      	ldr	r2, [pc, #84]	; (8009e6c <prvAddNewTaskToReadyList+0xcc>)
 8009e18:	441a      	add	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	3304      	adds	r3, #4
 8009e1e:	4619      	mov	r1, r3
 8009e20:	4610      	mov	r0, r2
 8009e22:	f7ff f90d 	bl	8009040 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e26:	f001 fa45 	bl	800b2b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e2a:	4b0d      	ldr	r3, [pc, #52]	; (8009e60 <prvAddNewTaskToReadyList+0xc0>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00e      	beq.n	8009e50 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e32:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <prvAddNewTaskToReadyList+0xbc>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d207      	bcs.n	8009e50 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e40:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <prvAddNewTaskToReadyList+0xd0>)
 8009e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e46:	601a      	str	r2, [r3, #0]
 8009e48:	f3bf 8f4f 	dsb	sy
 8009e4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e50:	bf00      	nop
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	24000f18 	.word	0x24000f18
 8009e5c:	24000e18 	.word	0x24000e18
 8009e60:	24000f24 	.word	0x24000f24
 8009e64:	24000f34 	.word	0x24000f34
 8009e68:	24000f20 	.word	0x24000f20
 8009e6c:	24000e1c 	.word	0x24000e1c
 8009e70:	e000ed04 	.word	0xe000ed04

08009e74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d017      	beq.n	8009eb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e86:	4b13      	ldr	r3, [pc, #76]	; (8009ed4 <vTaskDelay+0x60>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00a      	beq.n	8009ea4 <vTaskDelay+0x30>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	60bb      	str	r3, [r7, #8]
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ea4:	f000 f88a 	bl	8009fbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fd0e 	bl	800a8cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009eb0:	f000 f892 	bl	8009fd8 <xTaskResumeAll>
 8009eb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d107      	bne.n	8009ecc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009ebc:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <vTaskDelay+0x64>)
 8009ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec2:	601a      	str	r2, [r3, #0]
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ecc:	bf00      	nop
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	24000f40 	.word	0x24000f40
 8009ed8:	e000ed04 	.word	0xe000ed04

08009edc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b08a      	sub	sp, #40	; 0x28
 8009ee0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009eea:	463a      	mov	r2, r7
 8009eec:	1d39      	adds	r1, r7, #4
 8009eee:	f107 0308 	add.w	r3, r7, #8
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7f6 fb76 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	9202      	str	r2, [sp, #8]
 8009f00:	9301      	str	r3, [sp, #4]
 8009f02:	2300      	movs	r3, #0
 8009f04:	9300      	str	r3, [sp, #0]
 8009f06:	2300      	movs	r3, #0
 8009f08:	460a      	mov	r2, r1
 8009f0a:	4924      	ldr	r1, [pc, #144]	; (8009f9c <vTaskStartScheduler+0xc0>)
 8009f0c:	4824      	ldr	r0, [pc, #144]	; (8009fa0 <vTaskStartScheduler+0xc4>)
 8009f0e:	f7ff fe07 	bl	8009b20 <xTaskCreateStatic>
 8009f12:	4603      	mov	r3, r0
 8009f14:	4a23      	ldr	r2, [pc, #140]	; (8009fa4 <vTaskStartScheduler+0xc8>)
 8009f16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f18:	4b22      	ldr	r3, [pc, #136]	; (8009fa4 <vTaskStartScheduler+0xc8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f20:	2301      	movs	r3, #1
 8009f22:	617b      	str	r3, [r7, #20]
 8009f24:	e001      	b.n	8009f2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f26:	2300      	movs	r3, #0
 8009f28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d102      	bne.n	8009f36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009f30:	f000 fd32 	bl	800a998 <xTimerCreateTimerTask>
 8009f34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d11b      	bne.n	8009f74 <vTaskStartScheduler+0x98>
	__asm volatile
 8009f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	613b      	str	r3, [r7, #16]
}
 8009f4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f50:	4b15      	ldr	r3, [pc, #84]	; (8009fa8 <vTaskStartScheduler+0xcc>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	334c      	adds	r3, #76	; 0x4c
 8009f56:	4a15      	ldr	r2, [pc, #84]	; (8009fac <vTaskStartScheduler+0xd0>)
 8009f58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f5a:	4b15      	ldr	r3, [pc, #84]	; (8009fb0 <vTaskStartScheduler+0xd4>)
 8009f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f62:	4b14      	ldr	r3, [pc, #80]	; (8009fb4 <vTaskStartScheduler+0xd8>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f68:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <vTaskStartScheduler+0xdc>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f6e:	f001 f8cf 	bl	800b110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f72:	e00e      	b.n	8009f92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7a:	d10a      	bne.n	8009f92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	60fb      	str	r3, [r7, #12]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <vTaskStartScheduler+0xb4>
}
 8009f92:	bf00      	nop
 8009f94:	3718      	adds	r7, #24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	0800bad0 	.word	0x0800bad0
 8009fa0:	0800a5d1 	.word	0x0800a5d1
 8009fa4:	24000f3c 	.word	0x24000f3c
 8009fa8:	24000e18 	.word	0x24000e18
 8009fac:	24000014 	.word	0x24000014
 8009fb0:	24000f38 	.word	0x24000f38
 8009fb4:	24000f24 	.word	0x24000f24
 8009fb8:	24000f1c 	.word	0x24000f1c

08009fbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009fc0:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <vTaskSuspendAll+0x18>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	4a03      	ldr	r2, [pc, #12]	; (8009fd4 <vTaskSuspendAll+0x18>)
 8009fc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009fca:	bf00      	nop
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	24000f40 	.word	0x24000f40

08009fd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009fe6:	4b41      	ldr	r3, [pc, #260]	; (800a0ec <xTaskResumeAll+0x114>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d10a      	bne.n	800a004 <xTaskResumeAll+0x2c>
	__asm volatile
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	603b      	str	r3, [r7, #0]
}
 800a000:	bf00      	nop
 800a002:	e7fe      	b.n	800a002 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a004:	f001 f926 	bl	800b254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a008:	4b38      	ldr	r3, [pc, #224]	; (800a0ec <xTaskResumeAll+0x114>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3b01      	subs	r3, #1
 800a00e:	4a37      	ldr	r2, [pc, #220]	; (800a0ec <xTaskResumeAll+0x114>)
 800a010:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a012:	4b36      	ldr	r3, [pc, #216]	; (800a0ec <xTaskResumeAll+0x114>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d161      	bne.n	800a0de <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a01a:	4b35      	ldr	r3, [pc, #212]	; (800a0f0 <xTaskResumeAll+0x118>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d05d      	beq.n	800a0de <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a022:	e02e      	b.n	800a082 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a024:	4b33      	ldr	r3, [pc, #204]	; (800a0f4 <xTaskResumeAll+0x11c>)
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	68db      	ldr	r3, [r3, #12]
 800a02a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3318      	adds	r3, #24
 800a030:	4618      	mov	r0, r3
 800a032:	f7ff f862 	bl	80090fa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3304      	adds	r3, #4
 800a03a:	4618      	mov	r0, r3
 800a03c:	f7ff f85d 	bl	80090fa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a044:	2201      	movs	r2, #1
 800a046:	409a      	lsls	r2, r3
 800a048:	4b2b      	ldr	r3, [pc, #172]	; (800a0f8 <xTaskResumeAll+0x120>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	4a2a      	ldr	r2, [pc, #168]	; (800a0f8 <xTaskResumeAll+0x120>)
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a056:	4613      	mov	r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4a27      	ldr	r2, [pc, #156]	; (800a0fc <xTaskResumeAll+0x124>)
 800a060:	441a      	add	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3304      	adds	r3, #4
 800a066:	4619      	mov	r1, r3
 800a068:	4610      	mov	r0, r2
 800a06a:	f7fe ffe9 	bl	8009040 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a072:	4b23      	ldr	r3, [pc, #140]	; (800a100 <xTaskResumeAll+0x128>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a078:	429a      	cmp	r2, r3
 800a07a:	d302      	bcc.n	800a082 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a07c:	4b21      	ldr	r3, [pc, #132]	; (800a104 <xTaskResumeAll+0x12c>)
 800a07e:	2201      	movs	r2, #1
 800a080:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a082:	4b1c      	ldr	r3, [pc, #112]	; (800a0f4 <xTaskResumeAll+0x11c>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1cc      	bne.n	800a024 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a090:	f000 fb58 	bl	800a744 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a094:	4b1c      	ldr	r3, [pc, #112]	; (800a108 <xTaskResumeAll+0x130>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d010      	beq.n	800a0c2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0a0:	f000 f846 	bl	800a130 <xTaskIncrementTick>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a0aa:	4b16      	ldr	r3, [pc, #88]	; (800a104 <xTaskResumeAll+0x12c>)
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1f1      	bne.n	800a0a0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a0bc:	4b12      	ldr	r3, [pc, #72]	; (800a108 <xTaskResumeAll+0x130>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a0c2:	4b10      	ldr	r3, [pc, #64]	; (800a104 <xTaskResumeAll+0x12c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d009      	beq.n	800a0de <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a0ce:	4b0f      	ldr	r3, [pc, #60]	; (800a10c <xTaskResumeAll+0x134>)
 800a0d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d4:	601a      	str	r2, [r3, #0]
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0de:	f001 f8e9 	bl	800b2b4 <vPortExitCritical>

	return xAlreadyYielded;
 800a0e2:	68bb      	ldr	r3, [r7, #8]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	24000f40 	.word	0x24000f40
 800a0f0:	24000f18 	.word	0x24000f18
 800a0f4:	24000ed8 	.word	0x24000ed8
 800a0f8:	24000f20 	.word	0x24000f20
 800a0fc:	24000e1c 	.word	0x24000e1c
 800a100:	24000e18 	.word	0x24000e18
 800a104:	24000f2c 	.word	0x24000f2c
 800a108:	24000f28 	.word	0x24000f28
 800a10c:	e000ed04 	.word	0xe000ed04

0800a110 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a116:	4b05      	ldr	r3, [pc, #20]	; (800a12c <xTaskGetTickCount+0x1c>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a11c:	687b      	ldr	r3, [r7, #4]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	24000f1c 	.word	0x24000f1c

0800a130 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a136:	2300      	movs	r3, #0
 800a138:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a13a:	4b4e      	ldr	r3, [pc, #312]	; (800a274 <xTaskIncrementTick+0x144>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f040 808e 	bne.w	800a260 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a144:	4b4c      	ldr	r3, [pc, #304]	; (800a278 <xTaskIncrementTick+0x148>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	3301      	adds	r3, #1
 800a14a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a14c:	4a4a      	ldr	r2, [pc, #296]	; (800a278 <xTaskIncrementTick+0x148>)
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d120      	bne.n	800a19a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a158:	4b48      	ldr	r3, [pc, #288]	; (800a27c <xTaskIncrementTick+0x14c>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d00a      	beq.n	800a178 <xTaskIncrementTick+0x48>
	__asm volatile
 800a162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a166:	f383 8811 	msr	BASEPRI, r3
 800a16a:	f3bf 8f6f 	isb	sy
 800a16e:	f3bf 8f4f 	dsb	sy
 800a172:	603b      	str	r3, [r7, #0]
}
 800a174:	bf00      	nop
 800a176:	e7fe      	b.n	800a176 <xTaskIncrementTick+0x46>
 800a178:	4b40      	ldr	r3, [pc, #256]	; (800a27c <xTaskIncrementTick+0x14c>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	60fb      	str	r3, [r7, #12]
 800a17e:	4b40      	ldr	r3, [pc, #256]	; (800a280 <xTaskIncrementTick+0x150>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a3e      	ldr	r2, [pc, #248]	; (800a27c <xTaskIncrementTick+0x14c>)
 800a184:	6013      	str	r3, [r2, #0]
 800a186:	4a3e      	ldr	r2, [pc, #248]	; (800a280 <xTaskIncrementTick+0x150>)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	4b3d      	ldr	r3, [pc, #244]	; (800a284 <xTaskIncrementTick+0x154>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3301      	adds	r3, #1
 800a192:	4a3c      	ldr	r2, [pc, #240]	; (800a284 <xTaskIncrementTick+0x154>)
 800a194:	6013      	str	r3, [r2, #0]
 800a196:	f000 fad5 	bl	800a744 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a19a:	4b3b      	ldr	r3, [pc, #236]	; (800a288 <xTaskIncrementTick+0x158>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d348      	bcc.n	800a236 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1a4:	4b35      	ldr	r3, [pc, #212]	; (800a27c <xTaskIncrementTick+0x14c>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d104      	bne.n	800a1b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1ae:	4b36      	ldr	r3, [pc, #216]	; (800a288 <xTaskIncrementTick+0x158>)
 800a1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b4:	601a      	str	r2, [r3, #0]
					break;
 800a1b6:	e03e      	b.n	800a236 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1b8:	4b30      	ldr	r3, [pc, #192]	; (800a27c <xTaskIncrementTick+0x14c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68db      	ldr	r3, [r3, #12]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a1c8:	693a      	ldr	r2, [r7, #16]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d203      	bcs.n	800a1d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a1d0:	4a2d      	ldr	r2, [pc, #180]	; (800a288 <xTaskIncrementTick+0x158>)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a1d6:	e02e      	b.n	800a236 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	3304      	adds	r3, #4
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f7fe ff8c 	bl	80090fa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d004      	beq.n	800a1f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	3318      	adds	r3, #24
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f7fe ff83 	bl	80090fa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	409a      	lsls	r2, r3
 800a1fc:	4b23      	ldr	r3, [pc, #140]	; (800a28c <xTaskIncrementTick+0x15c>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4313      	orrs	r3, r2
 800a202:	4a22      	ldr	r2, [pc, #136]	; (800a28c <xTaskIncrementTick+0x15c>)
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20a:	4613      	mov	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4a1f      	ldr	r2, [pc, #124]	; (800a290 <xTaskIncrementTick+0x160>)
 800a214:	441a      	add	r2, r3
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	3304      	adds	r3, #4
 800a21a:	4619      	mov	r1, r3
 800a21c:	4610      	mov	r0, r2
 800a21e:	f7fe ff0f 	bl	8009040 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a226:	4b1b      	ldr	r3, [pc, #108]	; (800a294 <xTaskIncrementTick+0x164>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d3b9      	bcc.n	800a1a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a230:	2301      	movs	r3, #1
 800a232:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a234:	e7b6      	b.n	800a1a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a236:	4b17      	ldr	r3, [pc, #92]	; (800a294 <xTaskIncrementTick+0x164>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a23c:	4914      	ldr	r1, [pc, #80]	; (800a290 <xTaskIncrementTick+0x160>)
 800a23e:	4613      	mov	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	440b      	add	r3, r1
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b01      	cmp	r3, #1
 800a24c:	d901      	bls.n	800a252 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a24e:	2301      	movs	r3, #1
 800a250:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a252:	4b11      	ldr	r3, [pc, #68]	; (800a298 <xTaskIncrementTick+0x168>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d007      	beq.n	800a26a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a25a:	2301      	movs	r3, #1
 800a25c:	617b      	str	r3, [r7, #20]
 800a25e:	e004      	b.n	800a26a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a260:	4b0e      	ldr	r3, [pc, #56]	; (800a29c <xTaskIncrementTick+0x16c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3301      	adds	r3, #1
 800a266:	4a0d      	ldr	r2, [pc, #52]	; (800a29c <xTaskIncrementTick+0x16c>)
 800a268:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a26a:	697b      	ldr	r3, [r7, #20]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3718      	adds	r7, #24
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	24000f40 	.word	0x24000f40
 800a278:	24000f1c 	.word	0x24000f1c
 800a27c:	24000ed0 	.word	0x24000ed0
 800a280:	24000ed4 	.word	0x24000ed4
 800a284:	24000f30 	.word	0x24000f30
 800a288:	24000f38 	.word	0x24000f38
 800a28c:	24000f20 	.word	0x24000f20
 800a290:	24000e1c 	.word	0x24000e1c
 800a294:	24000e18 	.word	0x24000e18
 800a298:	24000f2c 	.word	0x24000f2c
 800a29c:	24000f28 	.word	0x24000f28

0800a2a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2a6:	4b29      	ldr	r3, [pc, #164]	; (800a34c <vTaskSwitchContext+0xac>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2ae:	4b28      	ldr	r3, [pc, #160]	; (800a350 <vTaskSwitchContext+0xb0>)
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a2b4:	e044      	b.n	800a340 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a2b6:	4b26      	ldr	r3, [pc, #152]	; (800a350 <vTaskSwitchContext+0xb0>)
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2bc:	4b25      	ldr	r3, [pc, #148]	; (800a354 <vTaskSwitchContext+0xb4>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	fab3 f383 	clz	r3, r3
 800a2c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a2ca:	7afb      	ldrb	r3, [r7, #11]
 800a2cc:	f1c3 031f 	rsb	r3, r3, #31
 800a2d0:	617b      	str	r3, [r7, #20]
 800a2d2:	4921      	ldr	r1, [pc, #132]	; (800a358 <vTaskSwitchContext+0xb8>)
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	440b      	add	r3, r1
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d10a      	bne.n	800a2fc <vTaskSwitchContext+0x5c>
	__asm volatile
 800a2e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ea:	f383 8811 	msr	BASEPRI, r3
 800a2ee:	f3bf 8f6f 	isb	sy
 800a2f2:	f3bf 8f4f 	dsb	sy
 800a2f6:	607b      	str	r3, [r7, #4]
}
 800a2f8:	bf00      	nop
 800a2fa:	e7fe      	b.n	800a2fa <vTaskSwitchContext+0x5a>
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	4613      	mov	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	4a14      	ldr	r2, [pc, #80]	; (800a358 <vTaskSwitchContext+0xb8>)
 800a308:	4413      	add	r3, r2
 800a30a:	613b      	str	r3, [r7, #16]
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	685a      	ldr	r2, [r3, #4]
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	605a      	str	r2, [r3, #4]
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	3308      	adds	r3, #8
 800a31e:	429a      	cmp	r2, r3
 800a320:	d104      	bne.n	800a32c <vTaskSwitchContext+0x8c>
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	605a      	str	r2, [r3, #4]
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	4a0a      	ldr	r2, [pc, #40]	; (800a35c <vTaskSwitchContext+0xbc>)
 800a334:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a336:	4b09      	ldr	r3, [pc, #36]	; (800a35c <vTaskSwitchContext+0xbc>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	334c      	adds	r3, #76	; 0x4c
 800a33c:	4a08      	ldr	r2, [pc, #32]	; (800a360 <vTaskSwitchContext+0xc0>)
 800a33e:	6013      	str	r3, [r2, #0]
}
 800a340:	bf00      	nop
 800a342:	371c      	adds	r7, #28
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	24000f40 	.word	0x24000f40
 800a350:	24000f2c 	.word	0x24000f2c
 800a354:	24000f20 	.word	0x24000f20
 800a358:	24000e1c 	.word	0x24000e1c
 800a35c:	24000e18 	.word	0x24000e18
 800a360:	24000014 	.word	0x24000014

0800a364 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b084      	sub	sp, #16
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d10a      	bne.n	800a38a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	60fb      	str	r3, [r7, #12]
}
 800a386:	bf00      	nop
 800a388:	e7fe      	b.n	800a388 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a38a:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <vTaskPlaceOnEventList+0x44>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3318      	adds	r3, #24
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7fe fe78 	bl	8009088 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a398:	2101      	movs	r1, #1
 800a39a:	6838      	ldr	r0, [r7, #0]
 800a39c:	f000 fa96 	bl	800a8cc <prvAddCurrentTaskToDelayedList>
}
 800a3a0:	bf00      	nop
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}
 800a3a8:	24000e18 	.word	0x24000e18

0800a3ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d10a      	bne.n	800a3d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	617b      	str	r3, [r7, #20]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a3d4:	4b0a      	ldr	r3, [pc, #40]	; (800a400 <vTaskPlaceOnEventListRestricted+0x54>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3318      	adds	r3, #24
 800a3da:	4619      	mov	r1, r3
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f7fe fe2f 	bl	8009040 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a3e8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a3ee:	6879      	ldr	r1, [r7, #4]
 800a3f0:	68b8      	ldr	r0, [r7, #8]
 800a3f2:	f000 fa6b 	bl	800a8cc <prvAddCurrentTaskToDelayedList>
	}
 800a3f6:	bf00      	nop
 800a3f8:	3718      	adds	r7, #24
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	24000e18 	.word	0x24000e18

0800a404 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	68db      	ldr	r3, [r3, #12]
 800a410:	68db      	ldr	r3, [r3, #12]
 800a412:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10a      	bne.n	800a430 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	60fb      	str	r3, [r7, #12]
}
 800a42c:	bf00      	nop
 800a42e:	e7fe      	b.n	800a42e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	3318      	adds	r3, #24
 800a434:	4618      	mov	r0, r3
 800a436:	f7fe fe60 	bl	80090fa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a43a:	4b1d      	ldr	r3, [pc, #116]	; (800a4b0 <xTaskRemoveFromEventList+0xac>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d11c      	bne.n	800a47c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	3304      	adds	r3, #4
 800a446:	4618      	mov	r0, r3
 800a448:	f7fe fe57 	bl	80090fa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a450:	2201      	movs	r2, #1
 800a452:	409a      	lsls	r2, r3
 800a454:	4b17      	ldr	r3, [pc, #92]	; (800a4b4 <xTaskRemoveFromEventList+0xb0>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4313      	orrs	r3, r2
 800a45a:	4a16      	ldr	r2, [pc, #88]	; (800a4b4 <xTaskRemoveFromEventList+0xb0>)
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a462:	4613      	mov	r3, r2
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4a13      	ldr	r2, [pc, #76]	; (800a4b8 <xTaskRemoveFromEventList+0xb4>)
 800a46c:	441a      	add	r2, r3
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	3304      	adds	r3, #4
 800a472:	4619      	mov	r1, r3
 800a474:	4610      	mov	r0, r2
 800a476:	f7fe fde3 	bl	8009040 <vListInsertEnd>
 800a47a:	e005      	b.n	800a488 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	3318      	adds	r3, #24
 800a480:	4619      	mov	r1, r3
 800a482:	480e      	ldr	r0, [pc, #56]	; (800a4bc <xTaskRemoveFromEventList+0xb8>)
 800a484:	f7fe fddc 	bl	8009040 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48c:	4b0c      	ldr	r3, [pc, #48]	; (800a4c0 <xTaskRemoveFromEventList+0xbc>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a492:	429a      	cmp	r2, r3
 800a494:	d905      	bls.n	800a4a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a496:	2301      	movs	r3, #1
 800a498:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a49a:	4b0a      	ldr	r3, [pc, #40]	; (800a4c4 <xTaskRemoveFromEventList+0xc0>)
 800a49c:	2201      	movs	r2, #1
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	e001      	b.n	800a4a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a4a6:	697b      	ldr	r3, [r7, #20]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3718      	adds	r7, #24
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	24000f40 	.word	0x24000f40
 800a4b4:	24000f20 	.word	0x24000f20
 800a4b8:	24000e1c 	.word	0x24000e1c
 800a4bc:	24000ed8 	.word	0x24000ed8
 800a4c0:	24000e18 	.word	0x24000e18
 800a4c4:	24000f2c 	.word	0x24000f2c

0800a4c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a4d0:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <vTaskInternalSetTimeOutState+0x24>)
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a4d8:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <vTaskInternalSetTimeOutState+0x28>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	605a      	str	r2, [r3, #4]
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	24000f30 	.word	0x24000f30
 800a4f0:	24000f1c 	.word	0x24000f1c

0800a4f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	613b      	str	r3, [r7, #16]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10a      	bne.n	800a536 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	60fb      	str	r3, [r7, #12]
}
 800a532:	bf00      	nop
 800a534:	e7fe      	b.n	800a534 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a536:	f000 fe8d 	bl	800b254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a53a:	4b1d      	ldr	r3, [pc, #116]	; (800a5b0 <xTaskCheckForTimeOut+0xbc>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a552:	d102      	bne.n	800a55a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a554:	2300      	movs	r3, #0
 800a556:	61fb      	str	r3, [r7, #28]
 800a558:	e023      	b.n	800a5a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	4b15      	ldr	r3, [pc, #84]	; (800a5b4 <xTaskCheckForTimeOut+0xc0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	429a      	cmp	r2, r3
 800a564:	d007      	beq.n	800a576 <xTaskCheckForTimeOut+0x82>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	69ba      	ldr	r2, [r7, #24]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d302      	bcc.n	800a576 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a570:	2301      	movs	r3, #1
 800a572:	61fb      	str	r3, [r7, #28]
 800a574:	e015      	b.n	800a5a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d20b      	bcs.n	800a598 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	1ad2      	subs	r2, r2, r3
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f7ff ff9b 	bl	800a4c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a592:	2300      	movs	r3, #0
 800a594:	61fb      	str	r3, [r7, #28]
 800a596:	e004      	b.n	800a5a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	2200      	movs	r2, #0
 800a59c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a5a2:	f000 fe87 	bl	800b2b4 <vPortExitCritical>

	return xReturn;
 800a5a6:	69fb      	ldr	r3, [r7, #28]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3720      	adds	r7, #32
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	24000f1c 	.word	0x24000f1c
 800a5b4:	24000f30 	.word	0x24000f30

0800a5b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a5bc:	4b03      	ldr	r3, [pc, #12]	; (800a5cc <vTaskMissedYield+0x14>)
 800a5be:	2201      	movs	r2, #1
 800a5c0:	601a      	str	r2, [r3, #0]
}
 800a5c2:	bf00      	nop
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr
 800a5cc:	24000f2c 	.word	0x24000f2c

0800a5d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a5d8:	f000 f852 	bl	800a680 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a5dc:	4b06      	ldr	r3, [pc, #24]	; (800a5f8 <prvIdleTask+0x28>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d9f9      	bls.n	800a5d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a5e4:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <prvIdleTask+0x2c>)
 800a5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5ea:	601a      	str	r2, [r3, #0]
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a5f4:	e7f0      	b.n	800a5d8 <prvIdleTask+0x8>
 800a5f6:	bf00      	nop
 800a5f8:	24000e1c 	.word	0x24000e1c
 800a5fc:	e000ed04 	.word	0xe000ed04

0800a600 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a606:	2300      	movs	r3, #0
 800a608:	607b      	str	r3, [r7, #4]
 800a60a:	e00c      	b.n	800a626 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	4613      	mov	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4a12      	ldr	r2, [pc, #72]	; (800a660 <prvInitialiseTaskLists+0x60>)
 800a618:	4413      	add	r3, r2
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe fce3 	bl	8008fe6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	3301      	adds	r3, #1
 800a624:	607b      	str	r3, [r7, #4]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b06      	cmp	r3, #6
 800a62a:	d9ef      	bls.n	800a60c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a62c:	480d      	ldr	r0, [pc, #52]	; (800a664 <prvInitialiseTaskLists+0x64>)
 800a62e:	f7fe fcda 	bl	8008fe6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a632:	480d      	ldr	r0, [pc, #52]	; (800a668 <prvInitialiseTaskLists+0x68>)
 800a634:	f7fe fcd7 	bl	8008fe6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a638:	480c      	ldr	r0, [pc, #48]	; (800a66c <prvInitialiseTaskLists+0x6c>)
 800a63a:	f7fe fcd4 	bl	8008fe6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a63e:	480c      	ldr	r0, [pc, #48]	; (800a670 <prvInitialiseTaskLists+0x70>)
 800a640:	f7fe fcd1 	bl	8008fe6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a644:	480b      	ldr	r0, [pc, #44]	; (800a674 <prvInitialiseTaskLists+0x74>)
 800a646:	f7fe fcce 	bl	8008fe6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a64a:	4b0b      	ldr	r3, [pc, #44]	; (800a678 <prvInitialiseTaskLists+0x78>)
 800a64c:	4a05      	ldr	r2, [pc, #20]	; (800a664 <prvInitialiseTaskLists+0x64>)
 800a64e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a650:	4b0a      	ldr	r3, [pc, #40]	; (800a67c <prvInitialiseTaskLists+0x7c>)
 800a652:	4a05      	ldr	r2, [pc, #20]	; (800a668 <prvInitialiseTaskLists+0x68>)
 800a654:	601a      	str	r2, [r3, #0]
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	24000e1c 	.word	0x24000e1c
 800a664:	24000ea8 	.word	0x24000ea8
 800a668:	24000ebc 	.word	0x24000ebc
 800a66c:	24000ed8 	.word	0x24000ed8
 800a670:	24000eec 	.word	0x24000eec
 800a674:	24000f04 	.word	0x24000f04
 800a678:	24000ed0 	.word	0x24000ed0
 800a67c:	24000ed4 	.word	0x24000ed4

0800a680 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a686:	e019      	b.n	800a6bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a688:	f000 fde4 	bl	800b254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a68c:	4b10      	ldr	r3, [pc, #64]	; (800a6d0 <prvCheckTasksWaitingTermination+0x50>)
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3304      	adds	r3, #4
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fe fd2e 	bl	80090fa <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a69e:	4b0d      	ldr	r3, [pc, #52]	; (800a6d4 <prvCheckTasksWaitingTermination+0x54>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	4a0b      	ldr	r2, [pc, #44]	; (800a6d4 <prvCheckTasksWaitingTermination+0x54>)
 800a6a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a6a8:	4b0b      	ldr	r3, [pc, #44]	; (800a6d8 <prvCheckTasksWaitingTermination+0x58>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	4a0a      	ldr	r2, [pc, #40]	; (800a6d8 <prvCheckTasksWaitingTermination+0x58>)
 800a6b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a6b2:	f000 fdff 	bl	800b2b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f810 	bl	800a6dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a6bc:	4b06      	ldr	r3, [pc, #24]	; (800a6d8 <prvCheckTasksWaitingTermination+0x58>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1e1      	bne.n	800a688 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	24000eec 	.word	0x24000eec
 800a6d4:	24000f18 	.word	0x24000f18
 800a6d8:	24000f00 	.word	0x24000f00

0800a6dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	334c      	adds	r3, #76	; 0x4c
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f001 f909 	bl	800b900 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d108      	bne.n	800a70a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f000 ff97 	bl	800b630 <vPortFree>
				vPortFree( pxTCB );
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 ff94 	bl	800b630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a708:	e018      	b.n	800a73c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a710:	2b01      	cmp	r3, #1
 800a712:	d103      	bne.n	800a71c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 ff8b 	bl	800b630 <vPortFree>
	}
 800a71a:	e00f      	b.n	800a73c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a722:	2b02      	cmp	r3, #2
 800a724:	d00a      	beq.n	800a73c <prvDeleteTCB+0x60>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	f383 8811 	msr	BASEPRI, r3
 800a72e:	f3bf 8f6f 	isb	sy
 800a732:	f3bf 8f4f 	dsb	sy
 800a736:	60fb      	str	r3, [r7, #12]
}
 800a738:	bf00      	nop
 800a73a:	e7fe      	b.n	800a73a <prvDeleteTCB+0x5e>
	}
 800a73c:	bf00      	nop
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a74a:	4b0c      	ldr	r3, [pc, #48]	; (800a77c <prvResetNextTaskUnblockTime+0x38>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d104      	bne.n	800a75e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a754:	4b0a      	ldr	r3, [pc, #40]	; (800a780 <prvResetNextTaskUnblockTime+0x3c>)
 800a756:	f04f 32ff 	mov.w	r2, #4294967295
 800a75a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a75c:	e008      	b.n	800a770 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a75e:	4b07      	ldr	r3, [pc, #28]	; (800a77c <prvResetNextTaskUnblockTime+0x38>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	4a04      	ldr	r2, [pc, #16]	; (800a780 <prvResetNextTaskUnblockTime+0x3c>)
 800a76e:	6013      	str	r3, [r2, #0]
}
 800a770:	bf00      	nop
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr
 800a77c:	24000ed0 	.word	0x24000ed0
 800a780:	24000f38 	.word	0x24000f38

0800a784 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a78a:	4b0b      	ldr	r3, [pc, #44]	; (800a7b8 <xTaskGetSchedulerState+0x34>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d102      	bne.n	800a798 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a792:	2301      	movs	r3, #1
 800a794:	607b      	str	r3, [r7, #4]
 800a796:	e008      	b.n	800a7aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a798:	4b08      	ldr	r3, [pc, #32]	; (800a7bc <xTaskGetSchedulerState+0x38>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d102      	bne.n	800a7a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a7a0:	2302      	movs	r3, #2
 800a7a2:	607b      	str	r3, [r7, #4]
 800a7a4:	e001      	b.n	800a7aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a7aa:	687b      	ldr	r3, [r7, #4]
	}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr
 800a7b8:	24000f24 	.word	0x24000f24
 800a7bc:	24000f40 	.word	0x24000f40

0800a7c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d06e      	beq.n	800a8b4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7d6:	4b3a      	ldr	r3, [pc, #232]	; (800a8c0 <xTaskPriorityDisinherit+0x100>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	693a      	ldr	r2, [r7, #16]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d00a      	beq.n	800a7f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	60fb      	str	r3, [r7, #12]
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d10a      	bne.n	800a814 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	60bb      	str	r3, [r7, #8]
}
 800a810:	bf00      	nop
 800a812:	e7fe      	b.n	800a812 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a818:	1e5a      	subs	r2, r3, #1
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a826:	429a      	cmp	r2, r3
 800a828:	d044      	beq.n	800a8b4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d140      	bne.n	800a8b4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	3304      	adds	r3, #4
 800a836:	4618      	mov	r0, r3
 800a838:	f7fe fc5f 	bl	80090fa <uxListRemove>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d115      	bne.n	800a86e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a846:	491f      	ldr	r1, [pc, #124]	; (800a8c4 <xTaskPriorityDisinherit+0x104>)
 800a848:	4613      	mov	r3, r2
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	440b      	add	r3, r1
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10a      	bne.n	800a86e <xTaskPriorityDisinherit+0xae>
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85c:	2201      	movs	r2, #1
 800a85e:	fa02 f303 	lsl.w	r3, r2, r3
 800a862:	43da      	mvns	r2, r3
 800a864:	4b18      	ldr	r3, [pc, #96]	; (800a8c8 <xTaskPriorityDisinherit+0x108>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	4013      	ands	r3, r2
 800a86a:	4a17      	ldr	r2, [pc, #92]	; (800a8c8 <xTaskPriorityDisinherit+0x108>)
 800a86c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87a:	f1c3 0207 	rsb	r2, r3, #7
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a886:	2201      	movs	r2, #1
 800a888:	409a      	lsls	r2, r3
 800a88a:	4b0f      	ldr	r3, [pc, #60]	; (800a8c8 <xTaskPriorityDisinherit+0x108>)
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4313      	orrs	r3, r2
 800a890:	4a0d      	ldr	r2, [pc, #52]	; (800a8c8 <xTaskPriorityDisinherit+0x108>)
 800a892:	6013      	str	r3, [r2, #0]
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a898:	4613      	mov	r3, r2
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4a08      	ldr	r2, [pc, #32]	; (800a8c4 <xTaskPriorityDisinherit+0x104>)
 800a8a2:	441a      	add	r2, r3
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4610      	mov	r0, r2
 800a8ac:	f7fe fbc8 	bl	8009040 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8b4:	697b      	ldr	r3, [r7, #20]
	}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3718      	adds	r7, #24
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	24000e18 	.word	0x24000e18
 800a8c4:	24000e1c 	.word	0x24000e1c
 800a8c8:	24000f20 	.word	0x24000f20

0800a8cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b084      	sub	sp, #16
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a8d6:	4b29      	ldr	r3, [pc, #164]	; (800a97c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8dc:	4b28      	ldr	r3, [pc, #160]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fe fc09 	bl	80090fa <uxListRemove>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d10b      	bne.n	800a906 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a8ee:	4b24      	ldr	r3, [pc, #144]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8fa:	43da      	mvns	r2, r3
 800a8fc:	4b21      	ldr	r3, [pc, #132]	; (800a984 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4013      	ands	r3, r2
 800a902:	4a20      	ldr	r2, [pc, #128]	; (800a984 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a904:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a90c:	d10a      	bne.n	800a924 <prvAddCurrentTaskToDelayedList+0x58>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d007      	beq.n	800a924 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a914:	4b1a      	ldr	r3, [pc, #104]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	3304      	adds	r3, #4
 800a91a:	4619      	mov	r1, r3
 800a91c:	481a      	ldr	r0, [pc, #104]	; (800a988 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a91e:	f7fe fb8f 	bl	8009040 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a922:	e026      	b.n	800a972 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4413      	add	r3, r2
 800a92a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a92c:	4b14      	ldr	r3, [pc, #80]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d209      	bcs.n	800a950 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a93c:	4b13      	ldr	r3, [pc, #76]	; (800a98c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	4b0f      	ldr	r3, [pc, #60]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3304      	adds	r3, #4
 800a946:	4619      	mov	r1, r3
 800a948:	4610      	mov	r0, r2
 800a94a:	f7fe fb9d 	bl	8009088 <vListInsert>
}
 800a94e:	e010      	b.n	800a972 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a950:	4b0f      	ldr	r3, [pc, #60]	; (800a990 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	4b0a      	ldr	r3, [pc, #40]	; (800a980 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3304      	adds	r3, #4
 800a95a:	4619      	mov	r1, r3
 800a95c:	4610      	mov	r0, r2
 800a95e:	f7fe fb93 	bl	8009088 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a962:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d202      	bcs.n	800a972 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a96c:	4a09      	ldr	r2, [pc, #36]	; (800a994 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	6013      	str	r3, [r2, #0]
}
 800a972:	bf00      	nop
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	24000f1c 	.word	0x24000f1c
 800a980:	24000e18 	.word	0x24000e18
 800a984:	24000f20 	.word	0x24000f20
 800a988:	24000f04 	.word	0x24000f04
 800a98c:	24000ed4 	.word	0x24000ed4
 800a990:	24000ed0 	.word	0x24000ed0
 800a994:	24000f38 	.word	0x24000f38

0800a998 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08a      	sub	sp, #40	; 0x28
 800a99c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a9a2:	f000 faeb 	bl	800af7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a9a6:	4b1c      	ldr	r3, [pc, #112]	; (800aa18 <xTimerCreateTimerTask+0x80>)
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d021      	beq.n	800a9f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a9b6:	1d3a      	adds	r2, r7, #4
 800a9b8:	f107 0108 	add.w	r1, r7, #8
 800a9bc:	f107 030c 	add.w	r3, r7, #12
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7f5 fe29 	bl	8000618 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	9202      	str	r2, [sp, #8]
 800a9ce:	9301      	str	r3, [sp, #4]
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	460a      	mov	r2, r1
 800a9d8:	4910      	ldr	r1, [pc, #64]	; (800aa1c <xTimerCreateTimerTask+0x84>)
 800a9da:	4811      	ldr	r0, [pc, #68]	; (800aa20 <xTimerCreateTimerTask+0x88>)
 800a9dc:	f7ff f8a0 	bl	8009b20 <xTaskCreateStatic>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	4a10      	ldr	r2, [pc, #64]	; (800aa24 <xTimerCreateTimerTask+0x8c>)
 800a9e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a9e6:	4b0f      	ldr	r3, [pc, #60]	; (800aa24 <xTimerCreateTimerTask+0x8c>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10a      	bne.n	800aa0e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	613b      	str	r3, [r7, #16]
}
 800aa0a:	bf00      	nop
 800aa0c:	e7fe      	b.n	800aa0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa0e:	697b      	ldr	r3, [r7, #20]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3718      	adds	r7, #24
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	24000f74 	.word	0x24000f74
 800aa1c:	0800bad8 	.word	0x0800bad8
 800aa20:	0800ab5d 	.word	0x0800ab5d
 800aa24:	24000f78 	.word	0x24000f78

0800aa28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	; 0x28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
 800aa34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aa36:	2300      	movs	r3, #0
 800aa38:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10a      	bne.n	800aa56 <xTimerGenericCommand+0x2e>
	__asm volatile
 800aa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	623b      	str	r3, [r7, #32]
}
 800aa52:	bf00      	nop
 800aa54:	e7fe      	b.n	800aa54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aa56:	4b1a      	ldr	r3, [pc, #104]	; (800aac0 <xTimerGenericCommand+0x98>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d02a      	beq.n	800aab4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	2b05      	cmp	r3, #5
 800aa6e:	dc18      	bgt.n	800aaa2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aa70:	f7ff fe88 	bl	800a784 <xTaskGetSchedulerState>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b02      	cmp	r3, #2
 800aa78:	d109      	bne.n	800aa8e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aa7a:	4b11      	ldr	r3, [pc, #68]	; (800aac0 <xTimerGenericCommand+0x98>)
 800aa7c:	6818      	ldr	r0, [r3, #0]
 800aa7e:	f107 0114 	add.w	r1, r7, #20
 800aa82:	2300      	movs	r3, #0
 800aa84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa86:	f7fe fc63 	bl	8009350 <xQueueGenericSend>
 800aa8a:	6278      	str	r0, [r7, #36]	; 0x24
 800aa8c:	e012      	b.n	800aab4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aa8e:	4b0c      	ldr	r3, [pc, #48]	; (800aac0 <xTimerGenericCommand+0x98>)
 800aa90:	6818      	ldr	r0, [r3, #0]
 800aa92:	f107 0114 	add.w	r1, r7, #20
 800aa96:	2300      	movs	r3, #0
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f7fe fc59 	bl	8009350 <xQueueGenericSend>
 800aa9e:	6278      	str	r0, [r7, #36]	; 0x24
 800aaa0:	e008      	b.n	800aab4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aaa2:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <xTimerGenericCommand+0x98>)
 800aaa4:	6818      	ldr	r0, [r3, #0]
 800aaa6:	f107 0114 	add.w	r1, r7, #20
 800aaaa:	2300      	movs	r3, #0
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	f7fe fd4d 	bl	800954c <xQueueGenericSendFromISR>
 800aab2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3728      	adds	r7, #40	; 0x28
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}
 800aabe:	bf00      	nop
 800aac0:	24000f74 	.word	0x24000f74

0800aac4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b088      	sub	sp, #32
 800aac8:	af02      	add	r7, sp, #8
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aace:	4b22      	ldr	r3, [pc, #136]	; (800ab58 <prvProcessExpiredTimer+0x94>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	68db      	ldr	r3, [r3, #12]
 800aad6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aad8:	697b      	ldr	r3, [r7, #20]
 800aada:	3304      	adds	r3, #4
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fe fb0c 	bl	80090fa <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aae8:	f003 0304 	and.w	r3, r3, #4
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d022      	beq.n	800ab36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	699a      	ldr	r2, [r3, #24]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	18d1      	adds	r1, r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	6978      	ldr	r0, [r7, #20]
 800aafe:	f000 f8d1 	bl	800aca4 <prvInsertTimerInActiveList>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d01f      	beq.n	800ab48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab08:	2300      	movs	r3, #0
 800ab0a:	9300      	str	r3, [sp, #0]
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	2100      	movs	r1, #0
 800ab12:	6978      	ldr	r0, [r7, #20]
 800ab14:	f7ff ff88 	bl	800aa28 <xTimerGenericCommand>
 800ab18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d113      	bne.n	800ab48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ab20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab24:	f383 8811 	msr	BASEPRI, r3
 800ab28:	f3bf 8f6f 	isb	sy
 800ab2c:	f3bf 8f4f 	dsb	sy
 800ab30:	60fb      	str	r3, [r7, #12]
}
 800ab32:	bf00      	nop
 800ab34:	e7fe      	b.n	800ab34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ab3c:	f023 0301 	bic.w	r3, r3, #1
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	6a1b      	ldr	r3, [r3, #32]
 800ab4c:	6978      	ldr	r0, [r7, #20]
 800ab4e:	4798      	blx	r3
}
 800ab50:	bf00      	nop
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	24000f6c 	.word	0x24000f6c

0800ab5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab64:	f107 0308 	add.w	r3, r7, #8
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f000 f857 	bl	800ac1c <prvGetNextExpireTime>
 800ab6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	4619      	mov	r1, r3
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f000 f803 	bl	800ab80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ab7a:	f000 f8d5 	bl	800ad28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ab7e:	e7f1      	b.n	800ab64 <prvTimerTask+0x8>

0800ab80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ab8a:	f7ff fa17 	bl	8009fbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab8e:	f107 0308 	add.w	r3, r7, #8
 800ab92:	4618      	mov	r0, r3
 800ab94:	f000 f866 	bl	800ac64 <prvSampleTimeNow>
 800ab98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d130      	bne.n	800ac02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10a      	bne.n	800abbc <prvProcessTimerOrBlockTask+0x3c>
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d806      	bhi.n	800abbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800abae:	f7ff fa13 	bl	8009fd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800abb2:	68f9      	ldr	r1, [r7, #12]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7ff ff85 	bl	800aac4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800abba:	e024      	b.n	800ac06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d008      	beq.n	800abd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800abc2:	4b13      	ldr	r3, [pc, #76]	; (800ac10 <prvProcessTimerOrBlockTask+0x90>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <prvProcessTimerOrBlockTask+0x50>
 800abcc:	2301      	movs	r3, #1
 800abce:	e000      	b.n	800abd2 <prvProcessTimerOrBlockTask+0x52>
 800abd0:	2300      	movs	r3, #0
 800abd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800abd4:	4b0f      	ldr	r3, [pc, #60]	; (800ac14 <prvProcessTimerOrBlockTask+0x94>)
 800abd6:	6818      	ldr	r0, [r3, #0]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	1ad3      	subs	r3, r2, r3
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	4619      	mov	r1, r3
 800abe2:	f7fe ff69 	bl	8009ab8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800abe6:	f7ff f9f7 	bl	8009fd8 <xTaskResumeAll>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d10a      	bne.n	800ac06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800abf0:	4b09      	ldr	r3, [pc, #36]	; (800ac18 <prvProcessTimerOrBlockTask+0x98>)
 800abf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	f3bf 8f6f 	isb	sy
}
 800ac00:	e001      	b.n	800ac06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac02:	f7ff f9e9 	bl	8009fd8 <xTaskResumeAll>
}
 800ac06:	bf00      	nop
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	24000f70 	.word	0x24000f70
 800ac14:	24000f74 	.word	0x24000f74
 800ac18:	e000ed04 	.word	0xe000ed04

0800ac1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ac24:	4b0e      	ldr	r3, [pc, #56]	; (800ac60 <prvGetNextExpireTime+0x44>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d101      	bne.n	800ac32 <prvGetNextExpireTime+0x16>
 800ac2e:	2201      	movs	r2, #1
 800ac30:	e000      	b.n	800ac34 <prvGetNextExpireTime+0x18>
 800ac32:	2200      	movs	r2, #0
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d105      	bne.n	800ac4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ac40:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <prvGetNextExpireTime+0x44>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68db      	ldr	r3, [r3, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	60fb      	str	r3, [r7, #12]
 800ac4a:	e001      	b.n	800ac50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ac50:	68fb      	ldr	r3, [r7, #12]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	24000f6c 	.word	0x24000f6c

0800ac64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ac6c:	f7ff fa50 	bl	800a110 <xTaskGetTickCount>
 800ac70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ac72:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <prvSampleTimeNow+0x3c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d205      	bcs.n	800ac88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ac7c:	f000 f91a 	bl	800aeb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	601a      	str	r2, [r3, #0]
 800ac86:	e002      	b.n	800ac8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ac8e:	4a04      	ldr	r2, [pc, #16]	; (800aca0 <prvSampleTimeNow+0x3c>)
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ac94:	68fb      	ldr	r3, [r7, #12]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
 800ac9e:	bf00      	nop
 800aca0:	24000f7c 	.word	0x24000f7c

0800aca4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
 800acb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800acb2:	2300      	movs	r3, #0
 800acb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	68ba      	ldr	r2, [r7, #8]
 800acba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800acc2:	68ba      	ldr	r2, [r7, #8]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d812      	bhi.n	800acf0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	1ad2      	subs	r2, r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	699b      	ldr	r3, [r3, #24]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d302      	bcc.n	800acde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800acd8:	2301      	movs	r3, #1
 800acda:	617b      	str	r3, [r7, #20]
 800acdc:	e01b      	b.n	800ad16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800acde:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <prvInsertTimerInActiveList+0x7c>)
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	3304      	adds	r3, #4
 800ace6:	4619      	mov	r1, r3
 800ace8:	4610      	mov	r0, r2
 800acea:	f7fe f9cd 	bl	8009088 <vListInsert>
 800acee:	e012      	b.n	800ad16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d206      	bcs.n	800ad06 <prvInsertTimerInActiveList+0x62>
 800acf8:	68ba      	ldr	r2, [r7, #8]
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d302      	bcc.n	800ad06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad00:	2301      	movs	r3, #1
 800ad02:	617b      	str	r3, [r7, #20]
 800ad04:	e007      	b.n	800ad16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad06:	4b07      	ldr	r3, [pc, #28]	; (800ad24 <prvInsertTimerInActiveList+0x80>)
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4610      	mov	r0, r2
 800ad12:	f7fe f9b9 	bl	8009088 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ad16:	697b      	ldr	r3, [r7, #20]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3718      	adds	r7, #24
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}
 800ad20:	24000f70 	.word	0x24000f70
 800ad24:	24000f6c 	.word	0x24000f6c

0800ad28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08c      	sub	sp, #48	; 0x30
 800ad2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ad2e:	e0ae      	b.n	800ae8e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f2c0 80aa 	blt.w	800ae8c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	695b      	ldr	r3, [r3, #20]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d004      	beq.n	800ad4e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	3304      	adds	r3, #4
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fe f9d6 	bl	80090fa <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad4e:	1d3b      	adds	r3, r7, #4
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7ff ff87 	bl	800ac64 <prvSampleTimeNow>
 800ad56:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2b09      	cmp	r3, #9
 800ad5c:	f200 8097 	bhi.w	800ae8e <prvProcessReceivedCommands+0x166>
 800ad60:	a201      	add	r2, pc, #4	; (adr r2, 800ad68 <prvProcessReceivedCommands+0x40>)
 800ad62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad66:	bf00      	nop
 800ad68:	0800ad91 	.word	0x0800ad91
 800ad6c:	0800ad91 	.word	0x0800ad91
 800ad70:	0800ad91 	.word	0x0800ad91
 800ad74:	0800ae05 	.word	0x0800ae05
 800ad78:	0800ae19 	.word	0x0800ae19
 800ad7c:	0800ae63 	.word	0x0800ae63
 800ad80:	0800ad91 	.word	0x0800ad91
 800ad84:	0800ad91 	.word	0x0800ad91
 800ad88:	0800ae05 	.word	0x0800ae05
 800ad8c:	0800ae19 	.word	0x0800ae19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad96:	f043 0301 	orr.w	r3, r3, #1
 800ad9a:	b2da      	uxtb	r2, r3
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada6:	699b      	ldr	r3, [r3, #24]
 800ada8:	18d1      	adds	r1, r2, r3
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6a3a      	ldr	r2, [r7, #32]
 800adae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adb0:	f7ff ff78 	bl	800aca4 <prvInsertTimerInActiveList>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d069      	beq.n	800ae8e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbc:	6a1b      	ldr	r3, [r3, #32]
 800adbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800adc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800adc8:	f003 0304 	and.w	r3, r3, #4
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d05e      	beq.n	800ae8e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800add0:	68fa      	ldr	r2, [r7, #12]
 800add2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	441a      	add	r2, r3
 800add8:	2300      	movs	r3, #0
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	2300      	movs	r3, #0
 800adde:	2100      	movs	r1, #0
 800ade0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ade2:	f7ff fe21 	bl	800aa28 <xTimerGenericCommand>
 800ade6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d14f      	bne.n	800ae8e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800adee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf2:	f383 8811 	msr	BASEPRI, r3
 800adf6:	f3bf 8f6f 	isb	sy
 800adfa:	f3bf 8f4f 	dsb	sy
 800adfe:	61bb      	str	r3, [r7, #24]
}
 800ae00:	bf00      	nop
 800ae02:	e7fe      	b.n	800ae02 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae0a:	f023 0301 	bic.w	r3, r3, #1
 800ae0e:	b2da      	uxtb	r2, r3
 800ae10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800ae16:	e03a      	b.n	800ae8e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae1e:	f043 0301 	orr.w	r3, r3, #1
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ae2a:	68fa      	ldr	r2, [r7, #12]
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ae30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10a      	bne.n	800ae4e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800ae38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3c:	f383 8811 	msr	BASEPRI, r3
 800ae40:	f3bf 8f6f 	isb	sy
 800ae44:	f3bf 8f4f 	dsb	sy
 800ae48:	617b      	str	r3, [r7, #20]
}
 800ae4a:	bf00      	nop
 800ae4c:	e7fe      	b.n	800ae4c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae50:	699a      	ldr	r2, [r3, #24]
 800ae52:	6a3b      	ldr	r3, [r7, #32]
 800ae54:	18d1      	adds	r1, r2, r3
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	6a3a      	ldr	r2, [r7, #32]
 800ae5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae5c:	f7ff ff22 	bl	800aca4 <prvInsertTimerInActiveList>
					break;
 800ae60:	e015      	b.n	800ae8e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae68:	f003 0302 	and.w	r3, r3, #2
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d103      	bne.n	800ae78 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800ae70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae72:	f000 fbdd 	bl	800b630 <vPortFree>
 800ae76:	e00a      	b.n	800ae8e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ae78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae7e:	f023 0301 	bic.w	r3, r3, #1
 800ae82:	b2da      	uxtb	r2, r3
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ae8a:	e000      	b.n	800ae8e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ae8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae8e:	4b08      	ldr	r3, [pc, #32]	; (800aeb0 <prvProcessReceivedCommands+0x188>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f107 0108 	add.w	r1, r7, #8
 800ae96:	2200      	movs	r2, #0
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7fe fbf3 	bl	8009684 <xQueueReceive>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f47f af45 	bne.w	800ad30 <prvProcessReceivedCommands+0x8>
	}
}
 800aea6:	bf00      	nop
 800aea8:	bf00      	nop
 800aeaa:	3728      	adds	r7, #40	; 0x28
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	24000f74 	.word	0x24000f74

0800aeb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aeba:	e048      	b.n	800af4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aebc:	4b2d      	ldr	r3, [pc, #180]	; (800af74 <prvSwitchTimerLists+0xc0>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aec6:	4b2b      	ldr	r3, [pc, #172]	; (800af74 <prvSwitchTimerLists+0xc0>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3304      	adds	r3, #4
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fe f910 	bl	80090fa <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aee8:	f003 0304 	and.w	r3, r3, #4
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d02e      	beq.n	800af4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	4413      	add	r3, r2
 800aef8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aefa:	68ba      	ldr	r2, [r7, #8]
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	429a      	cmp	r2, r3
 800af00:	d90e      	bls.n	800af20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af0e:	4b19      	ldr	r3, [pc, #100]	; (800af74 <prvSwitchTimerLists+0xc0>)
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	3304      	adds	r3, #4
 800af16:	4619      	mov	r1, r3
 800af18:	4610      	mov	r0, r2
 800af1a:	f7fe f8b5 	bl	8009088 <vListInsert>
 800af1e:	e016      	b.n	800af4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af20:	2300      	movs	r3, #0
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	2300      	movs	r3, #0
 800af26:	693a      	ldr	r2, [r7, #16]
 800af28:	2100      	movs	r1, #0
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f7ff fd7c 	bl	800aa28 <xTimerGenericCommand>
 800af30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d10a      	bne.n	800af4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800af38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	603b      	str	r3, [r7, #0]
}
 800af4a:	bf00      	nop
 800af4c:	e7fe      	b.n	800af4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af4e:	4b09      	ldr	r3, [pc, #36]	; (800af74 <prvSwitchTimerLists+0xc0>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d1b1      	bne.n	800aebc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800af58:	4b06      	ldr	r3, [pc, #24]	; (800af74 <prvSwitchTimerLists+0xc0>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800af5e:	4b06      	ldr	r3, [pc, #24]	; (800af78 <prvSwitchTimerLists+0xc4>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a04      	ldr	r2, [pc, #16]	; (800af74 <prvSwitchTimerLists+0xc0>)
 800af64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800af66:	4a04      	ldr	r2, [pc, #16]	; (800af78 <prvSwitchTimerLists+0xc4>)
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	6013      	str	r3, [r2, #0]
}
 800af6c:	bf00      	nop
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	24000f6c 	.word	0x24000f6c
 800af78:	24000f70 	.word	0x24000f70

0800af7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800af82:	f000 f967 	bl	800b254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800af86:	4b15      	ldr	r3, [pc, #84]	; (800afdc <prvCheckForValidListAndQueue+0x60>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d120      	bne.n	800afd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800af8e:	4814      	ldr	r0, [pc, #80]	; (800afe0 <prvCheckForValidListAndQueue+0x64>)
 800af90:	f7fe f829 	bl	8008fe6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800af94:	4813      	ldr	r0, [pc, #76]	; (800afe4 <prvCheckForValidListAndQueue+0x68>)
 800af96:	f7fe f826 	bl	8008fe6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800af9a:	4b13      	ldr	r3, [pc, #76]	; (800afe8 <prvCheckForValidListAndQueue+0x6c>)
 800af9c:	4a10      	ldr	r2, [pc, #64]	; (800afe0 <prvCheckForValidListAndQueue+0x64>)
 800af9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800afa0:	4b12      	ldr	r3, [pc, #72]	; (800afec <prvCheckForValidListAndQueue+0x70>)
 800afa2:	4a10      	ldr	r2, [pc, #64]	; (800afe4 <prvCheckForValidListAndQueue+0x68>)
 800afa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800afa6:	2300      	movs	r3, #0
 800afa8:	9300      	str	r3, [sp, #0]
 800afaa:	4b11      	ldr	r3, [pc, #68]	; (800aff0 <prvCheckForValidListAndQueue+0x74>)
 800afac:	4a11      	ldr	r2, [pc, #68]	; (800aff4 <prvCheckForValidListAndQueue+0x78>)
 800afae:	210c      	movs	r1, #12
 800afb0:	200a      	movs	r0, #10
 800afb2:	f7fe f935 	bl	8009220 <xQueueGenericCreateStatic>
 800afb6:	4603      	mov	r3, r0
 800afb8:	4a08      	ldr	r2, [pc, #32]	; (800afdc <prvCheckForValidListAndQueue+0x60>)
 800afba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800afbc:	4b07      	ldr	r3, [pc, #28]	; (800afdc <prvCheckForValidListAndQueue+0x60>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d005      	beq.n	800afd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800afc4:	4b05      	ldr	r3, [pc, #20]	; (800afdc <prvCheckForValidListAndQueue+0x60>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	490b      	ldr	r1, [pc, #44]	; (800aff8 <prvCheckForValidListAndQueue+0x7c>)
 800afca:	4618      	mov	r0, r3
 800afcc:	f7fe fd4a 	bl	8009a64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afd0:	f000 f970 	bl	800b2b4 <vPortExitCritical>
}
 800afd4:	bf00      	nop
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	24000f74 	.word	0x24000f74
 800afe0:	24000f44 	.word	0x24000f44
 800afe4:	24000f58 	.word	0x24000f58
 800afe8:	24000f6c 	.word	0x24000f6c
 800afec:	24000f70 	.word	0x24000f70
 800aff0:	24000ff8 	.word	0x24000ff8
 800aff4:	24000f80 	.word	0x24000f80
 800aff8:	0800bae0 	.word	0x0800bae0

0800affc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800affc:	b480      	push	{r7}
 800affe:	b085      	sub	sp, #20
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3b04      	subs	r3, #4
 800b00c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	3b04      	subs	r3, #4
 800b01a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	f023 0201 	bic.w	r2, r3, #1
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	3b04      	subs	r3, #4
 800b02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b02c:	4a0c      	ldr	r2, [pc, #48]	; (800b060 <pxPortInitialiseStack+0x64>)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3b14      	subs	r3, #20
 800b036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	3b04      	subs	r3, #4
 800b042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f06f 0202 	mvn.w	r2, #2
 800b04a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	3b20      	subs	r3, #32
 800b050:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b052:	68fb      	ldr	r3, [r7, #12]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3714      	adds	r7, #20
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr
 800b060:	0800b065 	.word	0x0800b065

0800b064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b06a:	2300      	movs	r3, #0
 800b06c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b06e:	4b12      	ldr	r3, [pc, #72]	; (800b0b8 <prvTaskExitError+0x54>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b076:	d00a      	beq.n	800b08e <prvTaskExitError+0x2a>
	__asm volatile
 800b078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b07c:	f383 8811 	msr	BASEPRI, r3
 800b080:	f3bf 8f6f 	isb	sy
 800b084:	f3bf 8f4f 	dsb	sy
 800b088:	60fb      	str	r3, [r7, #12]
}
 800b08a:	bf00      	nop
 800b08c:	e7fe      	b.n	800b08c <prvTaskExitError+0x28>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	60bb      	str	r3, [r7, #8]
}
 800b0a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b0a2:	bf00      	nop
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d0fc      	beq.n	800b0a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b0aa:	bf00      	nop
 800b0ac:	bf00      	nop
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr
 800b0b8:	24000010 	.word	0x24000010
 800b0bc:	00000000 	.word	0x00000000

0800b0c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b0c0:	4b07      	ldr	r3, [pc, #28]	; (800b0e0 <pxCurrentTCBConst2>)
 800b0c2:	6819      	ldr	r1, [r3, #0]
 800b0c4:	6808      	ldr	r0, [r1, #0]
 800b0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ca:	f380 8809 	msr	PSP, r0
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f04f 0000 	mov.w	r0, #0
 800b0d6:	f380 8811 	msr	BASEPRI, r0
 800b0da:	4770      	bx	lr
 800b0dc:	f3af 8000 	nop.w

0800b0e0 <pxCurrentTCBConst2>:
 800b0e0:	24000e18 	.word	0x24000e18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop

0800b0e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b0e8:	4808      	ldr	r0, [pc, #32]	; (800b10c <prvPortStartFirstTask+0x24>)
 800b0ea:	6800      	ldr	r0, [r0, #0]
 800b0ec:	6800      	ldr	r0, [r0, #0]
 800b0ee:	f380 8808 	msr	MSP, r0
 800b0f2:	f04f 0000 	mov.w	r0, #0
 800b0f6:	f380 8814 	msr	CONTROL, r0
 800b0fa:	b662      	cpsie	i
 800b0fc:	b661      	cpsie	f
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	df00      	svc	0
 800b108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b10a:	bf00      	nop
 800b10c:	e000ed08 	.word	0xe000ed08

0800b110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b086      	sub	sp, #24
 800b114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b116:	4b46      	ldr	r3, [pc, #280]	; (800b230 <xPortStartScheduler+0x120>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a46      	ldr	r2, [pc, #280]	; (800b234 <xPortStartScheduler+0x124>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d10a      	bne.n	800b136 <xPortStartScheduler+0x26>
	__asm volatile
 800b120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b124:	f383 8811 	msr	BASEPRI, r3
 800b128:	f3bf 8f6f 	isb	sy
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	613b      	str	r3, [r7, #16]
}
 800b132:	bf00      	nop
 800b134:	e7fe      	b.n	800b134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b136:	4b3e      	ldr	r3, [pc, #248]	; (800b230 <xPortStartScheduler+0x120>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a3f      	ldr	r2, [pc, #252]	; (800b238 <xPortStartScheduler+0x128>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d10a      	bne.n	800b156 <xPortStartScheduler+0x46>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	60fb      	str	r3, [r7, #12]
}
 800b152:	bf00      	nop
 800b154:	e7fe      	b.n	800b154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b156:	4b39      	ldr	r3, [pc, #228]	; (800b23c <xPortStartScheduler+0x12c>)
 800b158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	22ff      	movs	r2, #255	; 0xff
 800b166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b170:	78fb      	ldrb	r3, [r7, #3]
 800b172:	b2db      	uxtb	r3, r3
 800b174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b178:	b2da      	uxtb	r2, r3
 800b17a:	4b31      	ldr	r3, [pc, #196]	; (800b240 <xPortStartScheduler+0x130>)
 800b17c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b17e:	4b31      	ldr	r3, [pc, #196]	; (800b244 <xPortStartScheduler+0x134>)
 800b180:	2207      	movs	r2, #7
 800b182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b184:	e009      	b.n	800b19a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b186:	4b2f      	ldr	r3, [pc, #188]	; (800b244 <xPortStartScheduler+0x134>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	4a2d      	ldr	r2, [pc, #180]	; (800b244 <xPortStartScheduler+0x134>)
 800b18e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b190:	78fb      	ldrb	r3, [r7, #3]
 800b192:	b2db      	uxtb	r3, r3
 800b194:	005b      	lsls	r3, r3, #1
 800b196:	b2db      	uxtb	r3, r3
 800b198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b19a:	78fb      	ldrb	r3, [r7, #3]
 800b19c:	b2db      	uxtb	r3, r3
 800b19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a2:	2b80      	cmp	r3, #128	; 0x80
 800b1a4:	d0ef      	beq.n	800b186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b1a6:	4b27      	ldr	r3, [pc, #156]	; (800b244 <xPortStartScheduler+0x134>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f1c3 0307 	rsb	r3, r3, #7
 800b1ae:	2b04      	cmp	r3, #4
 800b1b0:	d00a      	beq.n	800b1c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	60bb      	str	r3, [r7, #8]
}
 800b1c4:	bf00      	nop
 800b1c6:	e7fe      	b.n	800b1c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b1c8:	4b1e      	ldr	r3, [pc, #120]	; (800b244 <xPortStartScheduler+0x134>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	021b      	lsls	r3, r3, #8
 800b1ce:	4a1d      	ldr	r2, [pc, #116]	; (800b244 <xPortStartScheduler+0x134>)
 800b1d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b1d2:	4b1c      	ldr	r3, [pc, #112]	; (800b244 <xPortStartScheduler+0x134>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b1da:	4a1a      	ldr	r2, [pc, #104]	; (800b244 <xPortStartScheduler+0x134>)
 800b1dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b1e6:	4b18      	ldr	r3, [pc, #96]	; (800b248 <xPortStartScheduler+0x138>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a17      	ldr	r2, [pc, #92]	; (800b248 <xPortStartScheduler+0x138>)
 800b1ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b1f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b1f2:	4b15      	ldr	r3, [pc, #84]	; (800b248 <xPortStartScheduler+0x138>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a14      	ldr	r2, [pc, #80]	; (800b248 <xPortStartScheduler+0x138>)
 800b1f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b1fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b1fe:	f000 f8dd 	bl	800b3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b202:	4b12      	ldr	r3, [pc, #72]	; (800b24c <xPortStartScheduler+0x13c>)
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b208:	f000 f8fc 	bl	800b404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b20c:	4b10      	ldr	r3, [pc, #64]	; (800b250 <xPortStartScheduler+0x140>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a0f      	ldr	r2, [pc, #60]	; (800b250 <xPortStartScheduler+0x140>)
 800b212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b218:	f7ff ff66 	bl	800b0e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b21c:	f7ff f840 	bl	800a2a0 <vTaskSwitchContext>
	prvTaskExitError();
 800b220:	f7ff ff20 	bl	800b064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b224:	2300      	movs	r3, #0
}
 800b226:	4618      	mov	r0, r3
 800b228:	3718      	adds	r7, #24
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	e000ed00 	.word	0xe000ed00
 800b234:	410fc271 	.word	0x410fc271
 800b238:	410fc270 	.word	0x410fc270
 800b23c:	e000e400 	.word	0xe000e400
 800b240:	24001040 	.word	0x24001040
 800b244:	24001044 	.word	0x24001044
 800b248:	e000ed20 	.word	0xe000ed20
 800b24c:	24000010 	.word	0x24000010
 800b250:	e000ef34 	.word	0xe000ef34

0800b254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
	__asm volatile
 800b25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25e:	f383 8811 	msr	BASEPRI, r3
 800b262:	f3bf 8f6f 	isb	sy
 800b266:	f3bf 8f4f 	dsb	sy
 800b26a:	607b      	str	r3, [r7, #4]
}
 800b26c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b26e:	4b0f      	ldr	r3, [pc, #60]	; (800b2ac <vPortEnterCritical+0x58>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3301      	adds	r3, #1
 800b274:	4a0d      	ldr	r2, [pc, #52]	; (800b2ac <vPortEnterCritical+0x58>)
 800b276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b278:	4b0c      	ldr	r3, [pc, #48]	; (800b2ac <vPortEnterCritical+0x58>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	d10f      	bne.n	800b2a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b280:	4b0b      	ldr	r3, [pc, #44]	; (800b2b0 <vPortEnterCritical+0x5c>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00a      	beq.n	800b2a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28e:	f383 8811 	msr	BASEPRI, r3
 800b292:	f3bf 8f6f 	isb	sy
 800b296:	f3bf 8f4f 	dsb	sy
 800b29a:	603b      	str	r3, [r7, #0]
}
 800b29c:	bf00      	nop
 800b29e:	e7fe      	b.n	800b29e <vPortEnterCritical+0x4a>
	}
}
 800b2a0:	bf00      	nop
 800b2a2:	370c      	adds	r7, #12
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	24000010 	.word	0x24000010
 800b2b0:	e000ed04 	.word	0xe000ed04

0800b2b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b2ba:	4b12      	ldr	r3, [pc, #72]	; (800b304 <vPortExitCritical+0x50>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d10a      	bne.n	800b2d8 <vPortExitCritical+0x24>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	607b      	str	r3, [r7, #4]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	; (800b304 <vPortExitCritical+0x50>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	4a09      	ldr	r2, [pc, #36]	; (800b304 <vPortExitCritical+0x50>)
 800b2e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b2e2:	4b08      	ldr	r3, [pc, #32]	; (800b304 <vPortExitCritical+0x50>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d105      	bne.n	800b2f6 <vPortExitCritical+0x42>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	f383 8811 	msr	BASEPRI, r3
}
 800b2f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b2f6:	bf00      	nop
 800b2f8:	370c      	adds	r7, #12
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	24000010 	.word	0x24000010
	...

0800b310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b310:	f3ef 8009 	mrs	r0, PSP
 800b314:	f3bf 8f6f 	isb	sy
 800b318:	4b15      	ldr	r3, [pc, #84]	; (800b370 <pxCurrentTCBConst>)
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	f01e 0f10 	tst.w	lr, #16
 800b320:	bf08      	it	eq
 800b322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b32a:	6010      	str	r0, [r2, #0]
 800b32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b330:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b334:	f380 8811 	msr	BASEPRI, r0
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	f3bf 8f6f 	isb	sy
 800b340:	f7fe ffae 	bl	800a2a0 <vTaskSwitchContext>
 800b344:	f04f 0000 	mov.w	r0, #0
 800b348:	f380 8811 	msr	BASEPRI, r0
 800b34c:	bc09      	pop	{r0, r3}
 800b34e:	6819      	ldr	r1, [r3, #0]
 800b350:	6808      	ldr	r0, [r1, #0]
 800b352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b356:	f01e 0f10 	tst.w	lr, #16
 800b35a:	bf08      	it	eq
 800b35c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b360:	f380 8809 	msr	PSP, r0
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	4770      	bx	lr
 800b36a:	bf00      	nop
 800b36c:	f3af 8000 	nop.w

0800b370 <pxCurrentTCBConst>:
 800b370:	24000e18 	.word	0x24000e18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b374:	bf00      	nop
 800b376:	bf00      	nop

0800b378 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	607b      	str	r3, [r7, #4]
}
 800b390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b392:	f7fe fecd 	bl	800a130 <xTaskIncrementTick>
 800b396:	4603      	mov	r3, r0
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d003      	beq.n	800b3a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b39c:	4b06      	ldr	r3, [pc, #24]	; (800b3b8 <SysTick_Handler+0x40>)
 800b39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3a2:	601a      	str	r2, [r3, #0]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	f383 8811 	msr	BASEPRI, r3
}
 800b3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b3b0:	bf00      	nop
 800b3b2:	3708      	adds	r7, #8
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	e000ed04 	.word	0xe000ed04

0800b3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b3c0:	4b0b      	ldr	r3, [pc, #44]	; (800b3f0 <vPortSetupTimerInterrupt+0x34>)
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	; (800b3f4 <vPortSetupTimerInterrupt+0x38>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b3cc:	4b0a      	ldr	r3, [pc, #40]	; (800b3f8 <vPortSetupTimerInterrupt+0x3c>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a0a      	ldr	r2, [pc, #40]	; (800b3fc <vPortSetupTimerInterrupt+0x40>)
 800b3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d6:	099b      	lsrs	r3, r3, #6
 800b3d8:	4a09      	ldr	r2, [pc, #36]	; (800b400 <vPortSetupTimerInterrupt+0x44>)
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b3de:	4b04      	ldr	r3, [pc, #16]	; (800b3f0 <vPortSetupTimerInterrupt+0x34>)
 800b3e0:	2207      	movs	r2, #7
 800b3e2:	601a      	str	r2, [r3, #0]
}
 800b3e4:	bf00      	nop
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	e000e010 	.word	0xe000e010
 800b3f4:	e000e018 	.word	0xe000e018
 800b3f8:	24000000 	.word	0x24000000
 800b3fc:	10624dd3 	.word	0x10624dd3
 800b400:	e000e014 	.word	0xe000e014

0800b404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b414 <vPortEnableVFP+0x10>
 800b408:	6801      	ldr	r1, [r0, #0]
 800b40a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b40e:	6001      	str	r1, [r0, #0]
 800b410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b412:	bf00      	nop
 800b414:	e000ed88 	.word	0xe000ed88

0800b418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b41e:	f3ef 8305 	mrs	r3, IPSR
 800b422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b0f      	cmp	r3, #15
 800b428:	d914      	bls.n	800b454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b42a:	4a17      	ldr	r2, [pc, #92]	; (800b488 <vPortValidateInterruptPriority+0x70>)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4413      	add	r3, r2
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b434:	4b15      	ldr	r3, [pc, #84]	; (800b48c <vPortValidateInterruptPriority+0x74>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	7afa      	ldrb	r2, [r7, #11]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d20a      	bcs.n	800b454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	607b      	str	r3, [r7, #4]
}
 800b450:	bf00      	nop
 800b452:	e7fe      	b.n	800b452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b454:	4b0e      	ldr	r3, [pc, #56]	; (800b490 <vPortValidateInterruptPriority+0x78>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b45c:	4b0d      	ldr	r3, [pc, #52]	; (800b494 <vPortValidateInterruptPriority+0x7c>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	429a      	cmp	r2, r3
 800b462:	d90a      	bls.n	800b47a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b468:	f383 8811 	msr	BASEPRI, r3
 800b46c:	f3bf 8f6f 	isb	sy
 800b470:	f3bf 8f4f 	dsb	sy
 800b474:	603b      	str	r3, [r7, #0]
}
 800b476:	bf00      	nop
 800b478:	e7fe      	b.n	800b478 <vPortValidateInterruptPriority+0x60>
	}
 800b47a:	bf00      	nop
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	e000e3f0 	.word	0xe000e3f0
 800b48c:	24001040 	.word	0x24001040
 800b490:	e000ed0c 	.word	0xe000ed0c
 800b494:	24001044 	.word	0x24001044

0800b498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08a      	sub	sp, #40	; 0x28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b4a4:	f7fe fd8a 	bl	8009fbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b4a8:	4b5b      	ldr	r3, [pc, #364]	; (800b618 <pvPortMalloc+0x180>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d101      	bne.n	800b4b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b4b0:	f000 f920 	bl	800b6f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b4b4:	4b59      	ldr	r3, [pc, #356]	; (800b61c <pvPortMalloc+0x184>)
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f040 8093 	bne.w	800b5e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d01d      	beq.n	800b504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b4c8:	2208      	movs	r2, #8
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f003 0307 	and.w	r3, r3, #7
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d014      	beq.n	800b504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f023 0307 	bic.w	r3, r3, #7
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f003 0307 	and.w	r3, r3, #7
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00a      	beq.n	800b504 <pvPortMalloc+0x6c>
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	f383 8811 	msr	BASEPRI, r3
 800b4f6:	f3bf 8f6f 	isb	sy
 800b4fa:	f3bf 8f4f 	dsb	sy
 800b4fe:	617b      	str	r3, [r7, #20]
}
 800b500:	bf00      	nop
 800b502:	e7fe      	b.n	800b502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d06e      	beq.n	800b5e8 <pvPortMalloc+0x150>
 800b50a:	4b45      	ldr	r3, [pc, #276]	; (800b620 <pvPortMalloc+0x188>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	429a      	cmp	r2, r3
 800b512:	d869      	bhi.n	800b5e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b514:	4b43      	ldr	r3, [pc, #268]	; (800b624 <pvPortMalloc+0x18c>)
 800b516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b518:	4b42      	ldr	r3, [pc, #264]	; (800b624 <pvPortMalloc+0x18c>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b51e:	e004      	b.n	800b52a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	429a      	cmp	r2, r3
 800b532:	d903      	bls.n	800b53c <pvPortMalloc+0xa4>
 800b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d1f1      	bne.n	800b520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b53c:	4b36      	ldr	r3, [pc, #216]	; (800b618 <pvPortMalloc+0x180>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b542:	429a      	cmp	r2, r3
 800b544:	d050      	beq.n	800b5e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2208      	movs	r2, #8
 800b54c:	4413      	add	r3, r2
 800b54e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55a:	685a      	ldr	r2, [r3, #4]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	1ad2      	subs	r2, r2, r3
 800b560:	2308      	movs	r3, #8
 800b562:	005b      	lsls	r3, r3, #1
 800b564:	429a      	cmp	r2, r3
 800b566:	d91f      	bls.n	800b5a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4413      	add	r3, r2
 800b56e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	f003 0307 	and.w	r3, r3, #7
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00a      	beq.n	800b590 <pvPortMalloc+0xf8>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	613b      	str	r3, [r7, #16]
}
 800b58c:	bf00      	nop
 800b58e:	e7fe      	b.n	800b58e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	1ad2      	subs	r2, r2, r3
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b5a2:	69b8      	ldr	r0, [r7, #24]
 800b5a4:	f000 f908 	bl	800b7b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b5a8:	4b1d      	ldr	r3, [pc, #116]	; (800b620 <pvPortMalloc+0x188>)
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	4a1b      	ldr	r2, [pc, #108]	; (800b620 <pvPortMalloc+0x188>)
 800b5b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b5b6:	4b1a      	ldr	r3, [pc, #104]	; (800b620 <pvPortMalloc+0x188>)
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	4b1b      	ldr	r3, [pc, #108]	; (800b628 <pvPortMalloc+0x190>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d203      	bcs.n	800b5ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b5c2:	4b17      	ldr	r3, [pc, #92]	; (800b620 <pvPortMalloc+0x188>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a18      	ldr	r2, [pc, #96]	; (800b628 <pvPortMalloc+0x190>)
 800b5c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	685a      	ldr	r2, [r3, #4]
 800b5ce:	4b13      	ldr	r3, [pc, #76]	; (800b61c <pvPortMalloc+0x184>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	2200      	movs	r2, #0
 800b5dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b5de:	4b13      	ldr	r3, [pc, #76]	; (800b62c <pvPortMalloc+0x194>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	4a11      	ldr	r2, [pc, #68]	; (800b62c <pvPortMalloc+0x194>)
 800b5e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b5e8:	f7fe fcf6 	bl	8009fd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	f003 0307 	and.w	r3, r3, #7
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00a      	beq.n	800b60c <pvPortMalloc+0x174>
	__asm volatile
 800b5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fa:	f383 8811 	msr	BASEPRI, r3
 800b5fe:	f3bf 8f6f 	isb	sy
 800b602:	f3bf 8f4f 	dsb	sy
 800b606:	60fb      	str	r3, [r7, #12]
}
 800b608:	bf00      	nop
 800b60a:	e7fe      	b.n	800b60a <pvPortMalloc+0x172>
	return pvReturn;
 800b60c:	69fb      	ldr	r3, [r7, #28]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3728      	adds	r7, #40	; 0x28
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	24004c50 	.word	0x24004c50
 800b61c:	24004c64 	.word	0x24004c64
 800b620:	24004c54 	.word	0x24004c54
 800b624:	24004c48 	.word	0x24004c48
 800b628:	24004c58 	.word	0x24004c58
 800b62c:	24004c5c 	.word	0x24004c5c

0800b630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d04d      	beq.n	800b6de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b642:	2308      	movs	r3, #8
 800b644:	425b      	negs	r3, r3
 800b646:	697a      	ldr	r2, [r7, #20]
 800b648:	4413      	add	r3, r2
 800b64a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	4b24      	ldr	r3, [pc, #144]	; (800b6e8 <vPortFree+0xb8>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4013      	ands	r3, r2
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10a      	bne.n	800b674 <vPortFree+0x44>
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	60fb      	str	r3, [r7, #12]
}
 800b670:	bf00      	nop
 800b672:	e7fe      	b.n	800b672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00a      	beq.n	800b692 <vPortFree+0x62>
	__asm volatile
 800b67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	60bb      	str	r3, [r7, #8]
}
 800b68e:	bf00      	nop
 800b690:	e7fe      	b.n	800b690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	4b14      	ldr	r3, [pc, #80]	; (800b6e8 <vPortFree+0xb8>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4013      	ands	r3, r2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d01e      	beq.n	800b6de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d11a      	bne.n	800b6de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	685a      	ldr	r2, [r3, #4]
 800b6ac:	4b0e      	ldr	r3, [pc, #56]	; (800b6e8 <vPortFree+0xb8>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	43db      	mvns	r3, r3
 800b6b2:	401a      	ands	r2, r3
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b6b8:	f7fe fc80 	bl	8009fbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	685a      	ldr	r2, [r3, #4]
 800b6c0:	4b0a      	ldr	r3, [pc, #40]	; (800b6ec <vPortFree+0xbc>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	4a09      	ldr	r2, [pc, #36]	; (800b6ec <vPortFree+0xbc>)
 800b6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b6ca:	6938      	ldr	r0, [r7, #16]
 800b6cc:	f000 f874 	bl	800b7b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b6d0:	4b07      	ldr	r3, [pc, #28]	; (800b6f0 <vPortFree+0xc0>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	4a06      	ldr	r2, [pc, #24]	; (800b6f0 <vPortFree+0xc0>)
 800b6d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b6da:	f7fe fc7d 	bl	8009fd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b6de:	bf00      	nop
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	24004c64 	.word	0x24004c64
 800b6ec:	24004c54 	.word	0x24004c54
 800b6f0:	24004c60 	.word	0x24004c60

0800b6f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b6fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b700:	4b27      	ldr	r3, [pc, #156]	; (800b7a0 <prvHeapInit+0xac>)
 800b702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f003 0307 	and.w	r3, r3, #7
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d00c      	beq.n	800b728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	3307      	adds	r3, #7
 800b712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f023 0307 	bic.w	r3, r3, #7
 800b71a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	4a1f      	ldr	r2, [pc, #124]	; (800b7a0 <prvHeapInit+0xac>)
 800b724:	4413      	add	r3, r2
 800b726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b72c:	4a1d      	ldr	r2, [pc, #116]	; (800b7a4 <prvHeapInit+0xb0>)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b732:	4b1c      	ldr	r3, [pc, #112]	; (800b7a4 <prvHeapInit+0xb0>)
 800b734:	2200      	movs	r2, #0
 800b736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	68ba      	ldr	r2, [r7, #8]
 800b73c:	4413      	add	r3, r2
 800b73e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b740:	2208      	movs	r2, #8
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	1a9b      	subs	r3, r3, r2
 800b746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f023 0307 	bic.w	r3, r3, #7
 800b74e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	4a15      	ldr	r2, [pc, #84]	; (800b7a8 <prvHeapInit+0xb4>)
 800b754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b756:	4b14      	ldr	r3, [pc, #80]	; (800b7a8 <prvHeapInit+0xb4>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2200      	movs	r2, #0
 800b75c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b75e:	4b12      	ldr	r3, [pc, #72]	; (800b7a8 <prvHeapInit+0xb4>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	2200      	movs	r2, #0
 800b764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	1ad2      	subs	r2, r2, r3
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b774:	4b0c      	ldr	r3, [pc, #48]	; (800b7a8 <prvHeapInit+0xb4>)
 800b776:	681a      	ldr	r2, [r3, #0]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	4a0a      	ldr	r2, [pc, #40]	; (800b7ac <prvHeapInit+0xb8>)
 800b782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	4a09      	ldr	r2, [pc, #36]	; (800b7b0 <prvHeapInit+0xbc>)
 800b78a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b78c:	4b09      	ldr	r3, [pc, #36]	; (800b7b4 <prvHeapInit+0xc0>)
 800b78e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b792:	601a      	str	r2, [r3, #0]
}
 800b794:	bf00      	nop
 800b796:	3714      	adds	r7, #20
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr
 800b7a0:	24001048 	.word	0x24001048
 800b7a4:	24004c48 	.word	0x24004c48
 800b7a8:	24004c50 	.word	0x24004c50
 800b7ac:	24004c58 	.word	0x24004c58
 800b7b0:	24004c54 	.word	0x24004c54
 800b7b4:	24004c64 	.word	0x24004c64

0800b7b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b7c0:	4b28      	ldr	r3, [pc, #160]	; (800b864 <prvInsertBlockIntoFreeList+0xac>)
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	e002      	b.n	800b7cc <prvInsertBlockIntoFreeList+0x14>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	60fb      	str	r3, [r7, #12]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d8f7      	bhi.n	800b7c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	687a      	ldr	r2, [r7, #4]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d108      	bne.n	800b7fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	685b      	ldr	r3, [r3, #4]
 800b7f0:	441a      	add	r2, r3
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	441a      	add	r2, r3
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d118      	bne.n	800b840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	4b15      	ldr	r3, [pc, #84]	; (800b868 <prvInsertBlockIntoFreeList+0xb0>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	429a      	cmp	r2, r3
 800b818:	d00d      	beq.n	800b836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	685a      	ldr	r2, [r3, #4]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	441a      	add	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	e008      	b.n	800b848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b836:	4b0c      	ldr	r3, [pc, #48]	; (800b868 <prvInsertBlockIntoFreeList+0xb0>)
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	601a      	str	r2, [r3, #0]
 800b83e:	e003      	b.n	800b848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d002      	beq.n	800b856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b856:	bf00      	nop
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	24004c48 	.word	0x24004c48
 800b868:	24004c50 	.word	0x24004c50

0800b86c <__libc_init_array>:
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	4d0d      	ldr	r5, [pc, #52]	; (800b8a4 <__libc_init_array+0x38>)
 800b870:	4c0d      	ldr	r4, [pc, #52]	; (800b8a8 <__libc_init_array+0x3c>)
 800b872:	1b64      	subs	r4, r4, r5
 800b874:	10a4      	asrs	r4, r4, #2
 800b876:	2600      	movs	r6, #0
 800b878:	42a6      	cmp	r6, r4
 800b87a:	d109      	bne.n	800b890 <__libc_init_array+0x24>
 800b87c:	4d0b      	ldr	r5, [pc, #44]	; (800b8ac <__libc_init_array+0x40>)
 800b87e:	4c0c      	ldr	r4, [pc, #48]	; (800b8b0 <__libc_init_array+0x44>)
 800b880:	f000 f8f2 	bl	800ba68 <_init>
 800b884:	1b64      	subs	r4, r4, r5
 800b886:	10a4      	asrs	r4, r4, #2
 800b888:	2600      	movs	r6, #0
 800b88a:	42a6      	cmp	r6, r4
 800b88c:	d105      	bne.n	800b89a <__libc_init_array+0x2e>
 800b88e:	bd70      	pop	{r4, r5, r6, pc}
 800b890:	f855 3b04 	ldr.w	r3, [r5], #4
 800b894:	4798      	blx	r3
 800b896:	3601      	adds	r6, #1
 800b898:	e7ee      	b.n	800b878 <__libc_init_array+0xc>
 800b89a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b89e:	4798      	blx	r3
 800b8a0:	3601      	adds	r6, #1
 800b8a2:	e7f2      	b.n	800b88a <__libc_init_array+0x1e>
 800b8a4:	0800bb88 	.word	0x0800bb88
 800b8a8:	0800bb88 	.word	0x0800bb88
 800b8ac:	0800bb88 	.word	0x0800bb88
 800b8b0:	0800bb8c 	.word	0x0800bb8c

0800b8b4 <__retarget_lock_acquire_recursive>:
 800b8b4:	4770      	bx	lr

0800b8b6 <__retarget_lock_release_recursive>:
 800b8b6:	4770      	bx	lr

0800b8b8 <memcpy>:
 800b8b8:	440a      	add	r2, r1
 800b8ba:	4291      	cmp	r1, r2
 800b8bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8c0:	d100      	bne.n	800b8c4 <memcpy+0xc>
 800b8c2:	4770      	bx	lr
 800b8c4:	b510      	push	{r4, lr}
 800b8c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8ce:	4291      	cmp	r1, r2
 800b8d0:	d1f9      	bne.n	800b8c6 <memcpy+0xe>
 800b8d2:	bd10      	pop	{r4, pc}

0800b8d4 <memset>:
 800b8d4:	4402      	add	r2, r0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d100      	bne.n	800b8de <memset+0xa>
 800b8dc:	4770      	bx	lr
 800b8de:	f803 1b01 	strb.w	r1, [r3], #1
 800b8e2:	e7f9      	b.n	800b8d8 <memset+0x4>

0800b8e4 <cleanup_glue>:
 800b8e4:	b538      	push	{r3, r4, r5, lr}
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	6809      	ldr	r1, [r1, #0]
 800b8ea:	4605      	mov	r5, r0
 800b8ec:	b109      	cbz	r1, 800b8f2 <cleanup_glue+0xe>
 800b8ee:	f7ff fff9 	bl	800b8e4 <cleanup_glue>
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8fa:	f000 b869 	b.w	800b9d0 <_free_r>
	...

0800b900 <_reclaim_reent>:
 800b900:	4b2c      	ldr	r3, [pc, #176]	; (800b9b4 <_reclaim_reent+0xb4>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4283      	cmp	r3, r0
 800b906:	b570      	push	{r4, r5, r6, lr}
 800b908:	4604      	mov	r4, r0
 800b90a:	d051      	beq.n	800b9b0 <_reclaim_reent+0xb0>
 800b90c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b90e:	b143      	cbz	r3, 800b922 <_reclaim_reent+0x22>
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d14a      	bne.n	800b9ac <_reclaim_reent+0xac>
 800b916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b918:	6819      	ldr	r1, [r3, #0]
 800b91a:	b111      	cbz	r1, 800b922 <_reclaim_reent+0x22>
 800b91c:	4620      	mov	r0, r4
 800b91e:	f000 f857 	bl	800b9d0 <_free_r>
 800b922:	6961      	ldr	r1, [r4, #20]
 800b924:	b111      	cbz	r1, 800b92c <_reclaim_reent+0x2c>
 800b926:	4620      	mov	r0, r4
 800b928:	f000 f852 	bl	800b9d0 <_free_r>
 800b92c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b92e:	b111      	cbz	r1, 800b936 <_reclaim_reent+0x36>
 800b930:	4620      	mov	r0, r4
 800b932:	f000 f84d 	bl	800b9d0 <_free_r>
 800b936:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b938:	b111      	cbz	r1, 800b940 <_reclaim_reent+0x40>
 800b93a:	4620      	mov	r0, r4
 800b93c:	f000 f848 	bl	800b9d0 <_free_r>
 800b940:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b942:	b111      	cbz	r1, 800b94a <_reclaim_reent+0x4a>
 800b944:	4620      	mov	r0, r4
 800b946:	f000 f843 	bl	800b9d0 <_free_r>
 800b94a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b94c:	b111      	cbz	r1, 800b954 <_reclaim_reent+0x54>
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 f83e 	bl	800b9d0 <_free_r>
 800b954:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b956:	b111      	cbz	r1, 800b95e <_reclaim_reent+0x5e>
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 f839 	bl	800b9d0 <_free_r>
 800b95e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b960:	b111      	cbz	r1, 800b968 <_reclaim_reent+0x68>
 800b962:	4620      	mov	r0, r4
 800b964:	f000 f834 	bl	800b9d0 <_free_r>
 800b968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b96a:	b111      	cbz	r1, 800b972 <_reclaim_reent+0x72>
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 f82f 	bl	800b9d0 <_free_r>
 800b972:	69a3      	ldr	r3, [r4, #24]
 800b974:	b1e3      	cbz	r3, 800b9b0 <_reclaim_reent+0xb0>
 800b976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b978:	4620      	mov	r0, r4
 800b97a:	4798      	blx	r3
 800b97c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b97e:	b1b9      	cbz	r1, 800b9b0 <_reclaim_reent+0xb0>
 800b980:	4620      	mov	r0, r4
 800b982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b986:	f7ff bfad 	b.w	800b8e4 <cleanup_glue>
 800b98a:	5949      	ldr	r1, [r1, r5]
 800b98c:	b941      	cbnz	r1, 800b9a0 <_reclaim_reent+0xa0>
 800b98e:	3504      	adds	r5, #4
 800b990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b992:	2d80      	cmp	r5, #128	; 0x80
 800b994:	68d9      	ldr	r1, [r3, #12]
 800b996:	d1f8      	bne.n	800b98a <_reclaim_reent+0x8a>
 800b998:	4620      	mov	r0, r4
 800b99a:	f000 f819 	bl	800b9d0 <_free_r>
 800b99e:	e7ba      	b.n	800b916 <_reclaim_reent+0x16>
 800b9a0:	680e      	ldr	r6, [r1, #0]
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	f000 f814 	bl	800b9d0 <_free_r>
 800b9a8:	4631      	mov	r1, r6
 800b9aa:	e7ef      	b.n	800b98c <_reclaim_reent+0x8c>
 800b9ac:	2500      	movs	r5, #0
 800b9ae:	e7ef      	b.n	800b990 <_reclaim_reent+0x90>
 800b9b0:	bd70      	pop	{r4, r5, r6, pc}
 800b9b2:	bf00      	nop
 800b9b4:	24000014 	.word	0x24000014

0800b9b8 <__malloc_lock>:
 800b9b8:	4801      	ldr	r0, [pc, #4]	; (800b9c0 <__malloc_lock+0x8>)
 800b9ba:	f7ff bf7b 	b.w	800b8b4 <__retarget_lock_acquire_recursive>
 800b9be:	bf00      	nop
 800b9c0:	24004c68 	.word	0x24004c68

0800b9c4 <__malloc_unlock>:
 800b9c4:	4801      	ldr	r0, [pc, #4]	; (800b9cc <__malloc_unlock+0x8>)
 800b9c6:	f7ff bf76 	b.w	800b8b6 <__retarget_lock_release_recursive>
 800b9ca:	bf00      	nop
 800b9cc:	24004c68 	.word	0x24004c68

0800b9d0 <_free_r>:
 800b9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9d2:	2900      	cmp	r1, #0
 800b9d4:	d044      	beq.n	800ba60 <_free_r+0x90>
 800b9d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9da:	9001      	str	r0, [sp, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f1a1 0404 	sub.w	r4, r1, #4
 800b9e2:	bfb8      	it	lt
 800b9e4:	18e4      	addlt	r4, r4, r3
 800b9e6:	f7ff ffe7 	bl	800b9b8 <__malloc_lock>
 800b9ea:	4a1e      	ldr	r2, [pc, #120]	; (800ba64 <_free_r+0x94>)
 800b9ec:	9801      	ldr	r0, [sp, #4]
 800b9ee:	6813      	ldr	r3, [r2, #0]
 800b9f0:	b933      	cbnz	r3, 800ba00 <_free_r+0x30>
 800b9f2:	6063      	str	r3, [r4, #4]
 800b9f4:	6014      	str	r4, [r2, #0]
 800b9f6:	b003      	add	sp, #12
 800b9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9fc:	f7ff bfe2 	b.w	800b9c4 <__malloc_unlock>
 800ba00:	42a3      	cmp	r3, r4
 800ba02:	d908      	bls.n	800ba16 <_free_r+0x46>
 800ba04:	6825      	ldr	r5, [r4, #0]
 800ba06:	1961      	adds	r1, r4, r5
 800ba08:	428b      	cmp	r3, r1
 800ba0a:	bf01      	itttt	eq
 800ba0c:	6819      	ldreq	r1, [r3, #0]
 800ba0e:	685b      	ldreq	r3, [r3, #4]
 800ba10:	1949      	addeq	r1, r1, r5
 800ba12:	6021      	streq	r1, [r4, #0]
 800ba14:	e7ed      	b.n	800b9f2 <_free_r+0x22>
 800ba16:	461a      	mov	r2, r3
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	b10b      	cbz	r3, 800ba20 <_free_r+0x50>
 800ba1c:	42a3      	cmp	r3, r4
 800ba1e:	d9fa      	bls.n	800ba16 <_free_r+0x46>
 800ba20:	6811      	ldr	r1, [r2, #0]
 800ba22:	1855      	adds	r5, r2, r1
 800ba24:	42a5      	cmp	r5, r4
 800ba26:	d10b      	bne.n	800ba40 <_free_r+0x70>
 800ba28:	6824      	ldr	r4, [r4, #0]
 800ba2a:	4421      	add	r1, r4
 800ba2c:	1854      	adds	r4, r2, r1
 800ba2e:	42a3      	cmp	r3, r4
 800ba30:	6011      	str	r1, [r2, #0]
 800ba32:	d1e0      	bne.n	800b9f6 <_free_r+0x26>
 800ba34:	681c      	ldr	r4, [r3, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	6053      	str	r3, [r2, #4]
 800ba3a:	4421      	add	r1, r4
 800ba3c:	6011      	str	r1, [r2, #0]
 800ba3e:	e7da      	b.n	800b9f6 <_free_r+0x26>
 800ba40:	d902      	bls.n	800ba48 <_free_r+0x78>
 800ba42:	230c      	movs	r3, #12
 800ba44:	6003      	str	r3, [r0, #0]
 800ba46:	e7d6      	b.n	800b9f6 <_free_r+0x26>
 800ba48:	6825      	ldr	r5, [r4, #0]
 800ba4a:	1961      	adds	r1, r4, r5
 800ba4c:	428b      	cmp	r3, r1
 800ba4e:	bf04      	itt	eq
 800ba50:	6819      	ldreq	r1, [r3, #0]
 800ba52:	685b      	ldreq	r3, [r3, #4]
 800ba54:	6063      	str	r3, [r4, #4]
 800ba56:	bf04      	itt	eq
 800ba58:	1949      	addeq	r1, r1, r5
 800ba5a:	6021      	streq	r1, [r4, #0]
 800ba5c:	6054      	str	r4, [r2, #4]
 800ba5e:	e7ca      	b.n	800b9f6 <_free_r+0x26>
 800ba60:	b003      	add	sp, #12
 800ba62:	bd30      	pop	{r4, r5, pc}
 800ba64:	24004c6c 	.word	0x24004c6c

0800ba68 <_init>:
 800ba68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba6a:	bf00      	nop
 800ba6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba6e:	bc08      	pop	{r3}
 800ba70:	469e      	mov	lr, r3
 800ba72:	4770      	bx	lr

0800ba74 <_fini>:
 800ba74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba76:	bf00      	nop
 800ba78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba7a:	bc08      	pop	{r3}
 800ba7c:	469e      	mov	lr, r3
 800ba7e:	4770      	bx	lr
