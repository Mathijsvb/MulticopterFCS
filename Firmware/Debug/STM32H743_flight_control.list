
STM32H743_flight_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b730  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800b9d0  0800b9d0  0001b9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bad0  0800bad0  0001bad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bad8  0800bad8  0001bad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800badc  0800badc  0001badc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800bae0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004bf8  24000078  0800bb58  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004c70  0800bb58  00024c70  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002aa78  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046d6  00000000  00000000  0004ab1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f78  00000000  00000000  0004f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001de0  00000000  00000000  00051170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bfe5  00000000  00000000  00052f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026725  00000000  00000000  0008ef35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00184e05  00000000  00000000  000b565a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023a45f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008af4  00000000  00000000  0023a4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b9b8 	.word	0x0800b9b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800b9b8 	.word	0x0800b9b8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	24000094 	.word	0x24000094
 8000614:	24000148 	.word	0x24000148

08000618 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <vApplicationGetTimerTaskMemory+0x2c>)
 8000628:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	4a06      	ldr	r2, [pc, #24]	; (8000648 <vApplicationGetTimerTaskMemory+0x30>)
 800062e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000636:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	24000348 	.word	0x24000348
 8000648:	240003fc 	.word	0x240003fc

0800064c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b08e      	sub	sp, #56	; 0x38
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000652:	f001 fc19 	bl	8001e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000656:	f000 f84f 	bl	80006f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800065a:	f000 f903 	bl	8000864 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 fd85 	bl	800116c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000662:	f000 f9ad 	bl	80009c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000666:	f000 f9eb 	bl	8000a40 <MX_I2C2_Init>
  MX_TIM4_Init();
 800066a:	f000 fb19 	bl	8000ca0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800066e:	f000 fb93 	bl	8000d98 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000672:	f000 fc8f 	bl	8000f94 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000676:	f000 fd71 	bl	800115c <MX_USB_OTG_FS_USB_Init>
  MX_UART4_Init();
 800067a:	f000 fbf3 	bl	8000e64 <MX_UART4_Init>
  MX_USART2_UART_Init();
 800067e:	f000 fcd5 	bl	800102c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000682:	f000 fd1f 	bl	80010c4 <MX_USART3_UART_Init>
  MX_UART5_Init();
 8000686:	f000 fc39 	bl	8000efc <MX_UART5_Init>
  MX_I2C4_Init();
 800068a:	f000 fa19 	bl	8000ac0 <MX_I2C4_Init>
  MX_ADC1_Init();
 800068e:	f000 f91f 	bl	80008d0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000692:	f000 faab 	bl	8000bec <MX_TIM3_Init>
  MX_SPI4_Init();
 8000696:	f000 fa53 	bl	8000b40 <MX_SPI4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BlinkLED1 */
  osThreadDef(BlinkLED1, StartBlinkLED1, osPriorityLow, 0, 128);
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <main+0x9c>)
 800069c:	f107 041c 	add.w	r4, r7, #28
 80006a0:	461d      	mov	r5, r3
 80006a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkLED1Handle = osThreadCreate(osThread(BlinkLED1), NULL);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f008 fbe0 	bl	8008e7a <osThreadCreate>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <main+0xa0>)
 80006be:	6013      	str	r3, [r2, #0]

  /* definition and creation of BlinkLED2 */
  osThreadDef(BlinkLED2, StartBlinkLED2, osPriorityBelowNormal, 0, 128);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <main+0xa4>)
 80006c2:	463c      	mov	r4, r7
 80006c4:	461d      	mov	r5, r3
 80006c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BlinkLED2Handle = osThreadCreate(osThread(BlinkLED2), NULL);
 80006d2:	463b      	mov	r3, r7
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 fbcf 	bl	8008e7a <osThreadCreate>
 80006dc:	4603      	mov	r3, r0
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <main+0xa8>)
 80006e0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006e2:	f008 fbc3 	bl	8008e6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <main+0x9a>
 80006e8:	0800b9e8 	.word	0x0800b9e8
 80006ec:	24000d80 	.word	0x24000d80
 80006f0:	0800ba04 	.word	0x0800ba04
 80006f4:	24000d84 	.word	0x24000d84

080006f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b09e      	sub	sp, #120	; 0x78
 80006fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000702:	224c      	movs	r2, #76	; 0x4c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f00b f88c 	bl	800b824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2220      	movs	r2, #32
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f00b f885 	bl	800b824 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800071a:	2002      	movs	r0, #2
 800071c:	f003 f894 	bl	8003848 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b4c      	ldr	r3, [pc, #304]	; (8000858 <SystemClock_Config+0x160>)
 8000726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000728:	4a4b      	ldr	r2, [pc, #300]	; (8000858 <SystemClock_Config+0x160>)
 800072a:	f023 0301 	bic.w	r3, r3, #1
 800072e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000730:	4b49      	ldr	r3, [pc, #292]	; (8000858 <SystemClock_Config+0x160>)
 8000732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b48      	ldr	r3, [pc, #288]	; (800085c <SystemClock_Config+0x164>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a47      	ldr	r2, [pc, #284]	; (800085c <SystemClock_Config+0x164>)
 8000740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b45      	ldr	r3, [pc, #276]	; (800085c <SystemClock_Config+0x164>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000752:	bf00      	nop
 8000754:	4b41      	ldr	r3, [pc, #260]	; (800085c <SystemClock_Config+0x164>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800075c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000760:	d1f8      	bne.n	8000754 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b3f      	ldr	r3, [pc, #252]	; (8000860 <SystemClock_Config+0x168>)
 8000764:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000768:	4a3d      	ldr	r2, [pc, #244]	; (8000860 <SystemClock_Config+0x168>)
 800076a:	f043 0302 	orr.w	r3, r3, #2
 800076e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000772:	4b3b      	ldr	r3, [pc, #236]	; (8000860 <SystemClock_Config+0x168>)
 8000774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000778:	f003 0302 	and.w	r3, r3, #2
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	4b35      	ldr	r3, [pc, #212]	; (800085c <SystemClock_Config+0x164>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a34      	ldr	r2, [pc, #208]	; (800085c <SystemClock_Config+0x164>)
 800078a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b32      	ldr	r3, [pc, #200]	; (800085c <SystemClock_Config+0x164>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	603b      	str	r3, [r7, #0]
 800079a:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <SystemClock_Config+0x160>)
 800079c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079e:	4a2e      	ldr	r2, [pc, #184]	; (8000858 <SystemClock_Config+0x160>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007a6:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <SystemClock_Config+0x160>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007b2:	bf00      	nop
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <SystemClock_Config+0x164>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007c0:	d1f8      	bne.n	80007b4 <SystemClock_Config+0xbc>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80007c2:	4b27      	ldr	r3, [pc, #156]	; (8000860 <SystemClock_Config+0x168>)
 80007c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c6:	f023 0303 	bic.w	r3, r3, #3
 80007ca:	4a25      	ldr	r2, [pc, #148]	; (8000860 <SystemClock_Config+0x168>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d2:	2301      	movs	r3, #1
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007dc:	2302      	movs	r3, #2
 80007de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e0:	2302      	movs	r3, #2
 80007e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007e4:	2301      	movs	r3, #1
 80007e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80007e8:	233c      	movs	r3, #60	; 0x3c
 80007ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007f0:	2302      	movs	r3, #2
 80007f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007f8:	230c      	movs	r3, #12
 80007fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000808:	4618      	mov	r0, r3
 800080a:	f003 f857 	bl	80038bc <HAL_RCC_OscConfig>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000814:	f000 fdc2 	bl	800139c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000818:	233f      	movs	r3, #63	; 0x3f
 800081a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081c:	2303      	movs	r3, #3
 800081e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000824:	2308      	movs	r3, #8
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000828:	2340      	movs	r3, #64	; 0x40
 800082a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000830:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2104      	movs	r1, #4
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fc69 	bl	8004118 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x158>
  {
    Error_Handler();
 800084c:	f000 fda6 	bl	800139c <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3778      	adds	r7, #120	; 0x78
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	58000400 	.word	0x58000400
 800085c:	58024800 	.word	0x58024800
 8000860:	58024400 	.word	0x58024400

08000864 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b0b0      	sub	sp, #192	; 0xc0
 8000868:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	22bc      	movs	r2, #188	; 0xbc
 800086e:	2100      	movs	r1, #0
 8000870:	4618      	mov	r0, r3
 8000872:	f00a ffd7 	bl	800b824 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C2
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <PeriphCommonClock_Config+0x68>)
 8000878:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800087a:	2301      	movs	r3, #1
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 10;
 800087e:	230a      	movs	r3, #10
 8000880:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000886:	2304      	movs	r3, #4
 8000888:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 4;
 800088a:	2304      	movs	r3, #4
 800088c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800088e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000894:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000898:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_PLL3;
 800089e:	2310      	movs	r3, #16
 80008a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80008aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80008ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 fffd 	bl	80048b4 <HAL_RCCEx_PeriphCLKConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 80008c0:	f000 fd6c 	bl	800139c <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	37c0      	adds	r7, #192	; 0xc0
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	00040009 	.word	0x00040009

080008d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008e2:	463b      	mov	r3, r7
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
 80008f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <MX_ADC1_Init+0xe4>)
 80008f6:	4a30      	ldr	r2, [pc, #192]	; (80009b8 <MX_ADC1_Init+0xe8>)
 80008f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008fa:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MX_ADC1_Init+0xe4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000900:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090c:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800090e:	2204      	movs	r2, #4
 8000910:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000914:	2200      	movs	r2, #0
 8000916:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000918:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800091a:	2200      	movs	r2, #0
 800091c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000920:	2201      	movs	r2, #1
 8000922:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000924:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000926:	2200      	movs	r2, #0
 8000928:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000938:	2200      	movs	r2, #0
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800093e:	2200      	movs	r2, #0
 8000940:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000944:	2200      	movs	r2, #0
 8000946:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <MX_ADC1_Init+0xe4>)
 8000952:	f001 fc8d 	bl	8002270 <HAL_ADC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800095c:	f000 fd1e 	bl	800139c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000960:	2300      	movs	r3, #0
 8000962:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4812      	ldr	r0, [pc, #72]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800096c:	f002 faa2 	bl	8002eb4 <HAL_ADCEx_MultiModeConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000976:	f000 fd11 	bl	800139c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_ADC1_Init+0xec>)
 800097c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800097e:	2306      	movs	r3, #6
 8000980:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000986:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800098c:	2304      	movs	r3, #4
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_ADC1_Init+0xe4>)
 800099e:	f001 fe09 	bl	80025b4 <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80009a8:	f000 fcf8 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	240007fc 	.word	0x240007fc
 80009b8:	40022000 	.word	0x40022000
 80009bc:	0c900008 	.word	0x0c900008

080009c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_I2C1_Init+0x78>)
 80009c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00909BEB;
 80009ca:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <MX_I2C1_Init+0x7c>)
 80009ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d6:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009d8:	2201      	movs	r2, #1
 80009da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009e2:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009fa:	480e      	ldr	r0, [pc, #56]	; (8000a34 <MX_I2C1_Init+0x74>)
 80009fc:	f002 fdfc 	bl	80035f8 <HAL_I2C_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a06:	f000 fcc9 	bl	800139c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a0e:	f002 fe83 	bl	8003718 <HAL_I2CEx_ConfigAnalogFilter>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a18:	f000 fcc0 	bl	800139c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_I2C1_Init+0x74>)
 8000a20:	f002 fec5 	bl	80037ae <HAL_I2CEx_ConfigDigitalFilter>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a2a:	f000 fcb7 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	24000860 	.word	0x24000860
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	00909beb 	.word	0x00909beb

08000a40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	; (8000ab8 <MX_I2C2_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00909BEB;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	; (8000abc <MX_I2C2_Init+0x7c>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a56:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a7a:	480e      	ldr	r0, [pc, #56]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a7c:	f002 fdbc 	bl	80035f8 <HAL_I2C_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a86:	f000 fc89 	bl	800139c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000a8e:	f002 fe43 	bl	8003718 <HAL_I2CEx_ConfigAnalogFilter>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a98:	f000 fc80 	bl	800139c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_I2C2_Init+0x74>)
 8000aa0:	f002 fe85 	bl	80037ae <HAL_I2CEx_ConfigDigitalFilter>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 fc77 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	240008ac 	.word	0x240008ac
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	00909beb 	.word	0x00909beb

08000ac0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000ac6:	4a1c      	ldr	r2, [pc, #112]	; (8000b38 <MX_I2C4_Init+0x78>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000acc:	4a1b      	ldr	r2, [pc, #108]	; (8000b3c <MX_I2C4_Init+0x7c>)
 8000ace:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000afa:	480e      	ldr	r0, [pc, #56]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000afc:	f002 fd7c 	bl	80035f8 <HAL_I2C_Init>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b06:	f000 fc49 	bl	800139c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000b0e:	f002 fe03 	bl	8003718 <HAL_I2CEx_ConfigAnalogFilter>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b18:	f000 fc40 	bl	800139c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_I2C4_Init+0x74>)
 8000b20:	f002 fe45 	bl	80037ae <HAL_I2CEx_ConfigDigitalFilter>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b2a:	f000 fc37 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	240008f8 	.word	0x240008f8
 8000b38:	58001c00 	.word	0x58001c00
 8000b3c:	307075b1 	.word	0x307075b1

08000b40 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b46:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <MX_SPI4_Init+0xa8>)
 8000b48:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b50:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b70:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b96:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_SPI4_Init+0xa4>)
 8000bd0:	f005 fffc 	bl	8006bcc <HAL_SPI_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000bda:	f000 fbdf 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	24000944 	.word	0x24000944
 8000be8:	40013400 	.word	0x40013400

08000bec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf2:	f107 031c 	add.w	r3, r7, #28
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c10:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c12:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <MX_TIM3_Init+0xb0>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c22:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c36:	4818      	ldr	r0, [pc, #96]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c38:	f006 f9c2 	bl	8006fc0 <HAL_TIM_PWM_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c42:	f000 fbab 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4810      	ldr	r0, [pc, #64]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c56:	f006 ffd5 	bl	8007c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000c60:	f000 fb9c 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c64:	2360      	movs	r3, #96	; 0x60
 8000c66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c70:	2300      	movs	r3, #0
 8000c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	220c      	movs	r2, #12
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c7c:	f006 fb16 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000c86:	f000 fb89 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c8a:	4803      	ldr	r0, [pc, #12]	; (8000c98 <MX_TIM3_Init+0xac>)
 8000c8c:	f000 fdaa 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	240009cc 	.word	0x240009cc
 8000c9c:	40000400 	.word	0x40000400

08000ca0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
 8000cc0:	615a      	str	r2, [r3, #20]
 8000cc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cc4:	4b32      	ldr	r3, [pc, #200]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000cc6:	4a33      	ldr	r2, [pc, #204]	; (8000d94 <MX_TIM4_Init+0xf4>)
 8000cc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000cca:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cde:	4b2c      	ldr	r3, [pc, #176]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000cea:	4829      	ldr	r0, [pc, #164]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000cec:	f006 f968 	bl	8006fc0 <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000cf6:	f000 fb51 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4821      	ldr	r0, [pc, #132]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d0a:	f006 ff7b 	bl	8007c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000d14:	f000 fb42 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	; 0x60
 8000d1a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4818      	ldr	r0, [pc, #96]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d30:	f006 fabc 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d3a:	f000 fb2f 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2204      	movs	r2, #4
 8000d42:	4619      	mov	r1, r3
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d46:	f006 fab1 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000d50:	f000 fb24 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d54:	463b      	mov	r3, r7
 8000d56:	2208      	movs	r2, #8
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d5c:	f006 faa6 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000d66:	f000 fb19 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	220c      	movs	r2, #12
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d72:	f006 fa9b 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8000d7c:	f000 fb0e 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <MX_TIM4_Init+0xf0>)
 8000d82:	f000 fd2f 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	24000a18 	.word	0x24000a18
 8000d94:	40000800 	.word	0x40000800

08000d98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9e:	f107 031c 	add.w	r3, r7, #28
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dbc:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dbe:	4a28      	ldr	r2, [pc, #160]	; (8000e60 <MX_TIM5_Init+0xc8>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000de2:	481e      	ldr	r0, [pc, #120]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000de4:	f006 f8ec 	bl	8006fc0 <HAL_TIM_PWM_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000dee:	f000 fad5 	bl	800139c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4816      	ldr	r0, [pc, #88]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000e02:	f006 feff 	bl	8007c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000e0c:	f000 fac6 	bl	800139c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e10:	2360      	movs	r3, #96	; 0x60
 8000e12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	2208      	movs	r2, #8
 8000e24:	4619      	mov	r1, r3
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000e28:	f006 fa40 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000e32:	f000 fab3 	bl	800139c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	220c      	movs	r2, #12
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000e3e:	f006 fa35 	bl	80072ac <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8000e48:	f000 faa8 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM5_Init+0xc4>)
 8000e4e:	f000 fcc9 	bl	80017e4 <HAL_TIM_MspPostInit>

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	24000a64 	.word	0x24000a64
 8000e60:	40000c00 	.word	0x40000c00

08000e64 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e68:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e6a:	4a23      	ldr	r2, [pc, #140]	; (8000ef8 <MX_UART4_Init+0x94>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e74:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9a:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000eac:	4811      	ldr	r0, [pc, #68]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000eae:	f006 ff55 	bl	8007d5c <HAL_UART_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000eb8:	f000 fa70 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000ec0:	f007 fef2 	bl	8008ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000eca:	f000 fa67 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000ed2:	f007 ff27 	bl	8008d24 <HAL_UARTEx_SetRxFifoThreshold>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000edc:	f000 fa5e 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <MX_UART4_Init+0x90>)
 8000ee2:	f007 fea8 	bl	8008c36 <HAL_UARTEx_DisableFifoMode>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000eec:	f000 fa56 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	24000ab0 	.word	0x24000ab0
 8000ef8:	40004c00 	.word	0x40004c00

08000efc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f00:	4b22      	ldr	r3, [pc, #136]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f02:	4a23      	ldr	r2, [pc, #140]	; (8000f90 <MX_UART5_Init+0x94>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f06:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f44:	4811      	ldr	r0, [pc, #68]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f46:	f006 ff09 	bl	8007d5c <HAL_UART_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000f50:	f000 fa24 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f54:	2100      	movs	r1, #0
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f58:	f007 fea6 	bl	8008ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8000f62:	f000 fa1b 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f66:	2100      	movs	r1, #0
 8000f68:	4808      	ldr	r0, [pc, #32]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f6a:	f007 fedb 	bl	8008d24 <HAL_UARTEx_SetRxFifoThreshold>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8000f74:	f000 fa12 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_UART5_Init+0x90>)
 8000f7a:	f007 fe5c 	bl	8008c36 <HAL_UARTEx_DisableFifoMode>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8000f84:	f000 fa0a 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	24000b40 	.word	0x24000b40
 8000f90:	40005000 	.word	0x40005000

08000f94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000f9a:	4a23      	ldr	r2, [pc, #140]	; (8001028 <MX_USART1_UART_Init+0x94>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b17      	ldr	r3, [pc, #92]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fdc:	4811      	ldr	r0, [pc, #68]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000fde:	f006 febd 	bl	8007d5c <HAL_UART_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fe8:	f000 f9d8 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fec:	2100      	movs	r1, #0
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8000ff0:	f007 fe5a 	bl	8008ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ffa:	f000 f9cf 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4808      	ldr	r0, [pc, #32]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8001002:	f007 fe8f 	bl	8008d24 <HAL_UARTEx_SetRxFifoThreshold>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800100c:	f000 f9c6 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_USART1_UART_Init+0x90>)
 8001012:	f007 fe10 	bl	8008c36 <HAL_UARTEx_DisableFifoMode>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800101c:	f000 f9be 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	24000bd0 	.word	0x24000bd0
 8001028:	40011000 	.word	0x40011000

0800102c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001032:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <MX_USART2_UART_Init+0x94>)
 8001034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <MX_USART2_UART_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b1a      	ldr	r3, [pc, #104]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <MX_USART2_UART_Init+0x90>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <MX_USART2_UART_Init+0x90>)
 800106a:	2200      	movs	r2, #0
 800106c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001070:	2200      	movs	r2, #0
 8001072:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001074:	4811      	ldr	r0, [pc, #68]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001076:	f006 fe71 	bl	8007d5c <HAL_UART_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001080:	f000 f98c 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001084:	2100      	movs	r1, #0
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <MX_USART2_UART_Init+0x90>)
 8001088:	f007 fe0e 	bl	8008ca8 <HAL_UARTEx_SetTxFifoThreshold>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001092:	f000 f983 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001096:	2100      	movs	r1, #0
 8001098:	4808      	ldr	r0, [pc, #32]	; (80010bc <MX_USART2_UART_Init+0x90>)
 800109a:	f007 fe43 	bl	8008d24 <HAL_UARTEx_SetRxFifoThreshold>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010a4:	f000 f97a 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010a8:	4804      	ldr	r0, [pc, #16]	; (80010bc <MX_USART2_UART_Init+0x90>)
 80010aa:	f007 fdc4 	bl	8008c36 <HAL_UARTEx_DisableFifoMode>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010b4:	f000 f972 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	24000c60 	.word	0x24000c60
 80010c0:	40004400 	.word	0x40004400

080010c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010ca:	4a23      	ldr	r2, [pc, #140]	; (8001158 <MX_USART3_UART_Init+0x94>)
 80010cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010dc:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010ea:	220c      	movs	r2, #12
 80010ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010fa:	4b16      	ldr	r3, [pc, #88]	; (8001154 <MX_USART3_UART_Init+0x90>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_USART3_UART_Init+0x90>)
 8001102:	2200      	movs	r2, #0
 8001104:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001106:	4b13      	ldr	r3, [pc, #76]	; (8001154 <MX_USART3_UART_Init+0x90>)
 8001108:	2200      	movs	r2, #0
 800110a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800110c:	4811      	ldr	r0, [pc, #68]	; (8001154 <MX_USART3_UART_Init+0x90>)
 800110e:	f006 fe25 	bl	8007d5c <HAL_UART_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001118:	f000 f940 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_USART3_UART_Init+0x90>)
 8001120:	f007 fdc2 	bl	8008ca8 <HAL_UARTEx_SetTxFifoThreshold>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800112a:	f000 f937 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800112e:	2100      	movs	r1, #0
 8001130:	4808      	ldr	r0, [pc, #32]	; (8001154 <MX_USART3_UART_Init+0x90>)
 8001132:	f007 fdf7 	bl	8008d24 <HAL_UARTEx_SetRxFifoThreshold>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800113c:	f000 f92e 	bl	800139c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_USART3_UART_Init+0x90>)
 8001142:	f007 fd78 	bl	8008c36 <HAL_UARTEx_DisableFifoMode>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800114c:	f000 f926 	bl	800139c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000cf0 	.word	0x24000cf0
 8001158:	40004800 	.word	0x40004800

0800115c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001182:	4b57      	ldr	r3, [pc, #348]	; (80012e0 <MX_GPIO_Init+0x174>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	4a55      	ldr	r2, [pc, #340]	; (80012e0 <MX_GPIO_Init+0x174>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001192:	4b53      	ldr	r3, [pc, #332]	; (80012e0 <MX_GPIO_Init+0x174>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011a0:	4b4f      	ldr	r3, [pc, #316]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	4a4e      	ldr	r2, [pc, #312]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b0:	4b4b      	ldr	r3, [pc, #300]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b48      	ldr	r3, [pc, #288]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	4a3f      	ldr	r2, [pc, #252]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ec:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	4b39      	ldr	r3, [pc, #228]	; (80012e0 <MX_GPIO_Init+0x174>)
 80011fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001200:	4a37      	ldr	r2, [pc, #220]	; (80012e0 <MX_GPIO_Init+0x174>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800120a:	4b35      	ldr	r3, [pc, #212]	; (80012e0 <MX_GPIO_Init+0x174>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZ_ON_GPIO_Port, BUZZ_ON_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	4831      	ldr	r0, [pc, #196]	; (80012e4 <MX_GPIO_Init+0x178>)
 800121e:	f002 f9b7 	bl	8003590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, STATUS_LED1_R_Pin|STATUS_LED1_G_Pin|STATUS_LED1_B_Pin|STATUS_LED2_R_Pin
 8001222:	2200      	movs	r2, #0
 8001224:	f643 7102 	movw	r1, #16130	; 0x3f02
 8001228:	482f      	ldr	r0, [pc, #188]	; (80012e8 <MX_GPIO_Init+0x17c>)
 800122a:	f002 f9b1 	bl	8003590 <HAL_GPIO_WritePin>
                          |STATUS_LED2_G_Pin|STATUS_LED2_B_Pin|LED_EXT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : IMU_INT_Pin PS_INT_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin|PS_INT_Pin|MAG_INT_Pin;
 800122e:	f248 0309 	movw	r3, #32777	; 0x8009
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4829      	ldr	r0, [pc, #164]	; (80012e8 <MX_GPIO_Init+0x17c>)
 8001244:	f001 fff4 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZ_ON_Pin */
  GPIO_InitStruct.Pin = BUZZ_ON_Pin;
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZ_ON_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	4619      	mov	r1, r3
 800125e:	4821      	ldr	r0, [pc, #132]	; (80012e4 <MX_GPIO_Init+0x178>)
 8001260:	f001 ffe6 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pins : STATUS_LED1_R_Pin STATUS_LED1_G_Pin STATUS_LED1_B_Pin STATUS_LED2_R_Pin
                           STATUS_LED2_G_Pin STATUS_LED2_B_Pin LED_EXT_Pin */
  GPIO_InitStruct.Pin = STATUS_LED1_R_Pin|STATUS_LED1_G_Pin|STATUS_LED1_B_Pin|STATUS_LED2_R_Pin
 8001264:	f643 7302 	movw	r3, #16130	; 0x3f02
 8001268:	617b      	str	r3, [r7, #20]
                          |STATUS_LED2_G_Pin|STATUS_LED2_B_Pin|LED_EXT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126a:	2301      	movs	r3, #1
 800126c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	481a      	ldr	r0, [pc, #104]	; (80012e8 <MX_GPIO_Init+0x17c>)
 800127e:	f001 ffd7 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_DEBUG_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_DEBUG_Pin;
 8001282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001288:	2300      	movs	r3, #0
 800128a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_VBUS_DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4815      	ldr	r0, [pc, #84]	; (80012ec <MX_GPIO_Init+0x180>)
 8001298:	f001 ffca 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CARD_DETECT_Pin PA9 */
  GPIO_InitStruct.Pin = SD_CARD_DETECT_Pin|GPIO_PIN_9;
 800129c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	480c      	ldr	r0, [pc, #48]	; (80012e4 <MX_GPIO_Init+0x178>)
 80012b2:	f001 ffbd 	bl	8003230 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80012c8:	230a      	movs	r3, #10
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4619      	mov	r1, r3
 80012d2:	4804      	ldr	r0, [pc, #16]	; (80012e4 <MX_GPIO_Init+0x178>)
 80012d4:	f001 ffac 	bl	8003230 <HAL_GPIO_Init>

}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	; 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	58024400 	.word	0x58024400
 80012e4:	58020000 	.word	0x58020000
 80012e8:	58021000 	.word	0x58021000
 80012ec:	58020c00 	.word	0x58020c00

080012f0 <StartBlinkLED1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinkLED1 */
void StartBlinkLED1(void const * argument)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  HAL_GPIO_WritePin(STATUS_LED1_R_GPIO_Port, STATUS_LED1_R_Pin, 1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <StartBlinkLED1+0x40>)
 8001300:	f002 f946 	bl	8003590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED1_G_GPIO_Port, STATUS_LED1_G_Pin, 1);
 8001304:	2201      	movs	r2, #1
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <StartBlinkLED1+0x40>)
 800130c:	f002 f940 	bl	8003590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED1_B_GPIO_Port, STATUS_LED1_B_Pin, 1);
 8001310:	2201      	movs	r2, #1
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <StartBlinkLED1+0x40>)
 8001318:	f002 f93a 	bl	8003590 <HAL_GPIO_WritePin>

  for(;;)
  {
	HAL_GPIO_TogglePin(STATUS_LED1_R_GPIO_Port, STATUS_LED1_R_Pin);
 800131c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001320:	4803      	ldr	r0, [pc, #12]	; (8001330 <StartBlinkLED1+0x40>)
 8001322:	f002 f94e 	bl	80035c2 <HAL_GPIO_TogglePin>
    osDelay(500);
 8001326:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800132a:	f007 fdf2 	bl	8008f12 <osDelay>
	HAL_GPIO_TogglePin(STATUS_LED1_R_GPIO_Port, STATUS_LED1_R_Pin);
 800132e:	e7f5      	b.n	800131c <StartBlinkLED1+0x2c>
 8001330:	58021000 	.word	0x58021000

08001334 <StartBlinkLED2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkLED2 */
void StartBlinkLED2(void const * argument)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]


  /* USER CODE BEGIN StartBlinkLED2 */
  /* Infinite loop */
  HAL_GPIO_WritePin(STATUS_LED2_R_GPIO_Port, STATUS_LED2_R_Pin, 1);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001342:	480c      	ldr	r0, [pc, #48]	; (8001374 <StartBlinkLED2+0x40>)
 8001344:	f002 f924 	bl	8003590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED2_G_GPIO_Port, STATUS_LED2_G_Pin, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <StartBlinkLED2+0x40>)
 8001350:	f002 f91e 	bl	8003590 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STATUS_LED2_B_GPIO_Port, STATUS_LED2_B_Pin, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135a:	4806      	ldr	r0, [pc, #24]	; (8001374 <StartBlinkLED2+0x40>)
 800135c:	f002 f918 	bl	8003590 <HAL_GPIO_WritePin>

  for(;;)
  {
	HAL_GPIO_TogglePin(STATUS_LED2_B_GPIO_Port, STATUS_LED2_B_Pin);
 8001360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <StartBlinkLED2+0x40>)
 8001366:	f002 f92c 	bl	80035c2 <HAL_GPIO_TogglePin>
	osDelay(500);
 800136a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800136e:	f007 fdd0 	bl	8008f12 <osDelay>
	HAL_GPIO_TogglePin(STATUS_LED2_B_GPIO_Port, STATUS_LED2_B_Pin);
 8001372:	e7f5      	b.n	8001360 <StartBlinkLED2+0x2c>
 8001374:	58021000 	.word	0x58021000

08001378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800138a:	f000 fdb9 	bl	8001f00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40001400 	.word	0x40001400

0800139c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a0:	b672      	cpsid	i
}
 80013a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <Error_Handler+0x8>
	...

080013a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_MspInit+0x38>)
 80013b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_MspInit+0x38>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_MspInit+0x38>)
 80013c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	210f      	movs	r1, #15
 80013d0:	f06f 0001 	mvn.w	r0, #1
 80013d4:	f001 ff04 	bl	80031e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	58024400 	.word	0x58024400

080013e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0b8      	sub	sp, #224	; 0xe0
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	22bc      	movs	r2, #188	; 0xbc
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f00a fa0d 	bl	800b824 <memset>
  if(hadc->Instance==ADC1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <HAL_ADC_MspInit+0xd4>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d14c      	bne.n	80014ae <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001414:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001418:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800141a:	2301      	movs	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 800141e:	230a      	movs	r3, #10
 8001420:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001422:	2302      	movs	r3, #2
 8001424:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 4;
 8001426:	2304      	movs	r3, #4
 8001428:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 4;
 800142a:	2304      	movs	r3, #4
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800142e:	23c0      	movs	r3, #192	; 0xc0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001432:	2320      	movs	r3, #32
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800143a:	2300      	movs	r3, #0
 800143c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fa35 	bl	80048b4 <HAL_RCCEx_PeriphCLKConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001450:	f7ff ffa4 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <HAL_ADC_MspInit+0xd8>)
 8001456:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <HAL_ADC_MspInit+0xd8>)
 800145c:	f043 0320 	orr.w	r3, r3, #32
 8001460:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_ADC_MspInit+0xd8>)
 8001466:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_ADC_MspInit+0xd8>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001478:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_ADC_MspInit+0xd8>)
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_ADC_MspInit+0xd8>)
 8001484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001490:	2340      	movs	r3, #64	; 0x40
 8001492:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001496:	2303      	movs	r3, #3
 8001498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_ADC_MspInit+0xdc>)
 80014aa:	f001 fec1 	bl	8003230 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	37e0      	adds	r7, #224	; 0xe0
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40022000 	.word	0x40022000
 80014bc:	58024400 	.word	0x58024400
 80014c0:	58020000 	.word	0x58020000

080014c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b0bc      	sub	sp, #240	; 0xf0
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	22bc      	movs	r2, #188	; 0xbc
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00a f99d 	bl	800b824 <memset>
  if(hi2c->Instance==I2C1)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a5e      	ldr	r2, [pc, #376]	; (8001668 <HAL_I2C_MspInit+0x1a4>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d133      	bne.n	800155c <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b5d      	ldr	r3, [pc, #372]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 80014f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fa:	4a5c      	ldr	r2, [pc, #368]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 80014fc:	f043 0302 	orr.w	r3, r3, #2
 8001500:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001504:	4b59      	ldr	r3, [pc, #356]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 8001506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001512:	23c0      	movs	r3, #192	; 0xc0
 8001514:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001518:	2312      	movs	r3, #18
 800151a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800152a:	2304      	movs	r3, #4
 800152c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001530:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001534:	4619      	mov	r1, r3
 8001536:	484e      	ldr	r0, [pc, #312]	; (8001670 <HAL_I2C_MspInit+0x1ac>)
 8001538:	f001 fe7a 	bl	8003230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800153c:	4b4b      	ldr	r3, [pc, #300]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 800153e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001542:	4a4a      	ldr	r2, [pc, #296]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 8001544:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001548:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800154c:	4b47      	ldr	r3, [pc, #284]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 800154e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800155a:	e081      	b.n	8001660 <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a44      	ldr	r2, [pc, #272]	; (8001674 <HAL_I2C_MspInit+0x1b0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d134      	bne.n	80015d0 <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156c:	4a3f      	ldr	r2, [pc, #252]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001576:	4b3d      	ldr	r3, [pc, #244]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 8001578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001584:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001588:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800158c:	2312      	movs	r3, #18
 800158e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800159e:	2304      	movs	r3, #4
 80015a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015a8:	4619      	mov	r1, r3
 80015aa:	4831      	ldr	r0, [pc, #196]	; (8001670 <HAL_I2C_MspInit+0x1ac>)
 80015ac:	f001 fe40 	bl	8003230 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80015b0:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 80015b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b6:	4a2d      	ldr	r2, [pc, #180]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 80015b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 80015c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
}
 80015ce:	e047      	b.n	8001660 <HAL_I2C_MspInit+0x19c>
  else if(hi2c->Instance==I2C4)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a28      	ldr	r2, [pc, #160]	; (8001678 <HAL_I2C_MspInit+0x1b4>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d142      	bne.n	8001660 <HAL_I2C_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015da:	2310      	movs	r3, #16
 80015dc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 f963 	bl	80048b4 <HAL_RCCEx_PeriphCLKConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_I2C_MspInit+0x134>
      Error_Handler();
 80015f4:	f7ff fed2 	bl	800139c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	4a1b      	ldr	r2, [pc, #108]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001616:	f44f 7340 	mov.w	r3, #768	; 0x300
 800161a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161e:	2312      	movs	r3, #18
 8001620:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001630:	2306      	movs	r3, #6
 8001632:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <HAL_I2C_MspInit+0x1ac>)
 800163e:	f001 fdf7 	bl	8003230 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 8001644:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001648:	4a08      	ldr	r2, [pc, #32]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 800164a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800164e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_I2C_MspInit+0x1a8>)
 8001654:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
}
 8001660:	bf00      	nop
 8001662:	37f0      	adds	r7, #240	; 0xf0
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40005400 	.word	0x40005400
 800166c:	58024400 	.word	0x58024400
 8001670:	58020400 	.word	0x58020400
 8001674:	40005800 	.word	0x40005800
 8001678:	58001c00 	.word	0x58001c00

0800167c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0b8      	sub	sp, #224	; 0xe0
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	22bc      	movs	r2, #188	; 0xbc
 800169a:	2100      	movs	r1, #0
 800169c:	4618      	mov	r0, r3
 800169e:	f00a f8c1 	bl	800b824 <memset>
  if(hspi->Instance==SPI4)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a24      	ldr	r2, [pc, #144]	; (8001738 <HAL_SPI_MspInit+0xbc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d141      	bne.n	8001730 <HAL_SPI_MspInit+0xb4>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80016ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b6:	f107 0310 	add.w	r3, r7, #16
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 f8fa 	bl	80048b4 <HAL_RCCEx_PeriphCLKConfig>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80016c6:	f7ff fe69 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80016ca:	4b1c      	ldr	r3, [pc, #112]	; (800173c <HAL_SPI_MspInit+0xc0>)
 80016cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016d0:	4a1a      	ldr	r2, [pc, #104]	; (800173c <HAL_SPI_MspInit+0xc0>)
 80016d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_SPI_MspInit+0xc0>)
 80016dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016e8:	4b14      	ldr	r3, [pc, #80]	; (800173c <HAL_SPI_MspInit+0xc0>)
 80016ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <HAL_SPI_MspInit+0xc0>)
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_SPI_MspInit+0xc0>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001706:	2364      	movs	r3, #100	; 0x64
 8001708:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800171e:	2305      	movs	r3, #5
 8001720:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001724:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001728:	4619      	mov	r1, r3
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <HAL_SPI_MspInit+0xc4>)
 800172c:	f001 fd80 	bl	8003230 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001730:	bf00      	nop
 8001732:	37e0      	adds	r7, #224	; 0xe0
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40013400 	.word	0x40013400
 800173c:	58024400 	.word	0x58024400
 8001740:	58021000 	.word	0x58021000

08001744 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a20      	ldr	r2, [pc, #128]	; (80017d4 <HAL_TIM_PWM_MspInit+0x90>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10f      	bne.n	8001776 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001756:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_TIM_PWM_MspInit+0x94>)
 8001758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800175c:	4a1e      	ldr	r2, [pc, #120]	; (80017d8 <HAL_TIM_PWM_MspInit+0x94>)
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <HAL_TIM_PWM_MspInit+0x94>)
 8001768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001774:	e028      	b.n	80017c8 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a18      	ldr	r2, [pc, #96]	; (80017dc <HAL_TIM_PWM_MspInit+0x98>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d10f      	bne.n	80017a0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_TIM_PWM_MspInit+0x94>)
 8001782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001786:	4a14      	ldr	r2, [pc, #80]	; (80017d8 <HAL_TIM_PWM_MspInit+0x94>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_TIM_PWM_MspInit+0x94>)
 8001792:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001796:	f003 0304 	and.w	r3, r3, #4
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
}
 800179e:	e013      	b.n	80017c8 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM5)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_TIM_PWM_MspInit+0x9c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10e      	bne.n	80017c8 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_TIM_PWM_MspInit+0x94>)
 80017ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017b0:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_TIM_PWM_MspInit+0x94>)
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_TIM_PWM_MspInit+0x94>)
 80017bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c0:	f003 0308 	and.w	r3, r3, #8
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	bf00      	nop
 80017ca:	371c      	adds	r7, #28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40000400 	.word	0x40000400
 80017d8:	58024400 	.word	0x58024400
 80017dc:	40000800 	.word	0x40000800
 80017e0:	40000c00 	.word	0x40000c00

080017e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	; 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a38      	ldr	r2, [pc, #224]	; (80018e4 <HAL_TIM_MspPostInit+0x100>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d11f      	bne.n	8001846 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_TIM_MspPostInit+0x104>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	4a36      	ldr	r2, [pc, #216]	; (80018e8 <HAL_TIM_MspPostInit+0x104>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001816:	4b34      	ldr	r3, [pc, #208]	; (80018e8 <HAL_TIM_MspPostInit+0x104>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001824:	2302      	movs	r3, #2
 8001826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001834:	2302      	movs	r3, #2
 8001836:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	482b      	ldr	r0, [pc, #172]	; (80018ec <HAL_TIM_MspPostInit+0x108>)
 8001840:	f001 fcf6 	bl	8003230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001844:	e049      	b.n	80018da <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM4)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a29      	ldr	r2, [pc, #164]	; (80018f0 <HAL_TIM_MspPostInit+0x10c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d120      	bne.n	8001892 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <HAL_TIM_MspPostInit+0x104>)
 8001852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001856:	4a24      	ldr	r2, [pc, #144]	; (80018e8 <HAL_TIM_MspPostInit+0x104>)
 8001858:	f043 0308 	orr.w	r3, r3, #8
 800185c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_TIM_MspPostInit+0x104>)
 8001862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800186e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001880:	2302      	movs	r3, #2
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	481a      	ldr	r0, [pc, #104]	; (80018f4 <HAL_TIM_MspPostInit+0x110>)
 800188c:	f001 fcd0 	bl	8003230 <HAL_GPIO_Init>
}
 8001890:	e023      	b.n	80018da <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM5)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <HAL_TIM_MspPostInit+0x114>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d11e      	bne.n	80018da <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <HAL_TIM_MspPostInit+0x104>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a2:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <HAL_TIM_MspPostInit+0x104>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <HAL_TIM_MspPostInit+0x104>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018ba:	230c      	movs	r3, #12
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018ca:	2302      	movs	r3, #2
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	4809      	ldr	r0, [pc, #36]	; (80018fc <HAL_TIM_MspPostInit+0x118>)
 80018d6:	f001 fcab 	bl	8003230 <HAL_GPIO_Init>
}
 80018da:	bf00      	nop
 80018dc:	3728      	adds	r7, #40	; 0x28
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40000400 	.word	0x40000400
 80018e8:	58024400 	.word	0x58024400
 80018ec:	58020400 	.word	0x58020400
 80018f0:	40000800 	.word	0x40000800
 80018f4:	58020c00 	.word	0x58020c00
 80018f8:	40000c00 	.word	0x40000c00
 80018fc:	58020000 	.word	0x58020000

08001900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b0c0      	sub	sp, #256	; 0x100
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800191c:	22bc      	movs	r2, #188	; 0xbc
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f009 ff7f 	bl	800b824 <memset>
  if(huart->Instance==UART4)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4aaf      	ldr	r2, [pc, #700]	; (8001be8 <HAL_UART_MspInit+0x2e8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d142      	bne.n	80019b6 <HAL_UART_MspInit+0xb6>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800193e:	4618      	mov	r0, r3
 8001940:	f002 ffb8 	bl	80048b4 <HAL_RCCEx_PeriphCLKConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800194a:	f7ff fd27 	bl	800139c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800194e:	4ba7      	ldr	r3, [pc, #668]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001954:	4aa5      	ldr	r2, [pc, #660]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800195a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800195e:	4ba3      	ldr	r3, [pc, #652]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001964:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800196a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196c:	4b9f      	ldr	r3, [pc, #636]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 800196e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001972:	4a9e      	ldr	r2, [pc, #632]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800197c:	4b9b      	ldr	r3, [pc, #620]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 800197e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
 8001988:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800198a:	2303      	movs	r3, #3
 800198c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019a2:	2308      	movs	r3, #8
 80019a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019ac:	4619      	mov	r1, r3
 80019ae:	4890      	ldr	r0, [pc, #576]	; (8001bf0 <HAL_UART_MspInit+0x2f0>)
 80019b0:	f001 fc3e 	bl	8003230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019b4:	e112      	b.n	8001bdc <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==UART5)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a8e      	ldr	r2, [pc, #568]	; (8001bf4 <HAL_UART_MspInit+0x2f4>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d143      	bne.n	8001a48 <HAL_UART_MspInit+0x148>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80019c0:	2302      	movs	r3, #2
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 ff70 	bl	80048b4 <HAL_RCCEx_PeriphCLKConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_UART_MspInit+0xde>
      Error_Handler();
 80019da:	f7ff fcdf 	bl	800139c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80019de:	4b83      	ldr	r3, [pc, #524]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 80019e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e4:	4a81      	ldr	r2, [pc, #516]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 80019e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019ea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019ee:	4b7f      	ldr	r3, [pc, #508]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 80019f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 80019fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a02:	4a7a      	ldr	r2, [pc, #488]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0c:	4b77      	ldr	r3, [pc, #476]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	623b      	str	r3, [r7, #32]
 8001a18:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001a1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8001a34:	230e      	movs	r3, #14
 8001a36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a3e:	4619      	mov	r1, r3
 8001a40:	486d      	ldr	r0, [pc, #436]	; (8001bf8 <HAL_UART_MspInit+0x2f8>)
 8001a42:	f001 fbf5 	bl	8003230 <HAL_GPIO_Init>
}
 8001a46:	e0c9      	b.n	8001bdc <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a6b      	ldr	r2, [pc, #428]	; (8001bfc <HAL_UART_MspInit+0x2fc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d134      	bne.n	8001abc <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a52:	4b66      	ldr	r3, [pc, #408]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001a54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a58:	4a64      	ldr	r2, [pc, #400]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a62:	4b62      	ldr	r3, [pc, #392]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a70:	4b5e      	ldr	r3, [pc, #376]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a76:	4a5d      	ldr	r2, [pc, #372]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a80:	4b5a      	ldr	r3, [pc, #360]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	61bb      	str	r3, [r7, #24]
 8001a8c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001a8e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001a92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4850      	ldr	r0, [pc, #320]	; (8001bf8 <HAL_UART_MspInit+0x2f8>)
 8001ab6:	f001 fbbb 	bl	8003230 <HAL_GPIO_Init>
}
 8001aba:	e08f      	b.n	8001bdc <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART2)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a4f      	ldr	r2, [pc, #316]	; (8001c00 <HAL_UART_MspInit+0x300>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d142      	bne.n	8001b4c <HAL_UART_MspInit+0x24c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f002 feed 	bl	80048b4 <HAL_RCCEx_PeriphCLKConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_UART_MspInit+0x1e4>
      Error_Handler();
 8001ae0:	f7ff fc5c 	bl	800139c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ae4:	4b41      	ldr	r3, [pc, #260]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001ae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aea:	4a40      	ldr	r2, [pc, #256]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001af4:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001af6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b02:	4b3a      	ldr	r3, [pc, #232]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	4a38      	ldr	r2, [pc, #224]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001b0a:	f043 0308 	orr.w	r3, r3, #8
 8001b0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b12:	4b36      	ldr	r3, [pc, #216]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001b20:	2360      	movs	r3, #96	; 0x60
 8001b22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b26:	2302      	movs	r3, #2
 8001b28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b42:	4619      	mov	r1, r3
 8001b44:	482f      	ldr	r0, [pc, #188]	; (8001c04 <HAL_UART_MspInit+0x304>)
 8001b46:	f001 fb73 	bl	8003230 <HAL_GPIO_Init>
}
 8001b4a:	e047      	b.n	8001bdc <HAL_UART_MspInit+0x2dc>
  else if(huart->Instance==USART3)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <HAL_UART_MspInit+0x308>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d142      	bne.n	8001bdc <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b56:	2302      	movs	r3, #2
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fea5 	bl	80048b4 <HAL_RCCEx_PeriphCLKConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_UART_MspInit+0x274>
      Error_Handler();
 8001b70:	f7ff fc14 	bl	800139c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b7a:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b84:	4b19      	ldr	r3, [pc, #100]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001b9a:	f043 0308 	orr.w	r3, r3, #8
 8001b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_UART_MspInit+0x2ec>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bb0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bb4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bca:	2307      	movs	r3, #7
 8001bcc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480b      	ldr	r0, [pc, #44]	; (8001c04 <HAL_UART_MspInit+0x304>)
 8001bd8:	f001 fb2a 	bl	8003230 <HAL_GPIO_Init>
}
 8001bdc:	bf00      	nop
 8001bde:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40004c00 	.word	0x40004c00
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	58020000 	.word	0x58020000
 8001bf4:	40005000 	.word	0x40005000
 8001bf8:	58020400 	.word	0x58020400
 8001bfc:	40011000 	.word	0x40011000
 8001c00:	40004400 	.word	0x40004400
 8001c04:	58020c00 	.word	0x58020c00
 8001c08:	40004800 	.word	0x40004800

08001c0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b090      	sub	sp, #64	; 0x40
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM7 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b0f      	cmp	r3, #15
 8001c18:	d827      	bhi.n	8001c6a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	2037      	movs	r0, #55	; 0x37
 8001c20:	f001 fade 	bl	80031e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001c24:	2037      	movs	r0, #55	; 0x37
 8001c26:	f001 faf5 	bl	8003214 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001c2a:	4a29      	ldr	r2, [pc, #164]	; (8001cd0 <HAL_InitTick+0xc4>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001c30:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_InitTick+0xc8>)
 8001c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c36:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <HAL_InitTick+0xc8>)
 8001c38:	f043 0320 	orr.w	r3, r3, #32
 8001c3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_InitTick+0xc8>)
 8001c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c4e:	f107 0210 	add.w	r2, r7, #16
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4611      	mov	r1, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f002 fde9 	bl	8004830 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d106      	bne.n	8001c76 <HAL_InitTick+0x6a>
 8001c68:	e001      	b.n	8001c6e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e02b      	b.n	8001cc6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c6e:	f002 fdb3 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8001c72:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001c74:	e004      	b.n	8001c80 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c76:	f002 fdaf 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c82:	4a15      	ldr	r2, [pc, #84]	; (8001cd8 <HAL_InitTick+0xcc>)
 8001c84:	fba2 2303 	umull	r2, r3, r2, r3
 8001c88:	0c9b      	lsrs	r3, r3, #18
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_InitTick+0xd0>)
 8001c90:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <HAL_InitTick+0xd4>)
 8001c92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <HAL_InitTick+0xd0>)
 8001c96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c9a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001c9c:	4a0f      	ldr	r2, [pc, #60]	; (8001cdc <HAL_InitTick+0xd0>)
 8001c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_InitTick+0xd0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_InitTick+0xd0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8001cae:	480b      	ldr	r0, [pc, #44]	; (8001cdc <HAL_InitTick+0xd0>)
 8001cb0:	f005 f8ad 	bl	8006e0e <HAL_TIM_Base_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d104      	bne.n	8001cc4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8001cba:	4808      	ldr	r0, [pc, #32]	; (8001cdc <HAL_InitTick+0xd0>)
 8001cbc:	f005 f908 	bl	8006ed0 <HAL_TIM_Base_Start_IT>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	e000      	b.n	8001cc6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3740      	adds	r7, #64	; 0x40
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	24000008 	.word	0x24000008
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	431bde83 	.word	0x431bde83
 8001cdc:	24000d88 	.word	0x24000d88
 8001ce0:	40001400 	.word	0x40001400

08001ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <NMI_Handler+0x4>

08001cea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <HardFault_Handler+0x4>

08001cf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <MemManage_Handler+0x4>

08001cf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfa:	e7fe      	b.n	8001cfa <BusFault_Handler+0x4>

08001cfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d00:	e7fe      	b.n	8001d00 <UsageFault_Handler+0x4>

08001d02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <TIM7_IRQHandler+0x10>)
 8001d16:	f005 f9aa 	bl	800706e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	24000d88 	.word	0x24000d88

08001d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d28:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <SystemInit+0xe4>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2e:	4a36      	ldr	r2, [pc, #216]	; (8001e08 <SystemInit+0xe4>)
 8001d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d38:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <SystemInit+0xe8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	2b06      	cmp	r3, #6
 8001d42:	d807      	bhi.n	8001d54 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <SystemInit+0xe8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f023 030f 	bic.w	r3, r3, #15
 8001d4c:	4a2f      	ldr	r2, [pc, #188]	; (8001e0c <SystemInit+0xe8>)
 8001d4e:	f043 0307 	orr.w	r3, r3, #7
 8001d52:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d54:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <SystemInit+0xec>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <SystemInit+0xec>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d60:	4b2b      	ldr	r3, [pc, #172]	; (8001e10 <SystemInit+0xec>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <SystemInit+0xec>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4929      	ldr	r1, [pc, #164]	; (8001e10 <SystemInit+0xec>)
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <SystemInit+0xf0>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <SystemInit+0xe8>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d007      	beq.n	8001d8e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <SystemInit+0xe8>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 030f 	bic.w	r3, r3, #15
 8001d86:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <SystemInit+0xe8>)
 8001d88:	f043 0307 	orr.w	r3, r3, #7
 8001d8c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <SystemInit+0xec>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <SystemInit+0xec>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <SystemInit+0xec>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <SystemInit+0xec>)
 8001da2:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <SystemInit+0xf4>)
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <SystemInit+0xec>)
 8001da8:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <SystemInit+0xf8>)
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <SystemInit+0xec>)
 8001dae:	4a1c      	ldr	r2, [pc, #112]	; (8001e20 <SystemInit+0xfc>)
 8001db0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001db2:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <SystemInit+0xec>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001db8:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <SystemInit+0xec>)
 8001dba:	4a19      	ldr	r2, [pc, #100]	; (8001e20 <SystemInit+0xfc>)
 8001dbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <SystemInit+0xec>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <SystemInit+0xec>)
 8001dc6:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <SystemInit+0xfc>)
 8001dc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dca:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <SystemInit+0xec>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <SystemInit+0xec>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <SystemInit+0xec>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <SystemInit+0xec>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <SystemInit+0x100>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <SystemInit+0x104>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dee:	d202      	bcs.n	8001df6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001df0:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <SystemInit+0x108>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001df6:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <SystemInit+0x10c>)
 8001df8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001dfc:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00
 8001e0c:	52002000 	.word	0x52002000
 8001e10:	58024400 	.word	0x58024400
 8001e14:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e18:	02020200 	.word	0x02020200
 8001e1c:	01ff0000 	.word	0x01ff0000
 8001e20:	01010280 	.word	0x01010280
 8001e24:	5c001000 	.word	0x5c001000
 8001e28:	ffff0000 	.word	0xffff0000
 8001e2c:	51008108 	.word	0x51008108
 8001e30:	52004000 	.word	0x52004000

08001e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e38:	f7ff ff74 	bl	8001d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e3c:	480c      	ldr	r0, [pc, #48]	; (8001e70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e3e:	490d      	ldr	r1, [pc, #52]	; (8001e74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e44:	e002      	b.n	8001e4c <LoopCopyDataInit>

08001e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4a:	3304      	adds	r3, #4

08001e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e50:	d3f9      	bcc.n	8001e46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e54:	4c0a      	ldr	r4, [pc, #40]	; (8001e80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e58:	e001      	b.n	8001e5e <LoopFillZerobss>

08001e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e5c:	3204      	adds	r2, #4

08001e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e60:	d3fb      	bcc.n	8001e5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e62:	f009 fcab 	bl	800b7bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e66:	f7fe fbf1 	bl	800064c <main>
  bx  lr
 8001e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e74:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001e78:	0800bae0 	.word	0x0800bae0
  ldr r2, =_sbss
 8001e7c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001e80:	24004c70 	.word	0x24004c70

08001e84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC3_IRQHandler>
	...

08001e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f001 f99b 	bl	80031ca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e94:	f002 faf6 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <HAL_Init+0x68>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	0a1b      	lsrs	r3, r3, #8
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	4913      	ldr	r1, [pc, #76]	; (8001ef4 <HAL_Init+0x6c>)
 8001ea6:	5ccb      	ldrb	r3, [r1, r3]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_Init+0x68>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <HAL_Init+0x6c>)
 8001ebc:	5cd3      	ldrb	r3, [r2, r3]
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <HAL_Init+0x70>)
 8001eca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ecc:	4a0b      	ldr	r2, [pc, #44]	; (8001efc <HAL_Init+0x74>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed2:	200f      	movs	r0, #15
 8001ed4:	f7ff fe9a 	bl	8001c0c <HAL_InitTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e002      	b.n	8001ee8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ee2:	f7ff fa61 	bl	80013a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	58024400 	.word	0x58024400
 8001ef4:	0800ba38 	.word	0x0800ba38
 8001ef8:	24000004 	.word	0x24000004
 8001efc:	24000000 	.word	0x24000000

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x20>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_IncTick+0x24>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	2400000c 	.word	0x2400000c
 8001f24:	24000dd4 	.word	0x24000dd4

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_GetTick+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	24000dd4 	.word	0x24000dd4

08001f40 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetREVID+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	0c1b      	lsrs	r3, r3, #16
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	5c001000 	.word	0x5c001000

08001f58 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	609a      	str	r2, [r3, #8]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3360      	adds	r3, #96	; 0x60
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	431a      	orrs	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	611a      	str	r2, [r3, #16]
}
 8002026:	bf00      	nop
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002032:	b480      	push	{r7}
 8002034:	b087      	sub	sp, #28
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3360      	adds	r3, #96	; 0x60
 8002042:	461a      	mov	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	431a      	orrs	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	601a      	str	r2, [r3, #0]
  }
}
 800205c:	bf00      	nop
 800205e:	371c      	adds	r7, #28
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002068:	b480      	push	{r7}
 800206a:	b087      	sub	sp, #28
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3330      	adds	r3, #48	; 0x30
 8002078:	461a      	mov	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	4413      	add	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f003 031f 	and.w	r3, r3, #31
 8002092:	211f      	movs	r1, #31
 8002094:	fa01 f303 	lsl.w	r3, r1, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	401a      	ands	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0e9b      	lsrs	r3, r3, #26
 80020a0:	f003 011f 	and.w	r1, r3, #31
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	431a      	orrs	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3314      	adds	r3, #20
 80020d0:	461a      	mov	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	0e5b      	lsrs	r3, r3, #25
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	4413      	add	r3, r2
 80020de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	0d1b      	lsrs	r3, r3, #20
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	2107      	movs	r1, #7
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	401a      	ands	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	0d1b      	lsrs	r3, r3, #20
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	431a      	orrs	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002118:	b480      	push	{r7}
 800211a:	b085      	sub	sp, #20
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002130:	43db      	mvns	r3, r3
 8002132:	401a      	ands	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0318 	and.w	r3, r3, #24
 800213a:	4908      	ldr	r1, [pc, #32]	; (800215c <LL_ADC_SetChannelSingleDiff+0x44>)
 800213c:	40d9      	lsrs	r1, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	400b      	ands	r3, r1
 8002142:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002146:	431a      	orrs	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	000fffff 	.word	0x000fffff

08002160 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <LL_ADC_DisableDeepPowerDown+0x20>)
 800216e:	4013      	ands	r3, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6093      	str	r3, [r2, #8]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	5fffffc0 	.word	0x5fffffc0

08002184 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002198:	d101      	bne.n	800219e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800219a:	2301      	movs	r3, #1
 800219c:	e000      	b.n	80021a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	6fffffc0 	.word	0x6fffffc0

080021d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021e8:	d101      	bne.n	80021ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <LL_ADC_IsEnabled+0x18>
 8002210:	2301      	movs	r3, #1
 8002212:	e000      	b.n	8002216 <LL_ADC_IsEnabled+0x1a>
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	2b04      	cmp	r3, #4
 8002234:	d101      	bne.n	800223a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b08      	cmp	r3, #8
 800225a:	d101      	bne.n	8002260 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800225c:	2301      	movs	r3, #1
 800225e:	e000      	b.n	8002262 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e18f      	b.n	80025aa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002294:	2b00      	cmp	r3, #0
 8002296:	d109      	bne.n	80022ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff f8a3 	bl	80013e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff67 	bl	8002184 <LL_ADC_IsDeepPowerDownEnabled>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff4d 	bl	8002160 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff82 	bl	80021d4 <LL_ADC_IsInternalRegulatorEnabled>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d114      	bne.n	8002300 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff66 	bl	80021ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022e0:	4b87      	ldr	r3, [pc, #540]	; (8002500 <HAL_ADC_Init+0x290>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	099b      	lsrs	r3, r3, #6
 80022e6:	4a87      	ldr	r2, [pc, #540]	; (8002504 <HAL_ADC_Init+0x294>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	3301      	adds	r3, #1
 80022f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022f2:	e002      	b.n	80022fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f9      	bne.n	80022f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff65 	bl	80021d4 <LL_ADC_IsInternalRegulatorEnabled>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10d      	bne.n	800232c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002314:	f043 0210 	orr.w	r2, r3, #16
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff76 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 8002336:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233c:	f003 0310 	and.w	r3, r3, #16
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 8129 	bne.w	8002598 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 8125 	bne.w	8002598 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002352:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002356:	f043 0202 	orr.w	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ff4a 	bl	80021fc <LL_ADC_IsEnabled>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d136      	bne.n	80023dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a65      	ldr	r2, [pc, #404]	; (8002508 <HAL_ADC_Init+0x298>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d004      	beq.n	8002382 <HAL_ADC_Init+0x112>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a63      	ldr	r2, [pc, #396]	; (800250c <HAL_ADC_Init+0x29c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10e      	bne.n	80023a0 <HAL_ADC_Init+0x130>
 8002382:	4861      	ldr	r0, [pc, #388]	; (8002508 <HAL_ADC_Init+0x298>)
 8002384:	f7ff ff3a 	bl	80021fc <LL_ADC_IsEnabled>
 8002388:	4604      	mov	r4, r0
 800238a:	4860      	ldr	r0, [pc, #384]	; (800250c <HAL_ADC_Init+0x29c>)
 800238c:	f7ff ff36 	bl	80021fc <LL_ADC_IsEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	4323      	orrs	r3, r4
 8002394:	2b00      	cmp	r3, #0
 8002396:	bf0c      	ite	eq
 8002398:	2301      	moveq	r3, #1
 800239a:	2300      	movne	r3, #0
 800239c:	b2db      	uxtb	r3, r3
 800239e:	e008      	b.n	80023b2 <HAL_ADC_Init+0x142>
 80023a0:	485b      	ldr	r0, [pc, #364]	; (8002510 <HAL_ADC_Init+0x2a0>)
 80023a2:	f7ff ff2b 	bl	80021fc <LL_ADC_IsEnabled>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf0c      	ite	eq
 80023ac:	2301      	moveq	r3, #1
 80023ae:	2300      	movne	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d012      	beq.n	80023dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a53      	ldr	r2, [pc, #332]	; (8002508 <HAL_ADC_Init+0x298>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d004      	beq.n	80023ca <HAL_ADC_Init+0x15a>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a51      	ldr	r2, [pc, #324]	; (800250c <HAL_ADC_Init+0x29c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_Init+0x15e>
 80023ca:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_ADC_Init+0x2a4>)
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_Init+0x160>
 80023ce:	4a52      	ldr	r2, [pc, #328]	; (8002518 <HAL_ADC_Init+0x2a8>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4619      	mov	r1, r3
 80023d6:	4610      	mov	r0, r2
 80023d8:	f7ff fdbe 	bl	8001f58 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80023dc:	f7ff fdb0 	bl	8001f40 <HAL_GetREVID>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d914      	bls.n	8002414 <HAL_ADC_Init+0x1a4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d110      	bne.n	8002414 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7d5b      	ldrb	r3, [r3, #21]
 80023f6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80023fc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002402:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7f1b      	ldrb	r3, [r3, #28]
 8002408:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800240a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800240c:	f043 030c 	orr.w	r3, r3, #12
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	e00d      	b.n	8002430 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7d5b      	ldrb	r3, [r3, #21]
 8002418:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800241e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002424:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7f1b      	ldrb	r3, [r3, #28]
 800242a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7f1b      	ldrb	r3, [r3, #28]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d106      	bne.n	8002446 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	3b01      	subs	r3, #1
 800243e:	045b      	lsls	r3, r3, #17
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	4b2c      	ldr	r3, [pc, #176]	; (800251c <HAL_ADC_Init+0x2ac>)
 800246a:	4013      	ands	r3, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	69b9      	ldr	r1, [r7, #24]
 8002472:	430b      	orrs	r3, r1
 8002474:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fed1 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 8002480:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fede 	bl	8002248 <LL_ADC_INJ_IsConversionOngoing>
 800248c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d15f      	bne.n	8002554 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d15c      	bne.n	8002554 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7d1b      	ldrb	r3, [r3, #20]
 800249e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HAL_ADC_Init+0x2b0>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	6812      	ldr	r2, [r2, #0]
 80024b6:	69b9      	ldr	r1, [r7, #24]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d130      	bne.n	8002528 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_ADC_Init+0x2b4>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024da:	3a01      	subs	r2, #1
 80024dc:	0411      	lsls	r1, r2, #16
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024e2:	4311      	orrs	r1, r2
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024e8:	4311      	orrs	r1, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024ee:	430a      	orrs	r2, r1
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	611a      	str	r2, [r3, #16]
 80024fc:	e01c      	b.n	8002538 <HAL_ADC_Init+0x2c8>
 80024fe:	bf00      	nop
 8002500:	24000000 	.word	0x24000000
 8002504:	053e2d63 	.word	0x053e2d63
 8002508:	40022000 	.word	0x40022000
 800250c:	40022100 	.word	0x40022100
 8002510:	58026000 	.word	0x58026000
 8002514:	40022300 	.word	0x40022300
 8002518:	58026300 	.word	0x58026300
 800251c:	fff0c003 	.word	0xfff0c003
 8002520:	ffffbffc 	.word	0xffffbffc
 8002524:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fb80 	bl	8002c54 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10c      	bne.n	8002576 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002562:	f023 010f 	bic.w	r1, r3, #15
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	1e5a      	subs	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
 8002574:	e007      	b.n	8002586 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 020f 	bic.w	r2, r2, #15
 8002584:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	f023 0303 	bic.w	r3, r3, #3
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
 8002596:	e007      	b.n	80025a8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	f043 0210 	orr.w	r2, r3, #16
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd90      	pop	{r4, r7, pc}
 80025b2:	bf00      	nop

080025b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b0a1      	sub	sp, #132	; 0x84
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a9d      	ldr	r2, [pc, #628]	; (8002844 <HAL_ADC_ConfigChannel+0x290>)
 80025ce:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x2a>
 80025da:	2302      	movs	r3, #2
 80025dc:	e321      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x66e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fe19 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 8306 	bne.w	8002c04 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002600:	2b00      	cmp	r3, #0
 8002602:	d108      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x62>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	0e9b      	lsrs	r3, r3, #26
 800260a:	f003 031f 	and.w	r3, r3, #31
 800260e:	2201      	movs	r2, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	e016      	b.n	8002644 <HAL_ADC_ConfigChannel+0x90>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002626:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800262e:	2320      	movs	r3, #32
 8002630:	e003      	b.n	800263a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	f003 031f 	and.w	r3, r3, #31
 800263e:	2201      	movs	r2, #1
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	69d1      	ldr	r1, [r2, #28]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	430b      	orrs	r3, r1
 8002650:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	461a      	mov	r2, r3
 8002660:	f7ff fd02 	bl	8002068 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fdda 	bl	8002222 <LL_ADC_REG_IsConversionOngoing>
 800266e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fde7 	bl	8002248 <LL_ADC_INJ_IsConversionOngoing>
 800267a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800267c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800267e:	2b00      	cmp	r3, #0
 8002680:	f040 80b3 	bne.w	80027ea <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002686:	2b00      	cmp	r3, #0
 8002688:	f040 80af 	bne.w	80027ea <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	461a      	mov	r2, r3
 800269a:	f7ff fd11 	bl	80020c0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800269e:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <HAL_ADC_ConfigChannel+0x294>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80026a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026aa:	d10b      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x110>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	089b      	lsrs	r3, r3, #2
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	e01d      	b.n	8002700 <HAL_ADC_ConfigChannel+0x14c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10b      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x136>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	089b      	lsrs	r3, r3, #2
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	e00a      	b.n	8002700 <HAL_ADC_ConfigChannel+0x14c>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002700:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	2b04      	cmp	r3, #4
 8002708:	d027      	beq.n	800275a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6818      	ldr	r0, [r3, #0]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6919      	ldr	r1, [r3, #16]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002718:	f7ff fc52 	bl	8001fc0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6919      	ldr	r1, [r3, #16]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	7e5b      	ldrb	r3, [r3, #25]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d102      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x17e>
 800272c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002730:	e000      	b.n	8002734 <HAL_ADC_ConfigChannel+0x180>
 8002732:	2300      	movs	r3, #0
 8002734:	461a      	mov	r2, r3
 8002736:	f7ff fc7c 	bl	8002032 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6818      	ldr	r0, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6919      	ldr	r1, [r3, #16]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	7e1b      	ldrb	r3, [r3, #24]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d102      	bne.n	8002750 <HAL_ADC_ConfigChannel+0x19c>
 800274a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800274e:	e000      	b.n	8002752 <HAL_ADC_ConfigChannel+0x19e>
 8002750:	2300      	movs	r3, #0
 8002752:	461a      	mov	r2, r3
 8002754:	f7ff fc54 	bl	8002000 <LL_ADC_SetDataRightShift>
 8002758:	e047      	b.n	80027ea <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002760:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	069b      	lsls	r3, r3, #26
 800276a:	429a      	cmp	r2, r3
 800276c:	d107      	bne.n	800277e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800277c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002784:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	069b      	lsls	r3, r3, #26
 800278e:	429a      	cmp	r2, r3
 8002790:	d107      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027a0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	069b      	lsls	r3, r3, #26
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d107      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027c4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	069b      	lsls	r3, r3, #26
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d107      	bne.n	80027ea <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027e8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fd04 	bl	80021fc <LL_ADC_IsEnabled>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 820d 	bne.w	8002c16 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	461a      	mov	r2, r3
 800280a:	f7ff fc85 	bl	8002118 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a0c      	ldr	r2, [pc, #48]	; (8002844 <HAL_ADC_ConfigChannel+0x290>)
 8002814:	4293      	cmp	r3, r2
 8002816:	f040 8133 	bne.w	8002a80 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002826:	2b00      	cmp	r3, #0
 8002828:	d110      	bne.n	800284c <HAL_ADC_ConfigChannel+0x298>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	0e9b      	lsrs	r3, r3, #26
 8002830:	3301      	adds	r3, #1
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2b09      	cmp	r3, #9
 8002838:	bf94      	ite	ls
 800283a:	2301      	movls	r3, #1
 800283c:	2300      	movhi	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	e01e      	b.n	8002880 <HAL_ADC_ConfigChannel+0x2cc>
 8002842:	bf00      	nop
 8002844:	47ff0000 	.word	0x47ff0000
 8002848:	5c001000 	.word	0x5c001000
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800285a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800285e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002864:	2320      	movs	r3, #32
 8002866:	e003      	b.n	8002870 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002868:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	3301      	adds	r3, #1
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2b09      	cmp	r3, #9
 8002878:	bf94      	ite	ls
 800287a:	2301      	movls	r3, #1
 800287c:	2300      	movhi	r3, #0
 800287e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002880:	2b00      	cmp	r3, #0
 8002882:	d079      	beq.n	8002978 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x2ec>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0e9b      	lsrs	r3, r3, #26
 8002896:	3301      	adds	r3, #1
 8002898:	069b      	lsls	r3, r3, #26
 800289a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289e:	e015      	b.n	80028cc <HAL_ADC_ConfigChannel+0x318>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a8:	fa93 f3a3 	rbit	r3, r3
 80028ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80028ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80028b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80028b8:	2320      	movs	r3, #32
 80028ba:	e003      	b.n	80028c4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80028bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028be:	fab3 f383 	clz	r3, r3
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	3301      	adds	r3, #1
 80028c6:	069b      	lsls	r3, r3, #26
 80028c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d109      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x338>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	0e9b      	lsrs	r3, r3, #26
 80028de:	3301      	adds	r3, #1
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	2101      	movs	r1, #1
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	e017      	b.n	800291c <HAL_ADC_ConfigChannel+0x368>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80028fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80028fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002904:	2320      	movs	r3, #32
 8002906:	e003      	b.n	8002910 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800290a:	fab3 f383 	clz	r3, r3
 800290e:	b2db      	uxtb	r3, r3
 8002910:	3301      	adds	r3, #1
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	2101      	movs	r1, #1
 8002918:	fa01 f303 	lsl.w	r3, r1, r3
 800291c:	ea42 0103 	orr.w	r1, r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x38e>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	3301      	adds	r3, #1
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	051b      	lsls	r3, r3, #20
 8002940:	e018      	b.n	8002974 <HAL_ADC_ConfigChannel+0x3c0>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800295a:	2320      	movs	r3, #32
 800295c:	e003      	b.n	8002966 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	f003 021f 	and.w	r2, r3, #31
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002974:	430b      	orrs	r3, r1
 8002976:	e07e      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x3e0>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0e9b      	lsrs	r3, r3, #26
 800298a:	3301      	adds	r3, #1
 800298c:	069b      	lsls	r3, r3, #26
 800298e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002992:	e015      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x40c>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80029a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80029ac:	2320      	movs	r3, #32
 80029ae:	e003      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	3301      	adds	r3, #1
 80029ba:	069b      	lsls	r3, r3, #26
 80029bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x42c>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	3301      	adds	r3, #1
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	e017      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x45c>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	fa93 f3a3 	rbit	r3, r3
 80029ec:	61bb      	str	r3, [r7, #24]
  return result;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e003      	b.n	8002a04 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	fab3 f383 	clz	r3, r3
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a10:	ea42 0103 	orr.w	r1, r2, r3
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x488>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	0e9b      	lsrs	r3, r3, #26
 8002a26:	3301      	adds	r3, #1
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	3b1e      	subs	r3, #30
 8002a34:	051b      	lsls	r3, r3, #20
 8002a36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	e01b      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x4c0>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	60fb      	str	r3, [r7, #12]
  return result;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	e003      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f003 021f 	and.w	r2, r3, #31
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b1e      	subs	r3, #30
 8002a6e:	051b      	lsls	r3, r3, #20
 8002a70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a74:	430b      	orrs	r3, r1
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	6892      	ldr	r2, [r2, #8]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f7ff fb20 	bl	80020c0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f280 80c6 	bge.w	8002c16 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a67      	ldr	r2, [pc, #412]	; (8002c2c <HAL_ADC_ConfigChannel+0x678>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x4ea>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a65      	ldr	r2, [pc, #404]	; (8002c30 <HAL_ADC_ConfigChannel+0x67c>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_ADC_ConfigChannel+0x4ee>
 8002a9e:	4b65      	ldr	r3, [pc, #404]	; (8002c34 <HAL_ADC_ConfigChannel+0x680>)
 8002aa0:	e000      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x4f0>
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <HAL_ADC_ConfigChannel+0x684>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fa7d 	bl	8001fa4 <LL_ADC_GetCommonPathInternalCh>
 8002aaa:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5e      	ldr	r2, [pc, #376]	; (8002c2c <HAL_ADC_ConfigChannel+0x678>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d004      	beq.n	8002ac0 <HAL_ADC_ConfigChannel+0x50c>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5d      	ldr	r2, [pc, #372]	; (8002c30 <HAL_ADC_ConfigChannel+0x67c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d10e      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x52a>
 8002ac0:	485a      	ldr	r0, [pc, #360]	; (8002c2c <HAL_ADC_ConfigChannel+0x678>)
 8002ac2:	f7ff fb9b 	bl	80021fc <LL_ADC_IsEnabled>
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	4859      	ldr	r0, [pc, #356]	; (8002c30 <HAL_ADC_ConfigChannel+0x67c>)
 8002aca:	f7ff fb97 	bl	80021fc <LL_ADC_IsEnabled>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4323      	orrs	r3, r4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	bf0c      	ite	eq
 8002ad6:	2301      	moveq	r3, #1
 8002ad8:	2300      	movne	r3, #0
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	e008      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x53c>
 8002ade:	4857      	ldr	r0, [pc, #348]	; (8002c3c <HAL_ADC_ConfigChannel+0x688>)
 8002ae0:	f7ff fb8c 	bl	80021fc <LL_ADC_IsEnabled>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf0c      	ite	eq
 8002aea:	2301      	moveq	r3, #1
 8002aec:	2300      	movne	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d07d      	beq.n	8002bf0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a51      	ldr	r2, [pc, #324]	; (8002c40 <HAL_ADC_ConfigChannel+0x68c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d130      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x5ac>
 8002afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d12b      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a4b      	ldr	r2, [pc, #300]	; (8002c3c <HAL_ADC_ConfigChannel+0x688>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	f040 8081 	bne.w	8002c16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a44      	ldr	r2, [pc, #272]	; (8002c2c <HAL_ADC_ConfigChannel+0x678>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d004      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0x574>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a43      	ldr	r2, [pc, #268]	; (8002c30 <HAL_ADC_ConfigChannel+0x67c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d101      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x578>
 8002b28:	4a42      	ldr	r2, [pc, #264]	; (8002c34 <HAL_ADC_ConfigChannel+0x680>)
 8002b2a:	e000      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x57a>
 8002b2c:	4a42      	ldr	r2, [pc, #264]	; (8002c38 <HAL_ADC_ConfigChannel+0x684>)
 8002b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f7ff fa21 	bl	8001f7e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b3c:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <HAL_ADC_ConfigChannel+0x690>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	4a41      	ldr	r2, [pc, #260]	; (8002c48 <HAL_ADC_ConfigChannel+0x694>)
 8002b44:	fba2 2303 	umull	r2, r3, r2, r3
 8002b48:	099b      	lsrs	r3, r3, #6
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b50:	e002      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3b01      	subs	r3, #1
 8002b56:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1f9      	bne.n	8002b52 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b5e:	e05a      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a39      	ldr	r2, [pc, #228]	; (8002c4c <HAL_ADC_ConfigChannel+0x698>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d11e      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x5f4>
 8002b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d119      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a30      	ldr	r2, [pc, #192]	; (8002c3c <HAL_ADC_ConfigChannel+0x688>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d14b      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a2a      	ldr	r2, [pc, #168]	; (8002c2c <HAL_ADC_ConfigChannel+0x678>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d004      	beq.n	8002b92 <HAL_ADC_ConfigChannel+0x5de>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a28      	ldr	r2, [pc, #160]	; (8002c30 <HAL_ADC_ConfigChannel+0x67c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x5e2>
 8002b92:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <HAL_ADC_ConfigChannel+0x680>)
 8002b94:	e000      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x5e4>
 8002b96:	4a28      	ldr	r2, [pc, #160]	; (8002c38 <HAL_ADC_ConfigChannel+0x684>)
 8002b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	4610      	mov	r0, r2
 8002ba2:	f7ff f9ec 	bl	8001f7e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ba6:	e036      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a28      	ldr	r2, [pc, #160]	; (8002c50 <HAL_ADC_ConfigChannel+0x69c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d131      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x662>
 8002bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d12c      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a1e      	ldr	r2, [pc, #120]	; (8002c3c <HAL_ADC_ConfigChannel+0x688>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d127      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <HAL_ADC_ConfigChannel+0x678>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x626>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a16      	ldr	r2, [pc, #88]	; (8002c30 <HAL_ADC_ConfigChannel+0x67c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x62a>
 8002bda:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <HAL_ADC_ConfigChannel+0x680>)
 8002bdc:	e000      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x62c>
 8002bde:	4a16      	ldr	r2, [pc, #88]	; (8002c38 <HAL_ADC_ConfigChannel+0x684>)
 8002be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002be6:	4619      	mov	r1, r3
 8002be8:	4610      	mov	r0, r2
 8002bea:	f7ff f9c8 	bl	8001f7e <LL_ADC_SetCommonPathInternalCh>
 8002bee:	e012      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf4:	f043 0220 	orr.w	r2, r3, #32
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c02:	e008      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3784      	adds	r7, #132	; 0x84
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40022000 	.word	0x40022000
 8002c30:	40022100 	.word	0x40022100
 8002c34:	40022300 	.word	0x40022300
 8002c38:	58026300 	.word	0x58026300
 8002c3c:	58026000 	.word	0x58026000
 8002c40:	cb840000 	.word	0xcb840000
 8002c44:	24000000 	.word	0x24000000
 8002c48:	053e2d63 	.word	0x053e2d63
 8002c4c:	c7520000 	.word	0xc7520000
 8002c50:	cfb80000 	.word	0xcfb80000

08002c54 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a79      	ldr	r2, [pc, #484]	; (8002e48 <ADC_ConfigureBoostMode+0x1f4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d004      	beq.n	8002c70 <ADC_ConfigureBoostMode+0x1c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a78      	ldr	r2, [pc, #480]	; (8002e4c <ADC_ConfigureBoostMode+0x1f8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d109      	bne.n	8002c84 <ADC_ConfigureBoostMode+0x30>
 8002c70:	4b77      	ldr	r3, [pc, #476]	; (8002e50 <ADC_ConfigureBoostMode+0x1fc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e008      	b.n	8002c96 <ADC_ConfigureBoostMode+0x42>
 8002c84:	4b73      	ldr	r3, [pc, #460]	; (8002e54 <ADC_ConfigureBoostMode+0x200>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01c      	beq.n	8002cd4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002c9a:	f001 fd6d 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 8002c9e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ca8:	d010      	beq.n	8002ccc <ADC_ConfigureBoostMode+0x78>
 8002caa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cae:	d871      	bhi.n	8002d94 <ADC_ConfigureBoostMode+0x140>
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d002      	beq.n	8002cbc <ADC_ConfigureBoostMode+0x68>
 8002cb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cba:	d16b      	bne.n	8002d94 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	60fb      	str	r3, [r7, #12]
        break;
 8002cca:	e066      	b.n	8002d9a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	089b      	lsrs	r3, r3, #2
 8002cd0:	60fb      	str	r3, [r7, #12]
        break;
 8002cd2:	e062      	b.n	8002d9a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002cd4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002cd8:	f002 fd32 	bl	8005740 <HAL_RCCEx_GetPeriphCLKFreq>
 8002cdc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002ce6:	d051      	beq.n	8002d8c <ADC_ConfigureBoostMode+0x138>
 8002ce8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002cec:	d854      	bhi.n	8002d98 <ADC_ConfigureBoostMode+0x144>
 8002cee:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002cf2:	d047      	beq.n	8002d84 <ADC_ConfigureBoostMode+0x130>
 8002cf4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002cf8:	d84e      	bhi.n	8002d98 <ADC_ConfigureBoostMode+0x144>
 8002cfa:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002cfe:	d03d      	beq.n	8002d7c <ADC_ConfigureBoostMode+0x128>
 8002d00:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d04:	d848      	bhi.n	8002d98 <ADC_ConfigureBoostMode+0x144>
 8002d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d0a:	d033      	beq.n	8002d74 <ADC_ConfigureBoostMode+0x120>
 8002d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d10:	d842      	bhi.n	8002d98 <ADC_ConfigureBoostMode+0x144>
 8002d12:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d16:	d029      	beq.n	8002d6c <ADC_ConfigureBoostMode+0x118>
 8002d18:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d1c:	d83c      	bhi.n	8002d98 <ADC_ConfigureBoostMode+0x144>
 8002d1e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d22:	d01a      	beq.n	8002d5a <ADC_ConfigureBoostMode+0x106>
 8002d24:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d28:	d836      	bhi.n	8002d98 <ADC_ConfigureBoostMode+0x144>
 8002d2a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d2e:	d014      	beq.n	8002d5a <ADC_ConfigureBoostMode+0x106>
 8002d30:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d34:	d830      	bhi.n	8002d98 <ADC_ConfigureBoostMode+0x144>
 8002d36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d3a:	d00e      	beq.n	8002d5a <ADC_ConfigureBoostMode+0x106>
 8002d3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d40:	d82a      	bhi.n	8002d98 <ADC_ConfigureBoostMode+0x144>
 8002d42:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d46:	d008      	beq.n	8002d5a <ADC_ConfigureBoostMode+0x106>
 8002d48:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d4c:	d824      	bhi.n	8002d98 <ADC_ConfigureBoostMode+0x144>
 8002d4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d52:	d002      	beq.n	8002d5a <ADC_ConfigureBoostMode+0x106>
 8002d54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d58:	d11e      	bne.n	8002d98 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	0c9b      	lsrs	r3, r3, #18
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	60fb      	str	r3, [r7, #12]
        break;
 8002d6a:	e016      	b.n	8002d9a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	60fb      	str	r3, [r7, #12]
        break;
 8002d72:	e012      	b.n	8002d9a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	60fb      	str	r3, [r7, #12]
        break;
 8002d7a:	e00e      	b.n	8002d9a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	099b      	lsrs	r3, r3, #6
 8002d80:	60fb      	str	r3, [r7, #12]
        break;
 8002d82:	e00a      	b.n	8002d9a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	09db      	lsrs	r3, r3, #7
 8002d88:	60fb      	str	r3, [r7, #12]
        break;
 8002d8a:	e006      	b.n	8002d9a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	60fb      	str	r3, [r7, #12]
        break;
 8002d92:	e002      	b.n	8002d9a <ADC_ConfigureBoostMode+0x146>
        break;
 8002d94:	bf00      	nop
 8002d96:	e000      	b.n	8002d9a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002d98:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002d9a:	f7ff f8d1 	bl	8001f40 <HAL_GetREVID>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d815      	bhi.n	8002dd4 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <ADC_ConfigureBoostMode+0x204>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d908      	bls.n	8002dc2 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dbe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002dc0:	e03e      	b.n	8002e40 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd0:	609a      	str	r2, [r3, #8]
}
 8002dd2:	e035      	b.n	8002e40 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	085b      	lsrs	r3, r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4a1f      	ldr	r2, [pc, #124]	; (8002e5c <ADC_ConfigureBoostMode+0x208>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d808      	bhi.n	8002df4 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002df0:	609a      	str	r2, [r3, #8]
}
 8002df2:	e025      	b.n	8002e40 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4a1a      	ldr	r2, [pc, #104]	; (8002e60 <ADC_ConfigureBoostMode+0x20c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d80a      	bhi.n	8002e12 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	e016      	b.n	8002e40 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <ADC_ConfigureBoostMode+0x210>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d80a      	bhi.n	8002e30 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2c:	609a      	str	r2, [r3, #8]
}
 8002e2e:	e007      	b.n	8002e40 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40022000 	.word	0x40022000
 8002e4c:	40022100 	.word	0x40022100
 8002e50:	40022300 	.word	0x40022300
 8002e54:	58026300 	.word	0x58026300
 8002e58:	01312d00 	.word	0x01312d00
 8002e5c:	005f5e10 	.word	0x005f5e10
 8002e60:	00bebc20 	.word	0x00bebc20
 8002e64:	017d7840 	.word	0x017d7840

08002e68 <LL_ADC_IsEnabled>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <LL_ADC_IsEnabled+0x18>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <LL_ADC_IsEnabled+0x1a>
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_ADC_REG_IsConversionOngoing>:
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d101      	bne.n	8002ea6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b09f      	sub	sp, #124	; 0x7c
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e0be      	b.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002eda:	2300      	movs	r3, #0
 8002edc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a5c      	ldr	r2, [pc, #368]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d102      	bne.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002eec:	4b5b      	ldr	r3, [pc, #364]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	e001      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10b      	bne.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e09d      	b.n	8003050 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ffb9 	bl	8002e8e <LL_ADC_REG_IsConversionOngoing>
 8002f1c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ffb3 	bl	8002e8e <LL_ADC_REG_IsConversionOngoing>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d17f      	bne.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d17c      	bne.n	800302e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a47      	ldr	r2, [pc, #284]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d004      	beq.n	8002f48 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a46      	ldr	r2, [pc, #280]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d101      	bne.n	8002f4c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002f48:	4b45      	ldr	r3, [pc, #276]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002f4a:	e000      	b.n	8002f4e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002f4c:	4b45      	ldr	r3, [pc, #276]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002f4e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d039      	beq.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f68:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a3a      	ldr	r2, [pc, #232]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d004      	beq.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a38      	ldr	r2, [pc, #224]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10e      	bne.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f7e:	4836      	ldr	r0, [pc, #216]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f80:	f7ff ff72 	bl	8002e68 <LL_ADC_IsEnabled>
 8002f84:	4604      	mov	r4, r0
 8002f86:	4835      	ldr	r0, [pc, #212]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f88:	f7ff ff6e 	bl	8002e68 <LL_ADC_IsEnabled>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	4323      	orrs	r3, r4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e008      	b.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002f9c:	4832      	ldr	r0, [pc, #200]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f9e:	f7ff ff63 	bl	8002e68 <LL_ADC_IsEnabled>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d047      	beq.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	6811      	ldr	r1, [r2, #0]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	6892      	ldr	r2, [r2, #8]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fca:	e03a      	b.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1e      	ldr	r2, [pc, #120]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1d      	ldr	r2, [pc, #116]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d10e      	bne.n	800300a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002fec:	481a      	ldr	r0, [pc, #104]	; (8003058 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002fee:	f7ff ff3b 	bl	8002e68 <LL_ADC_IsEnabled>
 8002ff2:	4604      	mov	r4, r0
 8002ff4:	4819      	ldr	r0, [pc, #100]	; (800305c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ff6:	f7ff ff37 	bl	8002e68 <LL_ADC_IsEnabled>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4323      	orrs	r3, r4
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	e008      	b.n	800301c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800300a:	4817      	ldr	r0, [pc, #92]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800300c:	f7ff ff2c 	bl	8002e68 <LL_ADC_IsEnabled>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf0c      	ite	eq
 8003016:	2301      	moveq	r3, #1
 8003018:	2300      	movne	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d010      	beq.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	4b11      	ldr	r3, [pc, #68]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003026:	4013      	ands	r3, r2
 8003028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800302a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800302c:	e009      	b.n	8003042 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003040:	e000      	b.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003042:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800304c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003050:	4618      	mov	r0, r3
 8003052:	377c      	adds	r7, #124	; 0x7c
 8003054:	46bd      	mov	sp, r7
 8003056:	bd90      	pop	{r4, r7, pc}
 8003058:	40022000 	.word	0x40022000
 800305c:	40022100 	.word	0x40022100
 8003060:	40022300 	.word	0x40022300
 8003064:	58026300 	.word	0x58026300
 8003068:	58026000 	.word	0x58026000
 800306c:	fffff0e0 	.word	0xfffff0e0

08003070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003080:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <__NVIC_SetPriorityGrouping+0x40>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 800309a:	4313      	orrs	r3, r2
 800309c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800309e:	4a04      	ldr	r2, [pc, #16]	; (80030b0 <__NVIC_SetPriorityGrouping+0x40>)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	60d3      	str	r3, [r2, #12]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	e000ed00 	.word	0xe000ed00
 80030b4:	05fa0000 	.word	0x05fa0000

080030b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <__NVIC_GetPriorityGrouping+0x18>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0307 	and.w	r3, r3, #7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <__NVIC_EnableIRQ+0x38>)
 80030ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	; (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	; (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f7ff ff4c 	bl	8003070 <__NVIC_SetPriorityGrouping>
}
 80031d8:	bf00      	nop
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031ee:	f7ff ff63 	bl	80030b8 <__NVIC_GetPriorityGrouping>
 80031f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	6978      	ldr	r0, [r7, #20]
 80031fa:	f7ff ffb3 	bl	8003164 <NVIC_EncodePriority>
 80031fe:	4602      	mov	r2, r0
 8003200:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff ff82 	bl	8003110 <__NVIC_SetPriority>
}
 800320c:	bf00      	nop
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800321e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff ff56 	bl	80030d4 <__NVIC_EnableIRQ>
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	; 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800323e:	4b89      	ldr	r3, [pc, #548]	; (8003464 <HAL_GPIO_Init+0x234>)
 8003240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003242:	e194      	b.n	800356e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	2101      	movs	r1, #1
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	fa01 f303 	lsl.w	r3, r1, r3
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8186 	beq.w	8003568 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d005      	beq.n	8003274 <HAL_GPIO_Init+0x44>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 0303 	and.w	r3, r3, #3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d130      	bne.n	80032d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032aa:	2201      	movs	r2, #1
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	091b      	lsrs	r3, r3, #4
 80032c0:	f003 0201 	and.w	r2, r3, #1
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d017      	beq.n	8003312 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	2203      	movs	r2, #3
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d123      	bne.n	8003366 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	08da      	lsrs	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3208      	adds	r2, #8
 8003326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	220f      	movs	r2, #15
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	08da      	lsrs	r2, r3, #3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3208      	adds	r2, #8
 8003360:	69b9      	ldr	r1, [r7, #24]
 8003362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	2203      	movs	r2, #3
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0203 	and.w	r2, r3, #3
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80e0 	beq.w	8003568 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a8:	4b2f      	ldr	r3, [pc, #188]	; (8003468 <HAL_GPIO_Init+0x238>)
 80033aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033ae:	4a2e      	ldr	r2, [pc, #184]	; (8003468 <HAL_GPIO_Init+0x238>)
 80033b0:	f043 0302 	orr.w	r3, r3, #2
 80033b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_GPIO_Init+0x238>)
 80033ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033c6:	4a29      	ldr	r2, [pc, #164]	; (800346c <HAL_GPIO_Init+0x23c>)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3302      	adds	r3, #2
 80033ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a20      	ldr	r2, [pc, #128]	; (8003470 <HAL_GPIO_Init+0x240>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d052      	beq.n	8003498 <HAL_GPIO_Init+0x268>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <HAL_GPIO_Init+0x244>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d031      	beq.n	800345e <HAL_GPIO_Init+0x22e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <HAL_GPIO_Init+0x248>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d02b      	beq.n	800345a <HAL_GPIO_Init+0x22a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_GPIO_Init+0x24c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d025      	beq.n	8003456 <HAL_GPIO_Init+0x226>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <HAL_GPIO_Init+0x250>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01f      	beq.n	8003452 <HAL_GPIO_Init+0x222>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a1b      	ldr	r2, [pc, #108]	; (8003484 <HAL_GPIO_Init+0x254>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d019      	beq.n	800344e <HAL_GPIO_Init+0x21e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <HAL_GPIO_Init+0x258>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d013      	beq.n	800344a <HAL_GPIO_Init+0x21a>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_GPIO_Init+0x25c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00d      	beq.n	8003446 <HAL_GPIO_Init+0x216>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_GPIO_Init+0x260>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <HAL_GPIO_Init+0x212>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a17      	ldr	r2, [pc, #92]	; (8003494 <HAL_GPIO_Init+0x264>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d101      	bne.n	800343e <HAL_GPIO_Init+0x20e>
 800343a:	2309      	movs	r3, #9
 800343c:	e02d      	b.n	800349a <HAL_GPIO_Init+0x26a>
 800343e:	230a      	movs	r3, #10
 8003440:	e02b      	b.n	800349a <HAL_GPIO_Init+0x26a>
 8003442:	2308      	movs	r3, #8
 8003444:	e029      	b.n	800349a <HAL_GPIO_Init+0x26a>
 8003446:	2307      	movs	r3, #7
 8003448:	e027      	b.n	800349a <HAL_GPIO_Init+0x26a>
 800344a:	2306      	movs	r3, #6
 800344c:	e025      	b.n	800349a <HAL_GPIO_Init+0x26a>
 800344e:	2305      	movs	r3, #5
 8003450:	e023      	b.n	800349a <HAL_GPIO_Init+0x26a>
 8003452:	2304      	movs	r3, #4
 8003454:	e021      	b.n	800349a <HAL_GPIO_Init+0x26a>
 8003456:	2303      	movs	r3, #3
 8003458:	e01f      	b.n	800349a <HAL_GPIO_Init+0x26a>
 800345a:	2302      	movs	r3, #2
 800345c:	e01d      	b.n	800349a <HAL_GPIO_Init+0x26a>
 800345e:	2301      	movs	r3, #1
 8003460:	e01b      	b.n	800349a <HAL_GPIO_Init+0x26a>
 8003462:	bf00      	nop
 8003464:	58000080 	.word	0x58000080
 8003468:	58024400 	.word	0x58024400
 800346c:	58000400 	.word	0x58000400
 8003470:	58020000 	.word	0x58020000
 8003474:	58020400 	.word	0x58020400
 8003478:	58020800 	.word	0x58020800
 800347c:	58020c00 	.word	0x58020c00
 8003480:	58021000 	.word	0x58021000
 8003484:	58021400 	.word	0x58021400
 8003488:	58021800 	.word	0x58021800
 800348c:	58021c00 	.word	0x58021c00
 8003490:	58022000 	.word	0x58022000
 8003494:	58022400 	.word	0x58022400
 8003498:	2300      	movs	r3, #0
 800349a:	69fa      	ldr	r2, [r7, #28]
 800349c:	f002 0203 	and.w	r2, r2, #3
 80034a0:	0092      	lsls	r2, r2, #2
 80034a2:	4093      	lsls	r3, r2
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034aa:	4938      	ldr	r1, [pc, #224]	; (800358c <HAL_GPIO_Init+0x35c>)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	089b      	lsrs	r3, r3, #2
 80034b0:	3302      	adds	r3, #2
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80034de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e2:	69bb      	ldr	r3, [r7, #24]
 80034e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80034e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800350c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	3301      	adds	r3, #1
 800356c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa22 f303 	lsr.w	r3, r2, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	f47f ae63 	bne.w	8003244 <HAL_GPIO_Init+0x14>
  }
}
 800357e:	bf00      	nop
 8003580:	bf00      	nop
 8003582:	3724      	adds	r7, #36	; 0x24
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	58000400 	.word	0x58000400

08003590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
 800359c:	4613      	mov	r3, r2
 800359e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035a0:	787b      	ldrb	r3, [r7, #1]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80035ac:	e003      	b.n	80035b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	041a      	lsls	r2, r3, #16
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	619a      	str	r2, [r3, #24]
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035d4:	887a      	ldrh	r2, [r7, #2]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4013      	ands	r3, r2
 80035da:	041a      	lsls	r2, r3, #16
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	43d9      	mvns	r1, r3
 80035e0:	887b      	ldrh	r3, [r7, #2]
 80035e2:	400b      	ands	r3, r1
 80035e4:	431a      	orrs	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	619a      	str	r2, [r3, #24]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e07f      	b.n	800370a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd ff50 	bl	80014c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003648:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003658:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d107      	bne.n	8003672 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	e006      	b.n	8003680 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800367e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d104      	bne.n	8003692 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003690:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	6859      	ldr	r1, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_I2C_Init+0x11c>)
 800369e:	430b      	orrs	r3, r1
 80036a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69d9      	ldr	r1, [r3, #28]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1a      	ldr	r2, [r3, #32]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	02008000 	.word	0x02008000

08003718 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b20      	cmp	r3, #32
 800372c:	d138      	bne.n	80037a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003738:	2302      	movs	r3, #2
 800373a:	e032      	b.n	80037a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2224      	movs	r2, #36	; 0x24
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0201 	bic.w	r2, r2, #1
 800375a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800376a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	e000      	b.n	80037a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
  }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d139      	bne.n	8003838 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e033      	b.n	800383a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2224      	movs	r2, #36	; 0x24
 80037de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003800:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2220      	movs	r2, #32
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003850:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b04      	cmp	r3, #4
 800385a:	d00a      	beq.n	8003872 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800385c:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	429a      	cmp	r2, r3
 8003868:	d001      	beq.n	800386e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e01f      	b.n	80038ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e01d      	b.n	80038ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f023 0207 	bic.w	r2, r3, #7
 800387a:	490f      	ldr	r1, [pc, #60]	; (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4313      	orrs	r3, r2
 8003880:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003882:	f7fe fb51 	bl	8001f28 <HAL_GetTick>
 8003886:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003888:	e009      	b.n	800389e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800388a:	f7fe fb4d 	bl	8001f28 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003898:	d901      	bls.n	800389e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e007      	b.n	80038ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <HAL_PWREx_ConfigSupply+0x70>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038aa:	d1ee      	bne.n	800388a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	58024800 	.word	0x58024800

080038bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	; 0x30
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f000 bc1d 	b.w	800410a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8087 	beq.w	80039ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038de:	4b99      	ldr	r3, [pc, #612]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038e8:	4b96      	ldr	r3, [pc, #600]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d007      	beq.n	8003904 <HAL_RCC_OscConfig+0x48>
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	2b18      	cmp	r3, #24
 80038f8:	d110      	bne.n	800391c <HAL_RCC_OscConfig+0x60>
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d10b      	bne.n	800391c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003904:	4b8f      	ldr	r3, [pc, #572]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d06c      	beq.n	80039ea <HAL_RCC_OscConfig+0x12e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d168      	bne.n	80039ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e3f6      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003924:	d106      	bne.n	8003934 <HAL_RCC_OscConfig+0x78>
 8003926:	4b87      	ldr	r3, [pc, #540]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a86      	ldr	r2, [pc, #536]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e02e      	b.n	8003992 <HAL_RCC_OscConfig+0xd6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10c      	bne.n	8003956 <HAL_RCC_OscConfig+0x9a>
 800393c:	4b81      	ldr	r3, [pc, #516]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a80      	ldr	r2, [pc, #512]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	4b7e      	ldr	r3, [pc, #504]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a7d      	ldr	r2, [pc, #500]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800394e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	e01d      	b.n	8003992 <HAL_RCC_OscConfig+0xd6>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800395e:	d10c      	bne.n	800397a <HAL_RCC_OscConfig+0xbe>
 8003960:	4b78      	ldr	r3, [pc, #480]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a77      	ldr	r2, [pc, #476]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003966:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	4b75      	ldr	r3, [pc, #468]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a74      	ldr	r2, [pc, #464]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e00b      	b.n	8003992 <HAL_RCC_OscConfig+0xd6>
 800397a:	4b72      	ldr	r3, [pc, #456]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a71      	ldr	r2, [pc, #452]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b6f      	ldr	r3, [pc, #444]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6e      	ldr	r2, [pc, #440]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 800398c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003990:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d013      	beq.n	80039c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fe fac5 	bl	8001f28 <HAL_GetTick>
 800399e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039a2:	f7fe fac1 	bl	8001f28 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b64      	cmp	r3, #100	; 0x64
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e3aa      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039b4:	4b63      	ldr	r3, [pc, #396]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0xe6>
 80039c0:	e014      	b.n	80039ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c2:	f7fe fab1 	bl	8001f28 <HAL_GetTick>
 80039c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ca:	f7fe faad 	bl	8001f28 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b64      	cmp	r3, #100	; 0x64
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e396      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_OscConfig+0x10e>
 80039e8:	e000      	b.n	80039ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80cb 	beq.w	8003b90 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fa:	4b52      	ldr	r3, [pc, #328]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a02:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a04:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_RCC_OscConfig+0x164>
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	2b18      	cmp	r3, #24
 8003a14:	d156      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x208>
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d151      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a20:	4b48      	ldr	r3, [pc, #288]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_OscConfig+0x17c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e368      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a38:	4b42      	ldr	r3, [pc, #264]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 0219 	bic.w	r2, r3, #25
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	493f      	ldr	r1, [pc, #252]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a4a:	f7fe fa6d 	bl	8001f28 <HAL_GetTick>
 8003a4e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a50:	e008      	b.n	8003a64 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a52:	f7fe fa69 	bl	8001f28 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d901      	bls.n	8003a64 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e352      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a64:	4b37      	ldr	r3, [pc, #220]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d0f0      	beq.n	8003a52 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a70:	f7fe fa66 	bl	8001f40 <HAL_GetREVID>
 8003a74:	4603      	mov	r3, r0
 8003a76:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d817      	bhi.n	8003aae <HAL_RCC_OscConfig+0x1f2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b40      	cmp	r3, #64	; 0x40
 8003a84:	d108      	bne.n	8003a98 <HAL_RCC_OscConfig+0x1dc>
 8003a86:	4b2f      	ldr	r3, [pc, #188]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a8e:	4a2d      	ldr	r2, [pc, #180]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a94:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a96:	e07b      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a98:	4b2a      	ldr	r3, [pc, #168]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	031b      	lsls	r3, r3, #12
 8003aa6:	4927      	ldr	r1, [pc, #156]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aac:	e070      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aae:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	061b      	lsls	r3, r3, #24
 8003abc:	4921      	ldr	r1, [pc, #132]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ac2:	e065      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d048      	beq.n	8003b5e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f023 0219 	bic.w	r2, r3, #25
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	491a      	ldr	r1, [pc, #104]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe fa23 	bl	8001f28 <HAL_GetTick>
 8003ae2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae6:	f7fe fa1f 	bl	8001f28 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e308      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003af8:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b04:	f7fe fa1c 	bl	8001f40 <HAL_GetREVID>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d81a      	bhi.n	8003b48 <HAL_RCC_OscConfig+0x28c>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d108      	bne.n	8003b2c <HAL_RCC_OscConfig+0x270>
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003b22:	4a08      	ldr	r2, [pc, #32]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	6053      	str	r3, [r2, #4]
 8003b2a:	e031      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	031b      	lsls	r3, r3, #12
 8003b3a:	4902      	ldr	r1, [pc, #8]	; (8003b44 <HAL_RCC_OscConfig+0x288>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
 8003b40:	e026      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
 8003b48:	4b9a      	ldr	r3, [pc, #616]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	061b      	lsls	r3, r3, #24
 8003b56:	4997      	ldr	r1, [pc, #604]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
 8003b5c:	e018      	b.n	8003b90 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5e:	4b95      	ldr	r3, [pc, #596]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a94      	ldr	r2, [pc, #592]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fe f9dd 	bl	8001f28 <HAL_GetTick>
 8003b6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b72:	f7fe f9d9 	bl	8001f28 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e2c2      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b84:	4b8b      	ldr	r3, [pc, #556]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80a9 	beq.w	8003cf0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b9e:	4b85      	ldr	r3, [pc, #532]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ba6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ba8:	4b82      	ldr	r3, [pc, #520]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b08      	cmp	r3, #8
 8003bb2:	d007      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x308>
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b18      	cmp	r3, #24
 8003bb8:	d13a      	bne.n	8003c30 <HAL_RCC_OscConfig+0x374>
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f003 0303 	and.w	r3, r3, #3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d135      	bne.n	8003c30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bc4:	4b7b      	ldr	r3, [pc, #492]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d005      	beq.n	8003bdc <HAL_RCC_OscConfig+0x320>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	2b80      	cmp	r3, #128	; 0x80
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e296      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bdc:	f7fe f9b0 	bl	8001f40 <HAL_GetREVID>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f241 0203 	movw	r2, #4099	; 0x1003
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d817      	bhi.n	8003c1a <HAL_RCC_OscConfig+0x35e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d108      	bne.n	8003c04 <HAL_RCC_OscConfig+0x348>
 8003bf2:	4b70      	ldr	r3, [pc, #448]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bfa:	4a6e      	ldr	r2, [pc, #440]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c02:	e075      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c04:	4b6b      	ldr	r3, [pc, #428]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	069b      	lsls	r3, r3, #26
 8003c12:	4968      	ldr	r1, [pc, #416]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c18:	e06a      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c1a:	4b66      	ldr	r3, [pc, #408]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	061b      	lsls	r3, r3, #24
 8003c28:	4962      	ldr	r1, [pc, #392]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003c2e:	e05f      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d042      	beq.n	8003cbe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c38:	4b5e      	ldr	r3, [pc, #376]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a5d      	ldr	r2, [pc, #372]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe f970 	bl	8001f28 <HAL_GetTick>
 8003c48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c4c:	f7fe f96c 	bl	8001f28 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e255      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c5e:	4b55      	ldr	r3, [pc, #340]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c6a:	f7fe f969 	bl	8001f40 <HAL_GetREVID>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d817      	bhi.n	8003ca8 <HAL_RCC_OscConfig+0x3ec>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a1b      	ldr	r3, [r3, #32]
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	d108      	bne.n	8003c92 <HAL_RCC_OscConfig+0x3d6>
 8003c80:	4b4c      	ldr	r3, [pc, #304]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c88:	4a4a      	ldr	r2, [pc, #296]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c8e:	6053      	str	r3, [r2, #4]
 8003c90:	e02e      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
 8003c92:	4b48      	ldr	r3, [pc, #288]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	069b      	lsls	r3, r3, #26
 8003ca0:	4944      	ldr	r1, [pc, #272]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	604b      	str	r3, [r1, #4]
 8003ca6:	e023      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
 8003ca8:	4b42      	ldr	r3, [pc, #264]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	061b      	lsls	r3, r3, #24
 8003cb6:	493f      	ldr	r1, [pc, #252]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60cb      	str	r3, [r1, #12]
 8003cbc:	e018      	b.n	8003cf0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003cbe:	4b3d      	ldr	r3, [pc, #244]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a3c      	ldr	r2, [pc, #240]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003cc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cca:	f7fe f92d 	bl	8001f28 <HAL_GetTick>
 8003cce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003cd2:	f7fe f929 	bl	8001f28 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e212      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ce4:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d036      	beq.n	8003d6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d019      	beq.n	8003d38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d04:	4b2b      	ldr	r3, [pc, #172]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d10:	f7fe f90a 	bl	8001f28 <HAL_GetTick>
 8003d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d18:	f7fe f906 	bl	8001f28 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e1ef      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003d2a:	4b22      	ldr	r3, [pc, #136]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCC_OscConfig+0x45c>
 8003d36:	e018      	b.n	8003d6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fe f8f0 	bl	8001f28 <HAL_GetTick>
 8003d48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4c:	f7fe f8ec 	bl	8001f28 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e1d5      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d039      	beq.n	8003dea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d01c      	beq.n	8003db8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a0c      	ldr	r2, [pc, #48]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003d84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d8a:	f7fe f8cd 	bl	8001f28 <HAL_GetTick>
 8003d8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d92:	f7fe f8c9 	bl	8001f28 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e1b2      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003da4:	4b03      	ldr	r3, [pc, #12]	; (8003db4 <HAL_RCC_OscConfig+0x4f8>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x4d6>
 8003db0:	e01b      	b.n	8003dea <HAL_RCC_OscConfig+0x52e>
 8003db2:	bf00      	nop
 8003db4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003db8:	4b9b      	ldr	r3, [pc, #620]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a9a      	ldr	r2, [pc, #616]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003dbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003dc4:	f7fe f8b0 	bl	8001f28 <HAL_GetTick>
 8003dc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003dcc:	f7fe f8ac 	bl	8001f28 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e195      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dde:	4b92      	ldr	r3, [pc, #584]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0304 	and.w	r3, r3, #4
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8081 	beq.w	8003efa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003df8:	4b8c      	ldr	r3, [pc, #560]	; (800402c <HAL_RCC_OscConfig+0x770>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a8b      	ldr	r2, [pc, #556]	; (800402c <HAL_RCC_OscConfig+0x770>)
 8003dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e04:	f7fe f890 	bl	8001f28 <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e0c:	f7fe f88c 	bl	8001f28 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	; 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e175      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e1e:	4b83      	ldr	r3, [pc, #524]	; (800402c <HAL_RCC_OscConfig+0x770>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d106      	bne.n	8003e40 <HAL_RCC_OscConfig+0x584>
 8003e32:	4b7d      	ldr	r3, [pc, #500]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a7c      	ldr	r2, [pc, #496]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e38:	f043 0301 	orr.w	r3, r3, #1
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3e:	e02d      	b.n	8003e9c <HAL_RCC_OscConfig+0x5e0>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10c      	bne.n	8003e62 <HAL_RCC_OscConfig+0x5a6>
 8003e48:	4b77      	ldr	r3, [pc, #476]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a76      	ldr	r2, [pc, #472]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
 8003e54:	4b74      	ldr	r3, [pc, #464]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	4a73      	ldr	r2, [pc, #460]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e5a:	f023 0304 	bic.w	r3, r3, #4
 8003e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e60:	e01c      	b.n	8003e9c <HAL_RCC_OscConfig+0x5e0>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x5c8>
 8003e6a:	4b6f      	ldr	r3, [pc, #444]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a6e      	ldr	r2, [pc, #440]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e70:	f043 0304 	orr.w	r3, r3, #4
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	4b6c      	ldr	r3, [pc, #432]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7a:	4a6b      	ldr	r2, [pc, #428]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e7c:	f043 0301 	orr.w	r3, r3, #1
 8003e80:	6713      	str	r3, [r2, #112]	; 0x70
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0x5e0>
 8003e84:	4b68      	ldr	r3, [pc, #416]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a67      	ldr	r2, [pc, #412]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e90:	4b65      	ldr	r3, [pc, #404]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	4a64      	ldr	r2, [pc, #400]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003e96:	f023 0304 	bic.w	r3, r3, #4
 8003e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7fe f840 	bl	8001f28 <HAL_GetTick>
 8003ea8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eac:	f7fe f83c 	bl	8001f28 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e123      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec2:	4b59      	ldr	r3, [pc, #356]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0ee      	beq.n	8003eac <HAL_RCC_OscConfig+0x5f0>
 8003ece:	e014      	b.n	8003efa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fe f82a 	bl	8001f28 <HAL_GetTick>
 8003ed4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fe f826 	bl	8001f28 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e10d      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003eee:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1ee      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8102 	beq.w	8004108 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003f04:	4b48      	ldr	r3, [pc, #288]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f0c:	2b18      	cmp	r3, #24
 8003f0e:	f000 80bd 	beq.w	800408c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	f040 809e 	bne.w	8004058 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1c:	4b42      	ldr	r3, [pc, #264]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a41      	ldr	r2, [pc, #260]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd fffe 	bl	8001f28 <HAL_GetTick>
 8003f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f30:	f7fd fffa 	bl	8001f28 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e0e3      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f42:	4b39      	ldr	r3, [pc, #228]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f4e:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f52:	4b37      	ldr	r3, [pc, #220]	; (8004030 <HAL_RCC_OscConfig+0x774>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	430a      	orrs	r2, r1
 8003f62:	4931      	ldr	r1, [pc, #196]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	628b      	str	r3, [r1, #40]	; 0x28
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f76:	3b01      	subs	r3, #1
 8003f78:	025b      	lsls	r3, r3, #9
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	3b01      	subs	r3, #1
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f90:	3b01      	subs	r3, #1
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f98:	4923      	ldr	r1, [pc, #140]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003f9e:	4b22      	ldr	r3, [pc, #136]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	4a21      	ldr	r2, [pc, #132]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fa4:	f023 0301 	bic.w	r3, r3, #1
 8003fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003faa:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fae:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_RCC_OscConfig+0x778>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003fb6:	00d2      	lsls	r2, r2, #3
 8003fb8:	491b      	ldr	r1, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003fbe:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc2:	f023 020c 	bic.w	r2, r3, #12
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4917      	ldr	r1, [pc, #92]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003fd0:	4b15      	ldr	r3, [pc, #84]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	f023 0202 	bic.w	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fdc:	4912      	ldr	r1, [pc, #72]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	4a10      	ldr	r2, [pc, #64]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff2:	4a0d      	ldr	r2, [pc, #52]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8004000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	4a07      	ldr	r2, [pc, #28]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004012:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_RCC_OscConfig+0x76c>)
 8004018:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800401c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401e:	f7fd ff83 	bl	8001f28 <HAL_GetTick>
 8004022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004024:	e011      	b.n	800404a <HAL_RCC_OscConfig+0x78e>
 8004026:	bf00      	nop
 8004028:	58024400 	.word	0x58024400
 800402c:	58024800 	.word	0x58024800
 8004030:	fffffc0c 	.word	0xfffffc0c
 8004034:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004038:	f7fd ff76 	bl	8001f28 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e05f      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800404a:	4b32      	ldr	r3, [pc, #200]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x77c>
 8004056:	e057      	b.n	8004108 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004058:	4b2e      	ldr	r3, [pc, #184]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a2d      	ldr	r2, [pc, #180]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fd ff60 	bl	8001f28 <HAL_GetTick>
 8004068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406c:	f7fd ff5c 	bl	8001f28 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e045      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800407e:	4b25      	ldr	r3, [pc, #148]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x7b0>
 800408a:	e03d      	b.n	8004108 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800408c:	4b21      	ldr	r3, [pc, #132]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 800408e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004090:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004092:	4b20      	ldr	r3, [pc, #128]	; (8004114 <HAL_RCC_OscConfig+0x858>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	2b01      	cmp	r3, #1
 800409e:	d031      	beq.n	8004104 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f003 0203 	and.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d12a      	bne.n	8004104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d122      	bne.n	8004104 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d11a      	bne.n	8004104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	0a5b      	lsrs	r3, r3, #9
 80040d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d111      	bne.n	8004104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	0c1b      	lsrs	r3, r3, #16
 80040e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d108      	bne.n	8004104 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	0e1b      	lsrs	r3, r3, #24
 80040f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3730      	adds	r7, #48	; 0x30
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	58024400 	.word	0x58024400

08004118 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e19c      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800412c:	4b8a      	ldr	r3, [pc, #552]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d910      	bls.n	800415c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b87      	ldr	r3, [pc, #540]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 020f 	bic.w	r2, r3, #15
 8004142:	4985      	ldr	r1, [pc, #532]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b83      	ldr	r3, [pc, #524]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e184      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d010      	beq.n	800418a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691a      	ldr	r2, [r3, #16]
 800416c:	4b7b      	ldr	r3, [pc, #492]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004174:	429a      	cmp	r2, r3
 8004176:	d908      	bls.n	800418a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004178:	4b78      	ldr	r3, [pc, #480]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	4975      	ldr	r1, [pc, #468]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004186:	4313      	orrs	r3, r2
 8004188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d010      	beq.n	80041b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	4b70      	ldr	r3, [pc, #448]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d908      	bls.n	80041b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041a6:	4b6d      	ldr	r3, [pc, #436]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	496a      	ldr	r1, [pc, #424]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d010      	beq.n	80041e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	699a      	ldr	r2, [r3, #24]
 80041c8:	4b64      	ldr	r3, [pc, #400]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d908      	bls.n	80041e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041d4:	4b61      	ldr	r3, [pc, #388]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	495e      	ldr	r1, [pc, #376]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d010      	beq.n	8004214 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69da      	ldr	r2, [r3, #28]
 80041f6:	4b59      	ldr	r3, [pc, #356]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041fe:	429a      	cmp	r2, r3
 8004200:	d908      	bls.n	8004214 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004202:	4b56      	ldr	r3, [pc, #344]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	4953      	ldr	r1, [pc, #332]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004210:	4313      	orrs	r3, r2
 8004212:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d010      	beq.n	8004242 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	4b4d      	ldr	r3, [pc, #308]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	429a      	cmp	r2, r3
 800422e:	d908      	bls.n	8004242 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004230:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f023 020f 	bic.w	r2, r3, #15
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	4947      	ldr	r1, [pc, #284]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800423e:	4313      	orrs	r3, r2
 8004240:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d055      	beq.n	80042fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800424e:	4b43      	ldr	r3, [pc, #268]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	4940      	ldr	r1, [pc, #256]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800425c:	4313      	orrs	r3, r2
 800425e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d107      	bne.n	8004278 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004268:	4b3c      	ldr	r3, [pc, #240]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d121      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0f6      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d107      	bne.n	8004290 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004280:	4b36      	ldr	r3, [pc, #216]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d115      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e0ea      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004298:	4b30      	ldr	r3, [pc, #192]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d109      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0de      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a8:	4b2c      	ldr	r3, [pc, #176]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0d6      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b8:	4b28      	ldr	r3, [pc, #160]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	f023 0207 	bic.w	r2, r3, #7
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	4925      	ldr	r1, [pc, #148]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fd fe2d 	bl	8001f28 <HAL_GetTick>
 80042ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d2:	f7fd fe29 	bl	8001f28 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e0be      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e8:	4b1c      	ldr	r3, [pc, #112]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d1eb      	bne.n	80042d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68da      	ldr	r2, [r3, #12]
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	429a      	cmp	r2, r3
 8004314:	d208      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004316:	4b11      	ldr	r3, [pc, #68]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	f023 020f 	bic.w	r2, r3, #15
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	490e      	ldr	r1, [pc, #56]	; (800435c <HAL_RCC_ClockConfig+0x244>)
 8004324:	4313      	orrs	r3, r2
 8004326:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d214      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 020f 	bic.w	r2, r3, #15
 800433e:	4906      	ldr	r1, [pc, #24]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b04      	ldr	r3, [pc, #16]	; (8004358 <HAL_RCC_ClockConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e086      	b.n	8004466 <HAL_RCC_ClockConfig+0x34e>
 8004358:	52002000 	.word	0x52002000
 800435c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d010      	beq.n	800438e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	4b3f      	ldr	r3, [pc, #252]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004378:	429a      	cmp	r2, r3
 800437a:	d208      	bcs.n	800438e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800437c:	4b3c      	ldr	r3, [pc, #240]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	4939      	ldr	r1, [pc, #228]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 800438a:	4313      	orrs	r3, r2
 800438c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d010      	beq.n	80043bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695a      	ldr	r2, [r3, #20]
 800439e:	4b34      	ldr	r3, [pc, #208]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d208      	bcs.n	80043bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043aa:	4b31      	ldr	r3, [pc, #196]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	492e      	ldr	r1, [pc, #184]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d010      	beq.n	80043ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	4b28      	ldr	r3, [pc, #160]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d208      	bcs.n	80043ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043d8:	4b25      	ldr	r3, [pc, #148]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	4922      	ldr	r1, [pc, #136]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0320 	and.w	r3, r3, #32
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d010      	beq.n	8004418 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69da      	ldr	r2, [r3, #28]
 80043fa:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004402:	429a      	cmp	r2, r3
 8004404:	d208      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004406:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	4917      	ldr	r1, [pc, #92]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004414:	4313      	orrs	r3, r2
 8004416:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004418:	f000 f834 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	4912      	ldr	r1, [pc, #72]	; (8004474 <HAL_RCC_ClockConfig+0x35c>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004436:	4b0e      	ldr	r3, [pc, #56]	; (8004470 <HAL_RCC_ClockConfig+0x358>)
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	4a0d      	ldr	r2, [pc, #52]	; (8004474 <HAL_RCC_ClockConfig+0x35c>)
 8004440:	5cd3      	ldrb	r3, [r2, r3]
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
 800444c:	4a0a      	ldr	r2, [pc, #40]	; (8004478 <HAL_RCC_ClockConfig+0x360>)
 800444e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004450:	4a0a      	ldr	r2, [pc, #40]	; (800447c <HAL_RCC_ClockConfig+0x364>)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <HAL_RCC_ClockConfig+0x368>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd fbd6 	bl	8001c0c <HAL_InitTick>
 8004460:	4603      	mov	r3, r0
 8004462:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	58024400 	.word	0x58024400
 8004474:	0800ba38 	.word	0x0800ba38
 8004478:	24000004 	.word	0x24000004
 800447c:	24000000 	.word	0x24000000
 8004480:	24000008 	.word	0x24000008

08004484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	b089      	sub	sp, #36	; 0x24
 8004488:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800448a:	4bb3      	ldr	r3, [pc, #716]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004492:	2b18      	cmp	r3, #24
 8004494:	f200 8155 	bhi.w	8004742 <HAL_RCC_GetSysClockFreq+0x2be>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	08004505 	.word	0x08004505
 80044a4:	08004743 	.word	0x08004743
 80044a8:	08004743 	.word	0x08004743
 80044ac:	08004743 	.word	0x08004743
 80044b0:	08004743 	.word	0x08004743
 80044b4:	08004743 	.word	0x08004743
 80044b8:	08004743 	.word	0x08004743
 80044bc:	08004743 	.word	0x08004743
 80044c0:	0800452b 	.word	0x0800452b
 80044c4:	08004743 	.word	0x08004743
 80044c8:	08004743 	.word	0x08004743
 80044cc:	08004743 	.word	0x08004743
 80044d0:	08004743 	.word	0x08004743
 80044d4:	08004743 	.word	0x08004743
 80044d8:	08004743 	.word	0x08004743
 80044dc:	08004743 	.word	0x08004743
 80044e0:	08004531 	.word	0x08004531
 80044e4:	08004743 	.word	0x08004743
 80044e8:	08004743 	.word	0x08004743
 80044ec:	08004743 	.word	0x08004743
 80044f0:	08004743 	.word	0x08004743
 80044f4:	08004743 	.word	0x08004743
 80044f8:	08004743 	.word	0x08004743
 80044fc:	08004743 	.word	0x08004743
 8004500:	08004537 	.word	0x08004537
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004504:	4b94      	ldr	r3, [pc, #592]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004510:	4b91      	ldr	r3, [pc, #580]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	08db      	lsrs	r3, r3, #3
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	4a90      	ldr	r2, [pc, #576]	; (800475c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004522:	e111      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004524:	4b8d      	ldr	r3, [pc, #564]	; (800475c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004526:	61bb      	str	r3, [r7, #24]
    break;
 8004528:	e10e      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800452a:	4b8d      	ldr	r3, [pc, #564]	; (8004760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800452c:	61bb      	str	r3, [r7, #24]
    break;
 800452e:	e10b      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004530:	4b8c      	ldr	r3, [pc, #560]	; (8004764 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004532:	61bb      	str	r3, [r7, #24]
    break;
 8004534:	e108      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004536:	4b88      	ldr	r3, [pc, #544]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	f003 0303 	and.w	r3, r3, #3
 800453e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004540:	4b85      	ldr	r3, [pc, #532]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800454c:	4b82      	ldr	r3, [pc, #520]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800454e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004556:	4b80      	ldr	r3, [pc, #512]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	08db      	lsrs	r3, r3, #3
 800455c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	fb02 f303 	mul.w	r3, r2, r3
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80e1 	beq.w	800473c <HAL_RCC_GetSysClockFreq+0x2b8>
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b02      	cmp	r3, #2
 800457e:	f000 8083 	beq.w	8004688 <HAL_RCC_GetSysClockFreq+0x204>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b02      	cmp	r3, #2
 8004586:	f200 80a1 	bhi.w	80046cc <HAL_RCC_GetSysClockFreq+0x248>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_RCC_GetSysClockFreq+0x114>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d056      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004596:	e099      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004598:	4b6f      	ldr	r3, [pc, #444]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d02d      	beq.n	8004600 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045a4:	4b6c      	ldr	r3, [pc, #432]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	08db      	lsrs	r3, r3, #3
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	4a6b      	ldr	r2, [pc, #428]	; (800475c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80045b0:	fa22 f303 	lsr.w	r3, r2, r3
 80045b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	ee07 3a90 	vmov	s15, r3
 80045bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ce:	4b62      	ldr	r3, [pc, #392]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	ed97 6a02 	vldr	s12, [r7, #8]
 80045e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80045fe:	e087      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800476c <HAL_RCC_GetSysClockFreq+0x2e8>
 800460e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004612:	4b51      	ldr	r3, [pc, #324]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	ed97 6a02 	vldr	s12, [r7, #8]
 8004626:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800462a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004642:	e065      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004770 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004656:	4b40      	ldr	r3, [pc, #256]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004666:	ed97 6a02 	vldr	s12, [r7, #8]
 800466a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 800466e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800467a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004686:	e043      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004692:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004774 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800469a:	4b2f      	ldr	r3, [pc, #188]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a2:	ee07 3a90 	vmov	s15, r3
 80046a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80046ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046ca:	e021      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004770 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046de:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80046f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004768 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800470e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004710:	4b11      	ldr	r3, [pc, #68]	; (8004758 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004714:	0a5b      	lsrs	r3, r3, #9
 8004716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800471a:	3301      	adds	r3, #1
 800471c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	ee07 3a90 	vmov	s15, r3
 8004724:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004728:	edd7 6a07 	vldr	s13, [r7, #28]
 800472c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004734:	ee17 3a90 	vmov	r3, s15
 8004738:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800473a:	e005      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	61bb      	str	r3, [r7, #24]
    break;
 8004740:	e002      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004744:	61bb      	str	r3, [r7, #24]
    break;
 8004746:	bf00      	nop
  }

  return sysclockfreq;
 8004748:	69bb      	ldr	r3, [r7, #24]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3724      	adds	r7, #36	; 0x24
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	58024400 	.word	0x58024400
 800475c:	03d09000 	.word	0x03d09000
 8004760:	003d0900 	.word	0x003d0900
 8004764:	00f42400 	.word	0x00f42400
 8004768:	46000000 	.word	0x46000000
 800476c:	4c742400 	.word	0x4c742400
 8004770:	4a742400 	.word	0x4a742400
 8004774:	4b742400 	.word	0x4b742400

08004778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800477e:	f7ff fe81 	bl	8004484 <HAL_RCC_GetSysClockFreq>
 8004782:	4602      	mov	r2, r0
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	490f      	ldr	r1, [pc, #60]	; (80047cc <HAL_RCC_GetHCLKFreq+0x54>)
 8004790:	5ccb      	ldrb	r3, [r1, r3]
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	fa22 f303 	lsr.w	r3, r2, r3
 800479a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 030f 	and.w	r3, r3, #15
 80047a4:	4a09      	ldr	r2, [pc, #36]	; (80047cc <HAL_RCC_GetHCLKFreq+0x54>)
 80047a6:	5cd3      	ldrb	r3, [r2, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	fa22 f303 	lsr.w	r3, r2, r3
 80047b2:	4a07      	ldr	r2, [pc, #28]	; (80047d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80047b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80047b6:	4a07      	ldr	r2, [pc, #28]	; (80047d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80047bc:	4b04      	ldr	r3, [pc, #16]	; (80047d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80047be:	681b      	ldr	r3, [r3, #0]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	58024400 	.word	0x58024400
 80047cc:	0800ba38 	.word	0x0800ba38
 80047d0:	24000004 	.word	0x24000004
 80047d4:	24000000 	.word	0x24000000

080047d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047dc:	f7ff ffcc 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	091b      	lsrs	r3, r3, #4
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4904      	ldr	r1, [pc, #16]	; (8004800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	58024400 	.word	0x58024400
 8004800:	0800ba38 	.word	0x0800ba38

08004804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004808:	f7ff ffb6 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 800480c:	4602      	mov	r2, r0
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	0a1b      	lsrs	r3, r3, #8
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	4904      	ldr	r1, [pc, #16]	; (800482c <HAL_RCC_GetPCLK2Freq+0x28>)
 800481a:	5ccb      	ldrb	r3, [r1, r3]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	58024400 	.word	0x58024400
 800482c:	0800ba38 	.word	0x0800ba38

08004830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	223f      	movs	r2, #63	; 0x3f
 800483e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004840:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <HAL_RCC_GetClockConfig+0x7c>)
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0207 	and.w	r2, r3, #7
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800484c:	4b17      	ldr	r3, [pc, #92]	; (80048ac <HAL_RCC_GetClockConfig+0x7c>)
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <HAL_RCC_GetClockConfig+0x7c>)
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 020f 	and.w	r2, r3, #15
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004864:	4b11      	ldr	r3, [pc, #68]	; (80048ac <HAL_RCC_GetClockConfig+0x7c>)
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004870:	4b0e      	ldr	r3, [pc, #56]	; (80048ac <HAL_RCC_GetClockConfig+0x7c>)
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800487c:	4b0b      	ldr	r3, [pc, #44]	; (80048ac <HAL_RCC_GetClockConfig+0x7c>)
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <HAL_RCC_GetClockConfig+0x7c>)
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004894:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_RCC_GetClockConfig+0x80>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 020f 	and.w	r2, r3, #15
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	601a      	str	r2, [r3, #0]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	58024400 	.word	0x58024400
 80048b0:	52002000 	.word	0x52002000

080048b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048bc:	2300      	movs	r3, #0
 80048be:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048c0:	2300      	movs	r3, #0
 80048c2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d03f      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048d8:	d02a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048de:	d824      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048e4:	d018      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ea:	d81e      	bhi.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048f4:	d007      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048f6:	e018      	b.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f8:	4ba3      	ldr	r3, [pc, #652]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fc:	4aa2      	ldr	r2, [pc, #648]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004902:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004904:	e015      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	3304      	adds	r3, #4
 800490a:	2102      	movs	r1, #2
 800490c:	4618      	mov	r0, r3
 800490e:	f001 fff9 	bl	8006904 <RCCEx_PLL2_Config>
 8004912:	4603      	mov	r3, r0
 8004914:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004916:	e00c      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3324      	adds	r3, #36	; 0x24
 800491c:	2102      	movs	r1, #2
 800491e:	4618      	mov	r0, r3
 8004920:	f002 f8a2 	bl	8006a68 <RCCEx_PLL3_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004928:	e003      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]
      break;
 800492e:	e000      	b.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d109      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004938:	4b93      	ldr	r3, [pc, #588]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800493c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004944:	4990      	ldr	r1, [pc, #576]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	650b      	str	r3, [r1, #80]	; 0x50
 800494a:	e001      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d03d      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004960:	2b04      	cmp	r3, #4
 8004962:	d826      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004964:	a201      	add	r2, pc, #4	; (adr r2, 800496c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004981 	.word	0x08004981
 8004970:	0800498f 	.word	0x0800498f
 8004974:	080049a1 	.word	0x080049a1
 8004978:	080049b9 	.word	0x080049b9
 800497c:	080049b9 	.word	0x080049b9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004980:	4b81      	ldr	r3, [pc, #516]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	4a80      	ldr	r2, [pc, #512]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800498a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800498c:	e015      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	3304      	adds	r3, #4
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f001 ffb5 	bl	8006904 <RCCEx_PLL2_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800499e:	e00c      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3324      	adds	r3, #36	; 0x24
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f002 f85e 	bl	8006a68 <RCCEx_PLL3_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80049b0:	e003      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	75fb      	strb	r3, [r7, #23]
      break;
 80049b6:	e000      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80049b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d109      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c0:	4b71      	ldr	r3, [pc, #452]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c4:	f023 0207 	bic.w	r2, r3, #7
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049cc:	496e      	ldr	r1, [pc, #440]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	650b      	str	r3, [r1, #80]	; 0x50
 80049d2:	e001      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	7dfb      	ldrb	r3, [r7, #23]
 80049d6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d042      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ec:	d02b      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80049ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f2:	d825      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80049f4:	2bc0      	cmp	r3, #192	; 0xc0
 80049f6:	d028      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80049f8:	2bc0      	cmp	r3, #192	; 0xc0
 80049fa:	d821      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80049fc:	2b80      	cmp	r3, #128	; 0x80
 80049fe:	d016      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004a00:	2b80      	cmp	r3, #128	; 0x80
 8004a02:	d81d      	bhi.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d007      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004a0c:	e018      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a0e:	4b5e      	ldr	r3, [pc, #376]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a12:	4a5d      	ldr	r2, [pc, #372]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a1a:	e017      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	2100      	movs	r1, #0
 8004a22:	4618      	mov	r0, r3
 8004a24:	f001 ff6e 	bl	8006904 <RCCEx_PLL2_Config>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a2c:	e00e      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3324      	adds	r3, #36	; 0x24
 8004a32:	2100      	movs	r1, #0
 8004a34:	4618      	mov	r0, r3
 8004a36:	f002 f817 	bl	8006a68 <RCCEx_PLL3_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a3e:	e005      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	75fb      	strb	r3, [r7, #23]
      break;
 8004a44:	e002      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a52:	4b4d      	ldr	r3, [pc, #308]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a56:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5e:	494a      	ldr	r1, [pc, #296]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	650b      	str	r3, [r1, #80]	; 0x50
 8004a64:	e001      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
 8004a68:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d049      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a80:	d030      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004a82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a86:	d82a      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a8c:	d02c      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004a8e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a92:	d824      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a98:	d018      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a9e:	d81e      	bhi.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004aa8:	d007      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004aaa:	e018      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aac:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	4a35      	ldr	r2, [pc, #212]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ab8:	e017      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f001 ff1f 	bl	8006904 <RCCEx_PLL2_Config>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004aca:	e00e      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3324      	adds	r3, #36	; 0x24
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 ffc8 	bl	8006a68 <RCCEx_PLL3_Config>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004adc:	e005      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8004ae2:	e002      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aea:	7dfb      	ldrb	r3, [r7, #23]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004af0:	4b25      	ldr	r3, [pc, #148]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004afe:	4922      	ldr	r1, [pc, #136]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	658b      	str	r3, [r1, #88]	; 0x58
 8004b04:	e001      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b06:	7dfb      	ldrb	r3, [r7, #23]
 8004b08:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d04b      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b20:	d030      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004b22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b26:	d82a      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b2c:	d02e      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004b2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b32:	d824      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b38:	d018      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b3e:	d81e      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d003      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b48:	d007      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004b4a:	e018      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b4c:	4b0e      	ldr	r3, [pc, #56]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	4a0d      	ldr	r2, [pc, #52]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b58:	e019      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 fecf 	bl	8006904 <RCCEx_PLL2_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b6a:	e010      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3324      	adds	r3, #36	; 0x24
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f001 ff78 	bl	8006a68 <RCCEx_PLL3_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b7c:	e007      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	75fb      	strb	r3, [r7, #23]
      break;
 8004b82:	e004      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004b84:	bf00      	nop
 8004b86:	e002      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004b88:	58024400 	.word	0x58024400
      break;
 8004b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b94:	4b99      	ldr	r3, [pc, #612]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ba2:	4996      	ldr	r1, [pc, #600]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	658b      	str	r3, [r1, #88]	; 0x58
 8004ba8:	e001      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
 8004bac:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d032      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bbe:	2b30      	cmp	r3, #48	; 0x30
 8004bc0:	d01c      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004bc2:	2b30      	cmp	r3, #48	; 0x30
 8004bc4:	d817      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d00c      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d813      	bhi.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d016      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004bd2:	2b10      	cmp	r3, #16
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bd6:	4b89      	ldr	r3, [pc, #548]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bda:	4a88      	ldr	r2, [pc, #544]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004be2:	e00e      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	2102      	movs	r1, #2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f001 fe8a 	bl	8006904 <RCCEx_PLL2_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004bf4:	e005      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8004bfa:	e002      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004bfc:	bf00      	nop
 8004bfe:	e000      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c08:	4b7c      	ldr	r3, [pc, #496]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c14:	4979      	ldr	r1, [pc, #484]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004c1a:	e001      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d047      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c34:	d030      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c3a:	d82a      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c40:	d02c      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004c42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c46:	d824      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4c:	d018      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8004c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c52:	d81e      	bhi.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c5c:	d007      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8004c5e:	e018      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c60:	4b66      	ldr	r3, [pc, #408]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	4a65      	ldr	r2, [pc, #404]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c6c:	e017      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2100      	movs	r1, #0
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 fe45 	bl	8006904 <RCCEx_PLL2_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c7e:	e00e      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3324      	adds	r3, #36	; 0x24
 8004c84:	2100      	movs	r1, #0
 8004c86:	4618      	mov	r0, r3
 8004c88:	f001 feee 	bl	8006a68 <RCCEx_PLL3_Config>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c90:	e005      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	75fb      	strb	r3, [r7, #23]
      break;
 8004c96:	e002      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004c98:	bf00      	nop
 8004c9a:	e000      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d109      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004ca4:	4b55      	ldr	r3, [pc, #340]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb0:	4952      	ldr	r1, [pc, #328]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	650b      	str	r3, [r1, #80]	; 0x50
 8004cb6:	e001      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	7dfb      	ldrb	r3, [r7, #23]
 8004cba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d049      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd0:	d02e      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004cd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd6:	d828      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004cd8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cdc:	d02a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8004cde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ce2:	d822      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004ce4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ce8:	d026      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8004cea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cee:	d81c      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004cf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cf4:	d010      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004cf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cfa:	d816      	bhi.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d01d      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8004d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d04:	d111      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 fdf9 	bl	8006904 <RCCEx_PLL2_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d16:	e012      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3324      	adds	r3, #36	; 0x24
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f001 fea2 	bl	8006a68 <RCCEx_PLL3_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004d28:	e009      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2e:	e006      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d30:	bf00      	nop
 8004d32:	e004      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d34:	bf00      	nop
 8004d36:	e002      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d38:	bf00      	nop
 8004d3a:	e000      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d44:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d48:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d50:	492a      	ldr	r1, [pc, #168]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	650b      	str	r3, [r1, #80]	; 0x50
 8004d56:	e001      	b.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
 8004d5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d04d      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d72:	d02e      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d78:	d828      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d02a      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d84:	d822      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004d86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d8a:	d026      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004d8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d90:	d81c      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d96:	d010      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9c:	d816      	bhi.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01d      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8004da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004da6:	d111      	bne.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	2101      	movs	r1, #1
 8004dae:	4618      	mov	r0, r3
 8004db0:	f001 fda8 	bl	8006904 <RCCEx_PLL2_Config>
 8004db4:	4603      	mov	r3, r0
 8004db6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004db8:	e012      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	3324      	adds	r3, #36	; 0x24
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f001 fe51 	bl	8006a68 <RCCEx_PLL3_Config>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004dca:	e009      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd0:	e006      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004dd2:	bf00      	nop
 8004dd4:	e004      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004dd6:	bf00      	nop
 8004dd8:	e002      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8004dde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004df4:	4901      	ldr	r1, [pc, #4]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	658b      	str	r3, [r1, #88]	; 0x58
 8004dfa:	e003      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004dfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
 8004e02:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d02f      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e18:	d00e      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004e1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e1e:	d814      	bhi.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d015      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e28:	d10f      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e2a:	4baf      	ldr	r3, [pc, #700]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	4aae      	ldr	r2, [pc, #696]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e36:	e00c      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 fd60 	bl	8006904 <RCCEx_PLL2_Config>
 8004e44:	4603      	mov	r3, r0
 8004e46:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e48:	e003      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4e:	e000      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8004e50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d109      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e58:	4ba3      	ldr	r3, [pc, #652]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e64:	49a0      	ldr	r1, [pc, #640]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	650b      	str	r3, [r1, #80]	; 0x50
 8004e6a:	e001      	b.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e6c:	7dfb      	ldrb	r3, [r7, #23]
 8004e6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d032      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d81b      	bhi.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e84:	a201      	add	r2, pc, #4	; (adr r2, 8004e8c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8a:	bf00      	nop
 8004e8c:	08004ec3 	.word	0x08004ec3
 8004e90:	08004e9d 	.word	0x08004e9d
 8004e94:	08004eab 	.word	0x08004eab
 8004e98:	08004ec3 	.word	0x08004ec3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e9c:	4b92      	ldr	r3, [pc, #584]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	4a91      	ldr	r2, [pc, #580]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004ea8:	e00c      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3304      	adds	r3, #4
 8004eae:	2102      	movs	r1, #2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 fd27 	bl	8006904 <RCCEx_PLL2_Config>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004eba:	e003      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8004ec0:	e000      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ec4:	7dfb      	ldrb	r3, [r7, #23]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004eca:	4b87      	ldr	r3, [pc, #540]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ece:	f023 0203 	bic.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	4984      	ldr	r1, [pc, #528]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004edc:	e001      	b.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8086 	beq.w	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ef0:	4b7e      	ldr	r3, [pc, #504]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a7d      	ldr	r2, [pc, #500]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004efc:	f7fd f814 	bl	8001f28 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f02:	e009      	b.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f04:	f7fd f810 	bl	8001f28 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	; 0x64
 8004f10:	d902      	bls.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	75fb      	strb	r3, [r7, #23]
        break;
 8004f16:	e005      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f18:	4b74      	ldr	r3, [pc, #464]	; (80050ec <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d0ef      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d166      	bne.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004f2a:	4b6f      	ldr	r3, [pc, #444]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f34:	4053      	eors	r3, r2
 8004f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d013      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f3e:	4b6a      	ldr	r3, [pc, #424]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f48:	4b67      	ldr	r3, [pc, #412]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	4a66      	ldr	r2, [pc, #408]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f54:	4b64      	ldr	r3, [pc, #400]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f58:	4a63      	ldr	r2, [pc, #396]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f60:	4a61      	ldr	r2, [pc, #388]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f70:	d115      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f72:	f7fc ffd9 	bl	8001f28 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f78:	e00b      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7a:	f7fc ffd5 	bl	8001f28 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d902      	bls.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	75fb      	strb	r3, [r7, #23]
            break;
 8004f90:	e005      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f92:	4b55      	ldr	r3, [pc, #340]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0ed      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004f9e:	7dfb      	ldrb	r3, [r7, #23]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d126      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fb2:	d10d      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004fb4:	4b4c      	ldr	r3, [pc, #304]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fc2:	0919      	lsrs	r1, r3, #4
 8004fc4:	4b4a      	ldr	r3, [pc, #296]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004fc6:	400b      	ands	r3, r1
 8004fc8:	4947      	ldr	r1, [pc, #284]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	610b      	str	r3, [r1, #16]
 8004fce:	e005      	b.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004fd0:	4b45      	ldr	r3, [pc, #276]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	4a44      	ldr	r2, [pc, #272]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004fda:	6113      	str	r3, [r2, #16]
 8004fdc:	4b42      	ldr	r3, [pc, #264]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fea:	493f      	ldr	r1, [pc, #252]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	670b      	str	r3, [r1, #112]	; 0x70
 8004ff0:	e004      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
 8004ff4:	75bb      	strb	r3, [r7, #22]
 8004ff6:	e001      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff8:	7dfb      	ldrb	r3, [r7, #23]
 8004ffa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8085 	beq.w	8005114 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800500e:	2b28      	cmp	r3, #40	; 0x28
 8005010:	d866      	bhi.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005012:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	080050f5 	.word	0x080050f5
 800501c:	080050e1 	.word	0x080050e1
 8005020:	080050e1 	.word	0x080050e1
 8005024:	080050e1 	.word	0x080050e1
 8005028:	080050e1 	.word	0x080050e1
 800502c:	080050e1 	.word	0x080050e1
 8005030:	080050e1 	.word	0x080050e1
 8005034:	080050e1 	.word	0x080050e1
 8005038:	080050bd 	.word	0x080050bd
 800503c:	080050e1 	.word	0x080050e1
 8005040:	080050e1 	.word	0x080050e1
 8005044:	080050e1 	.word	0x080050e1
 8005048:	080050e1 	.word	0x080050e1
 800504c:	080050e1 	.word	0x080050e1
 8005050:	080050e1 	.word	0x080050e1
 8005054:	080050e1 	.word	0x080050e1
 8005058:	080050cf 	.word	0x080050cf
 800505c:	080050e1 	.word	0x080050e1
 8005060:	080050e1 	.word	0x080050e1
 8005064:	080050e1 	.word	0x080050e1
 8005068:	080050e1 	.word	0x080050e1
 800506c:	080050e1 	.word	0x080050e1
 8005070:	080050e1 	.word	0x080050e1
 8005074:	080050e1 	.word	0x080050e1
 8005078:	080050f5 	.word	0x080050f5
 800507c:	080050e1 	.word	0x080050e1
 8005080:	080050e1 	.word	0x080050e1
 8005084:	080050e1 	.word	0x080050e1
 8005088:	080050e1 	.word	0x080050e1
 800508c:	080050e1 	.word	0x080050e1
 8005090:	080050e1 	.word	0x080050e1
 8005094:	080050e1 	.word	0x080050e1
 8005098:	080050f5 	.word	0x080050f5
 800509c:	080050e1 	.word	0x080050e1
 80050a0:	080050e1 	.word	0x080050e1
 80050a4:	080050e1 	.word	0x080050e1
 80050a8:	080050e1 	.word	0x080050e1
 80050ac:	080050e1 	.word	0x080050e1
 80050b0:	080050e1 	.word	0x080050e1
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	080050f5 	.word	0x080050f5
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3304      	adds	r3, #4
 80050c0:	2101      	movs	r1, #1
 80050c2:	4618      	mov	r0, r3
 80050c4:	f001 fc1e 	bl	8006904 <RCCEx_PLL2_Config>
 80050c8:	4603      	mov	r3, r0
 80050ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80050cc:	e013      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3324      	adds	r3, #36	; 0x24
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 fcc7 	bl	8006a68 <RCCEx_PLL3_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80050de:	e00a      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	75fb      	strb	r3, [r7, #23]
      break;
 80050e4:	e007      	b.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80050e6:	bf00      	nop
 80050e8:	58024400 	.word	0x58024400
 80050ec:	58024800 	.word	0x58024800
 80050f0:	00ffffcf 	.word	0x00ffffcf
      break;
 80050f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80050fc:	4b96      	ldr	r3, [pc, #600]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80050fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005100:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005108:	4993      	ldr	r1, [pc, #588]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800510a:	4313      	orrs	r3, r2
 800510c:	654b      	str	r3, [r1, #84]	; 0x54
 800510e:	e001      	b.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d038      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005124:	2b05      	cmp	r3, #5
 8005126:	d821      	bhi.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005128:	a201      	add	r2, pc, #4	; (adr r2, 8005130 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800512a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512e:	bf00      	nop
 8005130:	08005173 	.word	0x08005173
 8005134:	08005149 	.word	0x08005149
 8005138:	0800515b 	.word	0x0800515b
 800513c:	08005173 	.word	0x08005173
 8005140:	08005173 	.word	0x08005173
 8005144:	08005173 	.word	0x08005173
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	2101      	movs	r1, #1
 800514e:	4618      	mov	r0, r3
 8005150:	f001 fbd8 	bl	8006904 <RCCEx_PLL2_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005158:	e00c      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	3324      	adds	r3, #36	; 0x24
 800515e:	2101      	movs	r1, #1
 8005160:	4618      	mov	r0, r3
 8005162:	f001 fc81 	bl	8006a68 <RCCEx_PLL3_Config>
 8005166:	4603      	mov	r3, r0
 8005168:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800516a:	e003      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
      break;
 8005170:	e000      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005174:	7dfb      	ldrb	r3, [r7, #23]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d109      	bne.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800517a:	4b77      	ldr	r3, [pc, #476]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f023 0207 	bic.w	r2, r3, #7
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005186:	4974      	ldr	r1, [pc, #464]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005188:	4313      	orrs	r3, r2
 800518a:	654b      	str	r3, [r1, #84]	; 0x54
 800518c:	e001      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	d03a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a4:	2b05      	cmp	r3, #5
 80051a6:	d821      	bhi.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x938>
 80051a8:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051f3 	.word	0x080051f3
 80051b4:	080051c9 	.word	0x080051c9
 80051b8:	080051db 	.word	0x080051db
 80051bc:	080051f3 	.word	0x080051f3
 80051c0:	080051f3 	.word	0x080051f3
 80051c4:	080051f3 	.word	0x080051f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3304      	adds	r3, #4
 80051cc:	2101      	movs	r1, #1
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 fb98 	bl	8006904 <RCCEx_PLL2_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80051d8:	e00c      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3324      	adds	r3, #36	; 0x24
 80051de:	2101      	movs	r1, #1
 80051e0:	4618      	mov	r0, r3
 80051e2:	f001 fc41 	bl	8006a68 <RCCEx_PLL3_Config>
 80051e6:	4603      	mov	r3, r0
 80051e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80051ea:	e003      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	75fb      	strb	r3, [r7, #23]
      break;
 80051f0:	e000      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80051f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051f4:	7dfb      	ldrb	r3, [r7, #23]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10a      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051fa:	4b57      	ldr	r3, [pc, #348]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fe:	f023 0207 	bic.w	r2, r3, #7
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005208:	4953      	ldr	r1, [pc, #332]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800520a:	4313      	orrs	r3, r2
 800520c:	658b      	str	r3, [r1, #88]	; 0x58
 800520e:	e001      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005210:	7dfb      	ldrb	r3, [r7, #23]
 8005212:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0320 	and.w	r3, r3, #32
 800521c:	2b00      	cmp	r3, #0
 800521e:	d04b      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800522a:	d02e      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800522c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005230:	d828      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005236:	d02a      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523c:	d822      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800523e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005242:	d026      	beq.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005248:	d81c      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800524a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800524e:	d010      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005254:	d816      	bhi.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005256:	2b00      	cmp	r3, #0
 8005258:	d01d      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800525a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800525e:	d111      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3304      	adds	r3, #4
 8005264:	2100      	movs	r1, #0
 8005266:	4618      	mov	r0, r3
 8005268:	f001 fb4c 	bl	8006904 <RCCEx_PLL2_Config>
 800526c:	4603      	mov	r3, r0
 800526e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005270:	e012      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3324      	adds	r3, #36	; 0x24
 8005276:	2102      	movs	r1, #2
 8005278:	4618      	mov	r0, r3
 800527a:	f001 fbf5 	bl	8006a68 <RCCEx_PLL3_Config>
 800527e:	4603      	mov	r3, r0
 8005280:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005282:	e009      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	75fb      	strb	r3, [r7, #23]
      break;
 8005288:	e006      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800528a:	bf00      	nop
 800528c:	e004      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800528e:	bf00      	nop
 8005290:	e002      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005292:	bf00      	nop
 8005294:	e000      	b.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10a      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800529e:	4b2e      	ldr	r3, [pc, #184]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ac:	492a      	ldr	r1, [pc, #168]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	654b      	str	r3, [r1, #84]	; 0x54
 80052b2:	e001      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
 80052b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d04d      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052ce:	d02e      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80052d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80052d4:	d828      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80052d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052da:	d02a      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80052dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e0:	d822      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80052e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052e6:	d026      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80052e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ec:	d81c      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80052ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f2:	d010      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80052f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052f8:	d816      	bhi.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d01d      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80052fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005302:	d111      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	2100      	movs	r1, #0
 800530a:	4618      	mov	r0, r3
 800530c:	f001 fafa 	bl	8006904 <RCCEx_PLL2_Config>
 8005310:	4603      	mov	r3, r0
 8005312:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005314:	e012      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	3324      	adds	r3, #36	; 0x24
 800531a:	2102      	movs	r1, #2
 800531c:	4618      	mov	r0, r3
 800531e:	f001 fba3 	bl	8006a68 <RCCEx_PLL3_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005326:	e009      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	75fb      	strb	r3, [r7, #23]
      break;
 800532c:	e006      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800532e:	bf00      	nop
 8005330:	e004      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005332:	bf00      	nop
 8005334:	e002      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800533a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10c      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005342:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005346:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005350:	4901      	ldr	r1, [pc, #4]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005352:	4313      	orrs	r3, r2
 8005354:	658b      	str	r3, [r1, #88]	; 0x58
 8005356:	e003      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005358:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800535c:	7dfb      	ldrb	r3, [r7, #23]
 800535e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005368:	2b00      	cmp	r3, #0
 800536a:	d04b      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005372:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005376:	d02e      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005378:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800537c:	d828      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800537e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005382:	d02a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005384:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005388:	d822      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800538a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800538e:	d026      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005390:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005394:	d81c      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005396:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800539a:	d010      	beq.n	80053be <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800539c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053a0:	d816      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01d      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80053a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053aa:	d111      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f001 faa6 	bl	8006904 <RCCEx_PLL2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80053bc:	e012      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3324      	adds	r3, #36	; 0x24
 80053c2:	2102      	movs	r1, #2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f001 fb4f 	bl	8006a68 <RCCEx_PLL3_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80053ce:	e009      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	75fb      	strb	r3, [r7, #23]
      break;
 80053d4:	e006      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80053d6:	bf00      	nop
 80053d8:	e004      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80053da:	bf00      	nop
 80053dc:	e002      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80053de:	bf00      	nop
 80053e0:	e000      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80053e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053e4:	7dfb      	ldrb	r3, [r7, #23]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80053ea:	4b9d      	ldr	r3, [pc, #628]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053f8:	4999      	ldr	r1, [pc, #612]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	658b      	str	r3, [r1, #88]	; 0x58
 80053fe:	e001      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541a:	d10a      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3324      	adds	r3, #36	; 0x24
 8005420:	2102      	movs	r1, #2
 8005422:	4618      	mov	r0, r3
 8005424:	f001 fb20 	bl	8006a68 <RCCEx_PLL3_Config>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005432:	4b8b      	ldr	r3, [pc, #556]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005436:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005440:	4987      	ldr	r1, [pc, #540]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005442:	4313      	orrs	r3, r2
 8005444:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005458:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800545c:	d10a      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3324      	adds	r3, #36	; 0x24
 8005462:	2102      	movs	r1, #2
 8005464:	4618      	mov	r0, r3
 8005466:	f001 faff 	bl	8006a68 <RCCEx_PLL3_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005474:	4b7a      	ldr	r3, [pc, #488]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005482:	4977      	ldr	r1, [pc, #476]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005484:	4313      	orrs	r3, r2
 8005486:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d034      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800549a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800549e:	d01d      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80054a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054a4:	d817      	bhi.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80054aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ae:	d009      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80054b0:	e011      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f001 fa23 	bl	8006904 <RCCEx_PLL2_Config>
 80054be:	4603      	mov	r3, r0
 80054c0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80054c2:	e00c      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	3324      	adds	r3, #36	; 0x24
 80054c8:	2102      	movs	r1, #2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 facc 	bl	8006a68 <RCCEx_PLL3_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80054d4:	e003      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	75fb      	strb	r3, [r7, #23]
      break;
 80054da:	e000      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80054dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054de:	7dfb      	ldrb	r3, [r7, #23]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054e4:	4b5e      	ldr	r3, [pc, #376]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054f2:	495b      	ldr	r1, [pc, #364]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	658b      	str	r3, [r1, #88]	; 0x58
 80054f8:	e001      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
 80054fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d033      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005510:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005514:	d01c      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005516:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800551a:	d816      	bhi.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800551c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005520:	d003      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005526:	d007      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005528:	e00f      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800552a:	4b4d      	ldr	r3, [pc, #308]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552e:	4a4c      	ldr	r2, [pc, #304]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005534:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005536:	e00c      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3324      	adds	r3, #36	; 0x24
 800553c:	2101      	movs	r1, #1
 800553e:	4618      	mov	r0, r3
 8005540:	f001 fa92 	bl	8006a68 <RCCEx_PLL3_Config>
 8005544:	4603      	mov	r3, r0
 8005546:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005548:	e003      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	75fb      	strb	r3, [r7, #23]
      break;
 800554e:	e000      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005552:	7dfb      	ldrb	r3, [r7, #23]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005558:	4b41      	ldr	r3, [pc, #260]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005566:	493e      	ldr	r1, [pc, #248]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005568:	4313      	orrs	r3, r2
 800556a:	654b      	str	r3, [r1, #84]	; 0x54
 800556c:	e001      	b.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d029      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558a:	d007      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800558c:	e00f      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800558e:	4b34      	ldr	r3, [pc, #208]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	4a33      	ldr	r2, [pc, #204]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005598:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800559a:	e00b      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	3304      	adds	r3, #4
 80055a0:	2102      	movs	r1, #2
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 f9ae 	bl	8006904 <RCCEx_PLL2_Config>
 80055a8:	4603      	mov	r3, r0
 80055aa:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80055ac:	e002      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	75fb      	strb	r3, [r7, #23]
      break;
 80055b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80055ba:	4b29      	ldr	r3, [pc, #164]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c6:	4926      	ldr	r1, [pc, #152]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80055cc:	e001      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ce:	7dfb      	ldrb	r3, [r7, #23]
 80055d0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3324      	adds	r3, #36	; 0x24
 80055e2:	2102      	movs	r1, #2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 fa3f 	bl	8006a68 <RCCEx_PLL3_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d033      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005608:	d017      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800560a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800560e:	d811      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005614:	d013      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800561a:	d80b      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d010      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005624:	d106      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005626:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562a:	4a0d      	ldr	r2, [pc, #52]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800562c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005632:	e007      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	75fb      	strb	r3, [r7, #23]
      break;
 8005638:	e004      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800563a:	bf00      	nop
 800563c:	e002      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800563e:	bf00      	nop
 8005640:	e000      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005642:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10c      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800564a:	4b05      	ldr	r3, [pc, #20]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800564c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005656:	4902      	ldr	r1, [pc, #8]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005658:	4313      	orrs	r3, r2
 800565a:	654b      	str	r3, [r1, #84]	; 0x54
 800565c:	e004      	b.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800565e:	bf00      	nop
 8005660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005664:	7dfb      	ldrb	r3, [r7, #23]
 8005666:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005674:	4b31      	ldr	r3, [pc, #196]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005678:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005680:	492e      	ldr	r1, [pc, #184]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005682:	4313      	orrs	r3, r2
 8005684:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005692:	4b2a      	ldr	r3, [pc, #168]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80056a0:	4926      	ldr	r1, [pc, #152]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056b2:	4b22      	ldr	r3, [pc, #136]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056be:	491f      	ldr	r1, [pc, #124]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00d      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056d0:	4b1a      	ldr	r3, [pc, #104]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	4a19      	ldr	r2, [pc, #100]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056da:	6113      	str	r3, [r2, #16]
 80056dc:	4b17      	ldr	r3, [pc, #92]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80056e6:	4915      	ldr	r1, [pc, #84]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	da08      	bge.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80056f4:	4b11      	ldr	r3, [pc, #68]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80056f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	490e      	ldr	r1, [pc, #56]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005702:	4313      	orrs	r3, r2
 8005704:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005720:	4906      	ldr	r1, [pc, #24]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005722:	4313      	orrs	r3, r2
 8005724:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005726:	7dbb      	ldrb	r3, [r7, #22]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	e000      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	58024400 	.word	0x58024400

08005740 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b090      	sub	sp, #64	; 0x40
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800574e:	f040 8095 	bne.w	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8005752:	4b97      	ldr	r3, [pc, #604]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005756:	f003 0307 	and.w	r3, r3, #7
 800575a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800575c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575e:	2b04      	cmp	r3, #4
 8005760:	f200 8088 	bhi.w	8005874 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005764:	a201      	add	r2, pc, #4	; (adr r2, 800576c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	08005781 	.word	0x08005781
 8005770:	080057a9 	.word	0x080057a9
 8005774:	080057d1 	.word	0x080057d1
 8005778:	0800586d 	.word	0x0800586d
 800577c:	080057f9 	.word	0x080057f9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005780:	4b8b      	ldr	r3, [pc, #556]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005788:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800578c:	d108      	bne.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800578e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005792:	4618      	mov	r0, r3
 8005794:	f000 ff64 	bl	8006660 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800579c:	f000 bc94 	b.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80057a0:	2300      	movs	r3, #0
 80057a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a4:	f000 bc90 	b.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057a8:	4b81      	ldr	r3, [pc, #516]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b4:	d108      	bne.n	80057c8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057b6:	f107 0318 	add.w	r3, r7, #24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fca8 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057c4:	f000 bc80 	b.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057cc:	f000 bc7c 	b.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057d0:	4b77      	ldr	r3, [pc, #476]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057dc:	d108      	bne.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057de:	f107 030c 	add.w	r3, r7, #12
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fde8 	bl	80063b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057ec:	f000 bc6c 	b.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057f4:	f000 bc68 	b.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057f8:	4b6d      	ldr	r3, [pc, #436]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80057fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005800:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005802:	4b6b      	ldr	r3, [pc, #428]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b04      	cmp	r3, #4
 800580c:	d10c      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800580e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005814:	4b66      	ldr	r3, [pc, #408]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	08db      	lsrs	r3, r3, #3
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	4a65      	ldr	r2, [pc, #404]	; (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005820:	fa22 f303 	lsr.w	r3, r2, r3
 8005824:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005826:	e01f      	b.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005828:	4b61      	ldr	r3, [pc, #388]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005834:	d106      	bne.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800583c:	d102      	bne.n	8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800583e:	4b5e      	ldr	r3, [pc, #376]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005840:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005842:	e011      	b.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005844:	4b5a      	ldr	r3, [pc, #360]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005850:	d106      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005858:	d102      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800585a:	4b58      	ldr	r3, [pc, #352]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800585e:	e003      	b.n	8005868 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005864:	f000 bc30 	b.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005868:	f000 bc2e 	b.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800586c:	4b54      	ldr	r3, [pc, #336]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005870:	f000 bc2a 	b.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005878:	f000 bc26 	b.w	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005882:	f040 809f 	bne.w	80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005886:	4b4a      	ldr	r3, [pc, #296]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800588e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005896:	d04d      	beq.n	8005934 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800589e:	f200 8084 	bhi.w	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	2bc0      	cmp	r3, #192	; 0xc0
 80058a6:	d07d      	beq.n	80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2bc0      	cmp	r3, #192	; 0xc0
 80058ac:	d87d      	bhi.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80058ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b0:	2b80      	cmp	r3, #128	; 0x80
 80058b2:	d02d      	beq.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	2b80      	cmp	r3, #128	; 0x80
 80058b8:	d877      	bhi.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d012      	beq.n	80058ec <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80058c6:	e070      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058c8:	4b39      	ldr	r3, [pc, #228]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058d4:	d107      	bne.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80058d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fec0 	bl	8006660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058e4:	e3f0      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058ea:	e3ed      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058ec:	4b30      	ldr	r3, [pc, #192]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058f8:	d107      	bne.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058fa:	f107 0318 	add.w	r3, r7, #24
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fc06 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005908:	e3de      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800590e:	e3db      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005910:	4b27      	ldr	r3, [pc, #156]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800591c:	d107      	bne.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800591e:	f107 030c 	add.w	r3, r7, #12
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fd48 	bl	80063b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800592c:	e3cc      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005932:	e3c9      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005934:	4b1e      	ldr	r3, [pc, #120]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005938:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800593c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800593e:	4b1c      	ldr	r3, [pc, #112]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b04      	cmp	r3, #4
 8005948:	d10c      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	2b00      	cmp	r3, #0
 800594e:	d109      	bne.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005950:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	08db      	lsrs	r3, r3, #3
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800595c:	fa22 f303 	lsr.w	r3, r2, r3
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005962:	e01e      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005964:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005970:	d106      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005978:	d102      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800597a:	4b0f      	ldr	r3, [pc, #60]	; (80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800597c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800597e:	e010      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005980:	4b0b      	ldr	r3, [pc, #44]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005988:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800598c:	d106      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800598e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005994:	d102      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005996:	4b09      	ldr	r3, [pc, #36]	; (80059bc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800599a:	e002      	b.n	80059a2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80059a0:	e392      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80059a2:	e391      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80059a4:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80059a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059a8:	e38e      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059ae:	e38b      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80059b0:	58024400 	.word	0x58024400
 80059b4:	03d09000 	.word	0x03d09000
 80059b8:	003d0900 	.word	0x003d0900
 80059bc:	00f42400 	.word	0x00f42400
 80059c0:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ca:	f040 809c 	bne.w	8005b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80059ce:	4b9d      	ldr	r3, [pc, #628]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80059d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059de:	d054      	beq.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80059e6:	f200 808b 	bhi.w	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059f0:	f000 8083 	beq.w	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80059fa:	f200 8081 	bhi.w	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a04:	d02f      	beq.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a0c:	d878      	bhi.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a1a:	d012      	beq.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8005a1c:	e070      	b.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a1e:	4b89      	ldr	r3, [pc, #548]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a2a:	d107      	bne.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fe15 	bl	8006660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a3a:	e345      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a40:	e342      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a42:	4b80      	ldr	r3, [pc, #512]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a4e:	d107      	bne.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a50:	f107 0318 	add.w	r3, r7, #24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fb5b 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a5e:	e333      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a64:	e330      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a66:	4b77      	ldr	r3, [pc, #476]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a72:	d107      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a74:	f107 030c 	add.w	r3, r7, #12
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fc9d 	bl	80063b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005a82:	e321      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a88:	e31e      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005a8a:	4b6e      	ldr	r3, [pc, #440]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a92:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a94:	4b6b      	ldr	r3, [pc, #428]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d10c      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8005aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005aa6:	4b67      	ldr	r3, [pc, #412]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	08db      	lsrs	r3, r3, #3
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	4a65      	ldr	r2, [pc, #404]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ab8:	e01e      	b.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005aba:	4b62      	ldr	r3, [pc, #392]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ace:	d102      	bne.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005ad0:	4b5e      	ldr	r3, [pc, #376]	; (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad4:	e010      	b.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005ad6:	4b5b      	ldr	r3, [pc, #364]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ae2:	d106      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aea:	d102      	bne.n	8005af2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005aec:	4b58      	ldr	r3, [pc, #352]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005aee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af0:	e002      	b.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005af6:	e2e7      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005af8:	e2e6      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005afa:	4b56      	ldr	r3, [pc, #344]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005afc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005afe:	e2e3      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005b00:	2300      	movs	r3, #0
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b04:	e2e0      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b0c:	f040 80a7 	bne.w	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8005b10:	4b4c      	ldr	r3, [pc, #304]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b14:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005b18:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b20:	d055      	beq.n	8005bce <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b28:	f200 8096 	bhi.w	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b32:	f000 8084 	beq.w	8005c3e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b3c:	f200 808c 	bhi.w	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b46:	d030      	beq.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b4e:	f200 8083 	bhi.w	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d004      	beq.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b5e:	d012      	beq.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8005b60:	e07a      	b.n	8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b62:	4b38      	ldr	r3, [pc, #224]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b6e:	d107      	bne.n	8005b80 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 fd73 	bl	8006660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b7e:	e2a3      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005b80:	2300      	movs	r3, #0
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b84:	e2a0      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b86:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b92:	d107      	bne.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b94:	f107 0318 	add.w	r3, r7, #24
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fab9 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8005ba2:	e291      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ba8:	e28e      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005baa:	4b26      	ldr	r3, [pc, #152]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bb6:	d107      	bne.n	8005bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bb8:	f107 030c 	add.w	r3, r7, #12
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fbfb 	bl	80063b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005bc6:	e27f      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bcc:	e27c      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005bce:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bd6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005bd8:	4b1a      	ldr	r3, [pc, #104]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d10c      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8005be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005bea:	4b16      	ldr	r3, [pc, #88]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	08db      	lsrs	r3, r3, #3
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	4a14      	ldr	r2, [pc, #80]	; (8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfc:	e01e      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005bfe:	4b11      	ldr	r3, [pc, #68]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c0a:	d106      	bne.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c12:	d102      	bne.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005c14:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005c16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c18:	e010      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c26:	d106      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c2e:	d102      	bne.n	8005c36 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8005c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c34:	e002      	b.n	8005c3c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005c3a:	e245      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005c3c:	e244      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005c3e:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005c40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c42:	e241      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005c44:	58024400 	.word	0x58024400
 8005c48:	03d09000 	.word	0x03d09000
 8005c4c:	003d0900 	.word	0x003d0900
 8005c50:	00f42400 	.word	0x00f42400
 8005c54:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005c5c:	e234      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c64:	f040 809c 	bne.w	8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005c68:	4b9b      	ldr	r3, [pc, #620]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005c70:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c78:	d054      	beq.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c80:	f200 808b 	bhi.w	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c8a:	f000 8083 	beq.w	8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c94:	f200 8081 	bhi.w	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c9e:	d02f      	beq.n	8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca6:	d878      	bhi.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d004      	beq.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb4:	d012      	beq.n	8005cdc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005cb6:	e070      	b.n	8005d9a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cb8:	4b87      	ldr	r3, [pc, #540]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fcc8 	bl	8006660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cd4:	e1f8      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cda:	e1f5      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cdc:	4b7e      	ldr	r3, [pc, #504]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ce4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cea:	f107 0318 	add.w	r3, r7, #24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fa0e 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005cf8:	e1e6      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005cfe:	e1e3      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d00:	4b75      	ldr	r3, [pc, #468]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d0e:	f107 030c 	add.w	r3, r7, #12
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fb50 	bl	80063b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005d1c:	e1d4      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d22:	e1d1      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005d24:	4b6c      	ldr	r3, [pc, #432]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d2c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005d2e:	4b6a      	ldr	r3, [pc, #424]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0304 	and.w	r3, r3, #4
 8005d36:	2b04      	cmp	r3, #4
 8005d38:	d10c      	bne.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d40:	4b65      	ldr	r3, [pc, #404]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	08db      	lsrs	r3, r3, #3
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	4a64      	ldr	r2, [pc, #400]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d52:	e01e      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005d54:	4b60      	ldr	r3, [pc, #384]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d60:	d106      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8005d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d68:	d102      	bne.n	8005d70 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005d6a:	4b5d      	ldr	r3, [pc, #372]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d6e:	e010      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005d70:	4b59      	ldr	r3, [pc, #356]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d7c:	d106      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8005d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d84:	d102      	bne.n	8005d8c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005d86:	4b57      	ldr	r3, [pc, #348]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d8a:	e002      	b.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005d90:	e19a      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005d92:	e199      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d94:	4b54      	ldr	r3, [pc, #336]	; (8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d98:	e196      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005d9e:	e193      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005da6:	d173      	bne.n	8005e90 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005da8:	4b4b      	ldr	r3, [pc, #300]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005db0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005db8:	d02f      	beq.n	8005e1a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dc0:	d863      	bhi.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d004      	beq.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dce:	d012      	beq.n	8005df6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8005dd0:	e05b      	b.n	8005e8a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005dd2:	4b41      	ldr	r3, [pc, #260]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dde:	d107      	bne.n	8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005de0:	f107 0318 	add.w	r3, r7, #24
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 f993 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005dee:	e16b      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005df4:	e168      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005df6:	4b38      	ldr	r3, [pc, #224]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e02:	d107      	bne.n	8005e14 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e04:	f107 030c 	add.w	r3, r7, #12
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fad5 	bl	80063b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005e12:	e159      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e18:	e156      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005e1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e22:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e24:	4b2c      	ldr	r3, [pc, #176]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d10c      	bne.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d109      	bne.n	8005e4a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e36:	4b28      	ldr	r3, [pc, #160]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	08db      	lsrs	r3, r3, #3
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	4a26      	ldr	r2, [pc, #152]	; (8005edc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005e42:	fa22 f303 	lsr.w	r3, r2, r3
 8005e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e48:	e01e      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e4a:	4b23      	ldr	r3, [pc, #140]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e56:	d106      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e5e:	d102      	bne.n	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005e60:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e64:	e010      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e66:	4b1c      	ldr	r3, [pc, #112]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e72:	d106      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8005e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e7a:	d102      	bne.n	8005e82 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005e7c:	4b19      	ldr	r3, [pc, #100]	; (8005ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e80:	e002      	b.n	8005e88 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005e82:	2300      	movs	r3, #0
 8005e84:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005e86:	e11f      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005e88:	e11e      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005e8e:	e11b      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e96:	d13e      	bne.n	8005f16 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005e98:	4b0f      	ldr	r3, [pc, #60]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ea0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005eae:	d01d      	beq.n	8005eec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8005eb0:	e02e      	b.n	8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005eb2:	4b09      	ldr	r3, [pc, #36]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 fbcb 	bl	8006660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ece:	e0fb      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ed4:	e0f8      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005ed6:	bf00      	nop
 8005ed8:	58024400 	.word	0x58024400
 8005edc:	03d09000 	.word	0x03d09000
 8005ee0:	003d0900 	.word	0x003d0900
 8005ee4:	00f42400 	.word	0x00f42400
 8005ee8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005eec:	4b79      	ldr	r3, [pc, #484]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ef8:	d107      	bne.n	8005f0a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efa:	f107 0318 	add.w	r3, r7, #24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 f906 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f08:	e0de      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f0e:	e0db      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005f10:	2300      	movs	r3, #0
 8005f12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005f14:	e0d8      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f1c:	f040 8085 	bne.w	800602a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005f20:	4b6c      	ldr	r3, [pc, #432]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f24:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f30:	d06b      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f38:	d874      	bhi.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f40:	d056      	beq.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f48:	d86c      	bhi.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f50:	d03b      	beq.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f58:	d864      	bhi.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f60:	d021      	beq.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f68:	d85c      	bhi.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f76:	d004      	beq.n	8005f82 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005f78:	e054      	b.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005f7a:	f000 f8b3 	bl	80060e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f7e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005f80:	e0a2      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f82:	4b54      	ldr	r3, [pc, #336]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f8e:	d107      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f90:	f107 0318 	add.w	r3, r7, #24
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 f8bb 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005f9e:	e093      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fa4:	e090      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fa6:	4b4b      	ldr	r3, [pc, #300]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fb2:	d107      	bne.n	8005fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fb4:	f107 030c 	add.w	r3, r7, #12
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 f9fd 	bl	80063b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005fc2:	e081      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fc8:	e07e      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fca:	4b42      	ldr	r3, [pc, #264]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d109      	bne.n	8005fea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fd6:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	08db      	lsrs	r3, r3, #3
 8005fdc:	f003 0303 	and.w	r3, r3, #3
 8005fe0:	4a3d      	ldr	r2, [pc, #244]	; (80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005fe8:	e06e      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005fee:	e06b      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ff0:	4b38      	ldr	r3, [pc, #224]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffc:	d102      	bne.n	8006004 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8005ffe:	4b37      	ldr	r3, [pc, #220]	; (80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006000:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006002:	e061      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006008:	e05e      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800600a:	4b32      	ldr	r3, [pc, #200]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006016:	d102      	bne.n	800601e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8006018:	4b31      	ldr	r3, [pc, #196]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800601a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800601c:	e054      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006022:	e051      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006028:	e04e      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006030:	d148      	bne.n	80060c4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006032:	4b28      	ldr	r3, [pc, #160]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006036:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800603a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800603c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006042:	d02a      	beq.n	800609a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006046:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800604a:	d838      	bhi.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800604c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800604e:	2b00      	cmp	r3, #0
 8006050:	d004      	beq.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006054:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006058:	d00d      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800605a:	e030      	b.n	80060be <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800605c:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006068:	d102      	bne.n	8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800606a:	4b1d      	ldr	r3, [pc, #116]	; (80060e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800606e:	e02b      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006074:	e028      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006076:	4b17      	ldr	r3, [pc, #92]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006082:	d107      	bne.n	8006094 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fae9 	bl	8006660 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006092:	e019      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006098:	e016      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800609a:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060a6:	d107      	bne.n	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060a8:	f107 0318 	add.w	r3, r7, #24
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 f82f 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80060b6:	e007      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80060b8:	2300      	movs	r3, #0
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060bc:	e004      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80060c2:	e001      	b.n	80060c8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80060c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3740      	adds	r7, #64	; 0x40
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	58024400 	.word	0x58024400
 80060d8:	03d09000 	.word	0x03d09000
 80060dc:	003d0900 	.word	0x003d0900
 80060e0:	00f42400 	.word	0x00f42400

080060e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80060e8:	f7fe fb46 	bl	8004778 <HAL_RCC_GetHCLKFreq>
 80060ec:	4602      	mov	r2, r0
 80060ee:	4b06      	ldr	r3, [pc, #24]	; (8006108 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	091b      	lsrs	r3, r3, #4
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	4904      	ldr	r1, [pc, #16]	; (800610c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80060fa:	5ccb      	ldrb	r3, [r1, r3]
 80060fc:	f003 031f 	and.w	r3, r3, #31
 8006100:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006104:	4618      	mov	r0, r3
 8006106:	bd80      	pop	{r7, pc}
 8006108:	58024400 	.word	0x58024400
 800610c:	0800ba38 	.word	0x0800ba38

08006110 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006110:	b480      	push	{r7}
 8006112:	b089      	sub	sp, #36	; 0x24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006118:	4ba1      	ldr	r3, [pc, #644]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	f003 0303 	and.w	r3, r3, #3
 8006120:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006122:	4b9f      	ldr	r3, [pc, #636]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006126:	0b1b      	lsrs	r3, r3, #12
 8006128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800612c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800612e:	4b9c      	ldr	r3, [pc, #624]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800613a:	4b99      	ldr	r3, [pc, #612]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	08db      	lsrs	r3, r3, #3
 8006140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8111 	beq.w	8006380 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b02      	cmp	r3, #2
 8006162:	f000 8083 	beq.w	800626c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	2b02      	cmp	r3, #2
 800616a:	f200 80a1 	bhi.w	80062b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d056      	beq.n	8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800617a:	e099      	b.n	80062b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800617c:	4b88      	ldr	r3, [pc, #544]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0320 	and.w	r3, r3, #32
 8006184:	2b00      	cmp	r3, #0
 8006186:	d02d      	beq.n	80061e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006188:	4b85      	ldr	r3, [pc, #532]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	08db      	lsrs	r3, r3, #3
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	4a84      	ldr	r2, [pc, #528]	; (80063a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
 8006198:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	ee07 3a90 	vmov	s15, r3
 80061a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b2:	4b7b      	ldr	r3, [pc, #492]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80063a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80061e2:	e087      	b.n	80062f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	ee07 3a90 	vmov	s15, r3
 80061ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80063ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80061f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f6:	4b6a      	ldr	r3, [pc, #424]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006206:	ed97 6a03 	vldr	s12, [r7, #12]
 800620a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80063a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800620e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006216:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800621e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006222:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006226:	e065      	b.n	80062f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800623a:	4b59      	ldr	r3, [pc, #356]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006242:	ee07 3a90 	vmov	s15, r3
 8006246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800624a:	ed97 6a03 	vldr	s12, [r7, #12]
 800624e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80063a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800625a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800625e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006266:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800626a:	e043      	b.n	80062f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006276:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800627a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800627e:	4b48      	ldr	r3, [pc, #288]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006286:	ee07 3a90 	vmov	s15, r3
 800628a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800628e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006292:	eddf 5a45 	vldr	s11, [pc, #276]	; 80063a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800629a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800629e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062ae:	e021      	b.n	80062f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062c2:	4b37      	ldr	r3, [pc, #220]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ca:	ee07 3a90 	vmov	s15, r3
 80062ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80063a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80062f4:	4b2a      	ldr	r3, [pc, #168]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	0a5b      	lsrs	r3, r3, #9
 80062fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800630a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800630e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006312:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800631a:	ee17 2a90 	vmov	r2, s15
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006322:	4b1f      	ldr	r3, [pc, #124]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006326:	0c1b      	lsrs	r3, r3, #16
 8006328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006338:	ee37 7a87 	vadd.f32	s14, s15, s14
 800633c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006348:	ee17 2a90 	vmov	r2, s15
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006350:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	0e1b      	lsrs	r3, r3, #24
 8006356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800636a:	edd7 6a07 	vldr	s13, [r7, #28]
 800636e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006376:	ee17 2a90 	vmov	r2, s15
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800637e:	e008      	b.n	8006392 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	609a      	str	r2, [r3, #8]
}
 8006392:	bf00      	nop
 8006394:	3724      	adds	r7, #36	; 0x24
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	58024400 	.word	0x58024400
 80063a4:	03d09000 	.word	0x03d09000
 80063a8:	46000000 	.word	0x46000000
 80063ac:	4c742400 	.word	0x4c742400
 80063b0:	4a742400 	.word	0x4a742400
 80063b4:	4b742400 	.word	0x4b742400

080063b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b089      	sub	sp, #36	; 0x24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063c0:	4ba1      	ldr	r3, [pc, #644]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	f003 0303 	and.w	r3, r3, #3
 80063c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80063ca:	4b9f      	ldr	r3, [pc, #636]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	0d1b      	lsrs	r3, r3, #20
 80063d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80063d6:	4b9c      	ldr	r3, [pc, #624]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063da:	0a1b      	lsrs	r3, r3, #8
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80063e2:	4b99      	ldr	r3, [pc, #612]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	08db      	lsrs	r3, r3, #3
 80063e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	fb02 f303 	mul.w	r3, r2, r3
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8111 	beq.w	8006628 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b02      	cmp	r3, #2
 800640a:	f000 8083 	beq.w	8006514 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	2b02      	cmp	r3, #2
 8006412:	f200 80a1 	bhi.w	8006558 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d056      	beq.n	80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006422:	e099      	b.n	8006558 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006424:	4b88      	ldr	r3, [pc, #544]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d02d      	beq.n	800648c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006430:	4b85      	ldr	r3, [pc, #532]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	08db      	lsrs	r3, r3, #3
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	4a84      	ldr	r2, [pc, #528]	; (800664c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800643c:	fa22 f303 	lsr.w	r3, r2, r3
 8006440:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	ee07 3a90 	vmov	s15, r3
 8006448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800645a:	4b7b      	ldr	r3, [pc, #492]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800646a:	ed97 6a03 	vldr	s12, [r7, #12]
 800646e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800647a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800647e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006486:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800648a:	e087      	b.n	800659c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006496:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006654 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800649a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649e:	4b6a      	ldr	r3, [pc, #424]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80064b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064ce:	e065      	b.n	800659c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e2:	4b59      	ldr	r3, [pc, #356]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80064f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800650a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006512:	e043      	b.n	800659c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800665c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006526:	4b48      	ldr	r3, [pc, #288]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006536:	ed97 6a03 	vldr	s12, [r7, #12]
 800653a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800653e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800654a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006552:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006556:	e021      	b.n	800659c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656a:	4b37      	ldr	r3, [pc, #220]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657a:	ed97 6a03 	vldr	s12, [r7, #12]
 800657e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006650 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800658e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006596:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800659a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800659c:	4b2a      	ldr	r3, [pc, #168]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	0a5b      	lsrs	r3, r3, #9
 80065a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a6:	ee07 3a90 	vmov	s15, r3
 80065aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c2:	ee17 2a90 	vmov	r2, s15
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80065ca:	4b1f      	ldr	r3, [pc, #124]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ce:	0c1b      	lsrs	r3, r3, #16
 80065d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d4:	ee07 3a90 	vmov	s15, r3
 80065d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80065e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065f0:	ee17 2a90 	vmov	r2, s15
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80065f8:	4b13      	ldr	r3, [pc, #76]	; (8006648 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	0e1b      	lsrs	r3, r3, #24
 80065fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006602:	ee07 3a90 	vmov	s15, r3
 8006606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800660a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800660e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006612:	edd7 6a07 	vldr	s13, [r7, #28]
 8006616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800661a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800661e:	ee17 2a90 	vmov	r2, s15
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006626:	e008      	b.n	800663a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	609a      	str	r2, [r3, #8]
}
 800663a:	bf00      	nop
 800663c:	3724      	adds	r7, #36	; 0x24
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	58024400 	.word	0x58024400
 800664c:	03d09000 	.word	0x03d09000
 8006650:	46000000 	.word	0x46000000
 8006654:	4c742400 	.word	0x4c742400
 8006658:	4a742400 	.word	0x4a742400
 800665c:	4b742400 	.word	0x4b742400

08006660 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8006660:	b480      	push	{r7}
 8006662:	b089      	sub	sp, #36	; 0x24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006668:	4ba0      	ldr	r3, [pc, #640]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800666a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666c:	f003 0303 	and.w	r3, r3, #3
 8006670:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8006672:	4b9e      	ldr	r3, [pc, #632]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006676:	091b      	lsrs	r3, r3, #4
 8006678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800667c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800667e:	4b9b      	ldr	r3, [pc, #620]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006688:	4b98      	ldr	r3, [pc, #608]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668c:	08db      	lsrs	r3, r3, #3
 800668e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	fb02 f303 	mul.w	r3, r2, r3
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8111 	beq.w	80068ce <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	f000 8083 	beq.w	80067ba <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	f200 80a1 	bhi.w	80067fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d056      	beq.n	8006776 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80066c8:	e099      	b.n	80067fe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066ca:	4b88      	ldr	r3, [pc, #544]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d02d      	beq.n	8006732 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066d6:	4b85      	ldr	r3, [pc, #532]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	08db      	lsrs	r3, r3, #3
 80066dc:	f003 0303 	and.w	r3, r3, #3
 80066e0:	4a83      	ldr	r2, [pc, #524]	; (80068f0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80066e2:	fa22 f303 	lsr.w	r3, r2, r3
 80066e6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006700:	4b7a      	ldr	r3, [pc, #488]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006708:	ee07 3a90 	vmov	s15, r3
 800670c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006710:	ed97 6a03 	vldr	s12, [r7, #12]
 8006714:	eddf 5a77 	vldr	s11, [pc, #476]	; 80068f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006718:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800671c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006730:	e087      	b.n	8006842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	ee07 3a90 	vmov	s15, r3
 8006738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80068f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006744:	4b69      	ldr	r3, [pc, #420]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674c:	ee07 3a90 	vmov	s15, r3
 8006750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006754:	ed97 6a03 	vldr	s12, [r7, #12]
 8006758:	eddf 5a66 	vldr	s11, [pc, #408]	; 80068f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800675c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006770:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006774:	e065      	b.n	8006842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	ee07 3a90 	vmov	s15, r3
 800677c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006780:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006788:	4b58      	ldr	r3, [pc, #352]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800678a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006790:	ee07 3a90 	vmov	s15, r3
 8006794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006798:	ed97 6a03 	vldr	s12, [r7, #12]
 800679c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80068f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067b8:	e043      	b.n	8006842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	ee07 3a90 	vmov	s15, r3
 80067c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067c4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006900 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80067c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067cc:	4b47      	ldr	r3, [pc, #284]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067d4:	ee07 3a90 	vmov	s15, r3
 80067d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80067e0:	eddf 5a44 	vldr	s11, [pc, #272]	; 80068f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80067fc:	e021      	b.n	8006842 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	ee07 3a90 	vmov	s15, r3
 8006804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006808:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80068f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800680c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006810:	4b36      	ldr	r3, [pc, #216]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006818:	ee07 3a90 	vmov	s15, r3
 800681c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006820:	ed97 6a03 	vldr	s12, [r7, #12]
 8006824:	eddf 5a33 	vldr	s11, [pc, #204]	; 80068f4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800682c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800683c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006840:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8006842:	4b2a      	ldr	r3, [pc, #168]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006846:	0a5b      	lsrs	r3, r3, #9
 8006848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800684c:	ee07 3a90 	vmov	s15, r3
 8006850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006858:	ee37 7a87 	vadd.f32	s14, s15, s14
 800685c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006868:	ee17 2a90 	vmov	r2, s15
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8006870:	4b1e      	ldr	r3, [pc, #120]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	0c1b      	lsrs	r3, r3, #16
 8006876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800688a:	edd7 6a07 	vldr	s13, [r7, #28]
 800688e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006896:	ee17 2a90 	vmov	r2, s15
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800689e:	4b13      	ldr	r3, [pc, #76]	; (80068ec <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a2:	0e1b      	lsrs	r3, r3, #24
 80068a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a8:	ee07 3a90 	vmov	s15, r3
 80068ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068c4:	ee17 2a90 	vmov	r2, s15
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80068cc:	e008      	b.n	80068e0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	609a      	str	r2, [r3, #8]
}
 80068e0:	bf00      	nop
 80068e2:	3724      	adds	r7, #36	; 0x24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr
 80068ec:	58024400 	.word	0x58024400
 80068f0:	03d09000 	.word	0x03d09000
 80068f4:	46000000 	.word	0x46000000
 80068f8:	4c742400 	.word	0x4c742400
 80068fc:	4a742400 	.word	0x4a742400
 8006900:	4b742400 	.word	0x4b742400

08006904 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006912:	4b53      	ldr	r3, [pc, #332]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	2b03      	cmp	r3, #3
 800691c:	d101      	bne.n	8006922 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e099      	b.n	8006a56 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006922:	4b4f      	ldr	r3, [pc, #316]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a4e      	ldr	r2, [pc, #312]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006928:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800692c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800692e:	f7fb fafb 	bl	8001f28 <HAL_GetTick>
 8006932:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006934:	e008      	b.n	8006948 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006936:	f7fb faf7 	bl	8001f28 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d901      	bls.n	8006948 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e086      	b.n	8006a56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006948:	4b45      	ldr	r3, [pc, #276]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1f0      	bne.n	8006936 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006954:	4b42      	ldr	r3, [pc, #264]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	031b      	lsls	r3, r3, #12
 8006962:	493f      	ldr	r1, [pc, #252]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006964:	4313      	orrs	r3, r2
 8006966:	628b      	str	r3, [r1, #40]	; 0x28
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	3b01      	subs	r3, #1
 800696e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	3b01      	subs	r3, #1
 8006978:	025b      	lsls	r3, r3, #9
 800697a:	b29b      	uxth	r3, r3
 800697c:	431a      	orrs	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	3b01      	subs	r3, #1
 8006984:	041b      	lsls	r3, r3, #16
 8006986:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	3b01      	subs	r3, #1
 8006992:	061b      	lsls	r3, r3, #24
 8006994:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006998:	4931      	ldr	r1, [pc, #196]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 800699a:	4313      	orrs	r3, r2
 800699c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800699e:	4b30      	ldr	r3, [pc, #192]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	492d      	ldr	r1, [pc, #180]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069b0:	4b2b      	ldr	r3, [pc, #172]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	f023 0220 	bic.w	r2, r3, #32
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	4928      	ldr	r1, [pc, #160]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069c2:	4b27      	ldr	r3, [pc, #156]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c6:	4a26      	ldr	r2, [pc, #152]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069c8:	f023 0310 	bic.w	r3, r3, #16
 80069cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069ce:	4b24      	ldr	r3, [pc, #144]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <RCCEx_PLL2_Config+0x160>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	69d2      	ldr	r2, [r2, #28]
 80069da:	00d2      	lsls	r2, r2, #3
 80069dc:	4920      	ldr	r1, [pc, #128]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80069e2:	4b1f      	ldr	r3, [pc, #124]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	4a1e      	ldr	r2, [pc, #120]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069e8:	f043 0310 	orr.w	r3, r3, #16
 80069ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80069f4:	4b1a      	ldr	r3, [pc, #104]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	4a19      	ldr	r2, [pc, #100]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 80069fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a00:	e00f      	b.n	8006a22 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d106      	bne.n	8006a16 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a08:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	4a14      	ldr	r2, [pc, #80]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a14:	e005      	b.n	8006a22 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a16:	4b12      	ldr	r3, [pc, #72]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	4a11      	ldr	r2, [pc, #68]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006a1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a22:	4b0f      	ldr	r3, [pc, #60]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a0e      	ldr	r2, [pc, #56]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006a28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a2e:	f7fb fa7b 	bl	8001f28 <HAL_GetTick>
 8006a32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a34:	e008      	b.n	8006a48 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006a36:	f7fb fa77 	bl	8001f28 <HAL_GetTick>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	1ad3      	subs	r3, r2, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d901      	bls.n	8006a48 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e006      	b.n	8006a56 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a48:	4b05      	ldr	r3, [pc, #20]	; (8006a60 <RCCEx_PLL2_Config+0x15c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0f0      	beq.n	8006a36 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	58024400 	.word	0x58024400
 8006a64:	ffff0007 	.word	0xffff0007

08006a68 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a72:	2300      	movs	r3, #0
 8006a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a76:	4b53      	ldr	r3, [pc, #332]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d101      	bne.n	8006a86 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e099      	b.n	8006bba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a86:	4b4f      	ldr	r3, [pc, #316]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a4e      	ldr	r2, [pc, #312]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006a8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a92:	f7fb fa49 	bl	8001f28 <HAL_GetTick>
 8006a96:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a98:	e008      	b.n	8006aac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006a9a:	f7fb fa45 	bl	8001f28 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d901      	bls.n	8006aac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	e086      	b.n	8006bba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006aac:	4b45      	ldr	r3, [pc, #276]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1f0      	bne.n	8006a9a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ab8:	4b42      	ldr	r3, [pc, #264]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	051b      	lsls	r3, r3, #20
 8006ac6:	493f      	ldr	r1, [pc, #252]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	628b      	str	r3, [r1, #40]	; 0x28
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	3b01      	subs	r3, #1
 8006ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	025b      	lsls	r3, r3, #9
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	431a      	orrs	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	041b      	lsls	r3, r3, #16
 8006aea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	3b01      	subs	r3, #1
 8006af6:	061b      	lsls	r3, r3, #24
 8006af8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006afc:	4931      	ldr	r1, [pc, #196]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b02:	4b30      	ldr	r3, [pc, #192]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	695b      	ldr	r3, [r3, #20]
 8006b0e:	492d      	ldr	r1, [pc, #180]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b14:	4b2b      	ldr	r3, [pc, #172]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	4928      	ldr	r1, [pc, #160]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b22:	4313      	orrs	r3, r2
 8006b24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b26:	4b27      	ldr	r3, [pc, #156]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	4a26      	ldr	r2, [pc, #152]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b32:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b36:	4b24      	ldr	r3, [pc, #144]	; (8006bc8 <RCCEx_PLL3_Config+0x160>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	69d2      	ldr	r2, [r2, #28]
 8006b3e:	00d2      	lsls	r2, r2, #3
 8006b40:	4920      	ldr	r1, [pc, #128]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b46:	4b1f      	ldr	r3, [pc, #124]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	4a1e      	ldr	r2, [pc, #120]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d106      	bne.n	8006b66 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b58:	4b1a      	ldr	r3, [pc, #104]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	4a19      	ldr	r2, [pc, #100]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b64:	e00f      	b.n	8006b86 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d106      	bne.n	8006b7a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b6c:	4b15      	ldr	r3, [pc, #84]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b70:	4a14      	ldr	r2, [pc, #80]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b78:	e005      	b.n	8006b86 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b7a:	4b12      	ldr	r3, [pc, #72]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	4a11      	ldr	r2, [pc, #68]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b86:	4b0f      	ldr	r3, [pc, #60]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a0e      	ldr	r2, [pc, #56]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b92:	f7fb f9c9 	bl	8001f28 <HAL_GetTick>
 8006b96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006b98:	e008      	b.n	8006bac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006b9a:	f7fb f9c5 	bl	8001f28 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d901      	bls.n	8006bac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e006      	b.n	8006bba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bac:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <RCCEx_PLL3_Config+0x15c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0f0      	beq.n	8006b9a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	58024400 	.word	0x58024400
 8006bc8:	ffff0007 	.word	0xffff0007

08006bcc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e0f1      	b.n	8006dc2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a78      	ldr	r2, [pc, #480]	; (8006dcc <HAL_SPI_Init+0x200>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00f      	beq.n	8006c0e <HAL_SPI_Init+0x42>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a77      	ldr	r2, [pc, #476]	; (8006dd0 <HAL_SPI_Init+0x204>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d00a      	beq.n	8006c0e <HAL_SPI_Init+0x42>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a75      	ldr	r2, [pc, #468]	; (8006dd4 <HAL_SPI_Init+0x208>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d005      	beq.n	8006c0e <HAL_SPI_Init+0x42>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	2b0f      	cmp	r3, #15
 8006c08:	d901      	bls.n	8006c0e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e0d9      	b.n	8006dc2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f8e2 	bl	8006dd8 <SPI_GetPacketSize>
 8006c14:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a6c      	ldr	r2, [pc, #432]	; (8006dcc <HAL_SPI_Init+0x200>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00c      	beq.n	8006c3a <HAL_SPI_Init+0x6e>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a6a      	ldr	r2, [pc, #424]	; (8006dd0 <HAL_SPI_Init+0x204>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d007      	beq.n	8006c3a <HAL_SPI_Init+0x6e>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a69      	ldr	r2, [pc, #420]	; (8006dd4 <HAL_SPI_Init+0x208>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d002      	beq.n	8006c3a <HAL_SPI_Init+0x6e>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2b08      	cmp	r3, #8
 8006c38:	d811      	bhi.n	8006c5e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006c3e:	4a63      	ldr	r2, [pc, #396]	; (8006dcc <HAL_SPI_Init+0x200>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d009      	beq.n	8006c58 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a61      	ldr	r2, [pc, #388]	; (8006dd0 <HAL_SPI_Init+0x204>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d004      	beq.n	8006c58 <HAL_SPI_Init+0x8c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a60      	ldr	r2, [pc, #384]	; (8006dd4 <HAL_SPI_Init+0x208>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d104      	bne.n	8006c62 <HAL_SPI_Init+0x96>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2b10      	cmp	r3, #16
 8006c5c:	d901      	bls.n	8006c62 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e0af      	b.n	8006dc2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fa fd00 	bl	800167c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0201 	bic.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006c9e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ca8:	d119      	bne.n	8006cde <HAL_SPI_Init+0x112>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cb2:	d103      	bne.n	8006cbc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d008      	beq.n	8006cce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10c      	bne.n	8006cde <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006cc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ccc:	d107      	bne.n	8006cde <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cdc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69da      	ldr	r2, [r3, #28]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	431a      	orrs	r2, r3
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf0:	ea42 0103 	orr.w	r1, r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d08:	431a      	orrs	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	695b      	ldr	r3, [r3, #20]
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	431a      	orrs	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d3e:	ea42 0103 	orr.w	r1, r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d113      	bne.n	8006d7e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d68:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d7c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f022 0201 	bic.w	r2, r2, #1
 8006d8c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	430a      	orrs	r2, r1
 8006dae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40013000 	.word	0x40013000
 8006dd0:	40003800 	.word	0x40003800
 8006dd4:	40003c00 	.word	0x40003c00

08006dd8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	3301      	adds	r3, #1
 8006de8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	3307      	adds	r3, #7
 8006df6:	08db      	lsrs	r3, r3, #3
 8006df8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	fb02 f303 	mul.w	r3, r2, r3
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b082      	sub	sp, #8
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e049      	b.n	8006eb4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d106      	bne.n	8006e3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f841 	bl	8006ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f000 fb69 	bl	8007524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d001      	beq.n	8006ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e054      	b.n	8006f92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0201 	orr.w	r2, r2, #1
 8006efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a26      	ldr	r2, [pc, #152]	; (8006fa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d022      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0x80>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f12:	d01d      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0x80>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a22      	ldr	r2, [pc, #136]	; (8006fa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d018      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0x80>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a21      	ldr	r2, [pc, #132]	; (8006fa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d013      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0x80>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <HAL_TIM_Base_Start_IT+0xdc>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00e      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0x80>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a1e      	ldr	r2, [pc, #120]	; (8006fb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d009      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0x80>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a1c      	ldr	r2, [pc, #112]	; (8006fb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d004      	beq.n	8006f50 <HAL_TIM_Base_Start_IT+0x80>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a1b      	ldr	r2, [pc, #108]	; (8006fb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d115      	bne.n	8006f7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689a      	ldr	r2, [r3, #8]
 8006f56:	4b19      	ldr	r3, [pc, #100]	; (8006fbc <HAL_TIM_Base_Start_IT+0xec>)
 8006f58:	4013      	ands	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b06      	cmp	r3, #6
 8006f60:	d015      	beq.n	8006f8e <HAL_TIM_Base_Start_IT+0xbe>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f68:	d011      	beq.n	8006f8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f042 0201 	orr.w	r2, r2, #1
 8006f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f7a:	e008      	b.n	8006f8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0201 	orr.w	r2, r2, #1
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	e000      	b.n	8006f90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40000400 	.word	0x40000400
 8006fa8:	40000800 	.word	0x40000800
 8006fac:	40000c00 	.word	0x40000c00
 8006fb0:	40010400 	.word	0x40010400
 8006fb4:	40001800 	.word	0x40001800
 8006fb8:	40014000 	.word	0x40014000
 8006fbc:	00010007 	.word	0x00010007

08006fc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e049      	b.n	8007066 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d106      	bne.n	8006fec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fa fbac 	bl	8001744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3304      	adds	r3, #4
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f000 fa90 	bl	8007524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3708      	adds	r7, #8
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b02      	cmp	r3, #2
 8007082:	d122      	bne.n	80070ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b02      	cmp	r3, #2
 8007090:	d11b      	bne.n	80070ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f06f 0202 	mvn.w	r2, #2
 800709a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d003      	beq.n	80070b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fa19 	bl	80074e8 <HAL_TIM_IC_CaptureCallback>
 80070b6:	e005      	b.n	80070c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fa0b 	bl	80074d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa1c 	bl	80074fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b04      	cmp	r3, #4
 80070d6:	d122      	bne.n	800711e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d11b      	bne.n	800711e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f06f 0204 	mvn.w	r2, #4
 80070ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f9ef 	bl	80074e8 <HAL_TIM_IC_CaptureCallback>
 800710a:	e005      	b.n	8007118 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f9e1 	bl	80074d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f9f2 	bl	80074fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b08      	cmp	r3, #8
 800712a:	d122      	bne.n	8007172 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f003 0308 	and.w	r3, r3, #8
 8007136:	2b08      	cmp	r3, #8
 8007138:	d11b      	bne.n	8007172 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f06f 0208 	mvn.w	r2, #8
 8007142:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2204      	movs	r2, #4
 8007148:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69db      	ldr	r3, [r3, #28]
 8007150:	f003 0303 	and.w	r3, r3, #3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d003      	beq.n	8007160 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f9c5 	bl	80074e8 <HAL_TIM_IC_CaptureCallback>
 800715e:	e005      	b.n	800716c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f9b7 	bl	80074d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f9c8 	bl	80074fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2b10      	cmp	r3, #16
 800717e:	d122      	bne.n	80071c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f003 0310 	and.w	r3, r3, #16
 800718a:	2b10      	cmp	r3, #16
 800718c:	d11b      	bne.n	80071c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f06f 0210 	mvn.w	r2, #16
 8007196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2208      	movs	r2, #8
 800719c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f99b 	bl	80074e8 <HAL_TIM_IC_CaptureCallback>
 80071b2:	e005      	b.n	80071c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f98d 	bl	80074d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f99e 	bl	80074fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d10e      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	f003 0301 	and.w	r3, r3, #1
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d107      	bne.n	80071f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f06f 0201 	mvn.w	r2, #1
 80071ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7fa f8c3 	bl	8001378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fc:	2b80      	cmp	r3, #128	; 0x80
 80071fe:	d10e      	bne.n	800721e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720a:	2b80      	cmp	r3, #128	; 0x80
 800720c:	d107      	bne.n	800721e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fd8b 	bl	8007d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800722c:	d10e      	bne.n	800724c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007238:	2b80      	cmp	r3, #128	; 0x80
 800723a:	d107      	bne.n	800724c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fd7e 	bl	8007d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d10e      	bne.n	8007278 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007264:	2b40      	cmp	r3, #64	; 0x40
 8007266:	d107      	bne.n	8007278 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f94c 	bl	8007510 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0320 	and.w	r3, r3, #32
 8007282:	2b20      	cmp	r3, #32
 8007284:	d10e      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b20      	cmp	r3, #32
 8007292:	d107      	bne.n	80072a4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0220 	mvn.w	r2, #32
 800729c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 fd3e 	bl	8007d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e0ff      	b.n	80074ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b14      	cmp	r3, #20
 80072d6:	f200 80f0 	bhi.w	80074ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80072da:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80072dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e0:	08007335 	.word	0x08007335
 80072e4:	080074bb 	.word	0x080074bb
 80072e8:	080074bb 	.word	0x080074bb
 80072ec:	080074bb 	.word	0x080074bb
 80072f0:	08007375 	.word	0x08007375
 80072f4:	080074bb 	.word	0x080074bb
 80072f8:	080074bb 	.word	0x080074bb
 80072fc:	080074bb 	.word	0x080074bb
 8007300:	080073b7 	.word	0x080073b7
 8007304:	080074bb 	.word	0x080074bb
 8007308:	080074bb 	.word	0x080074bb
 800730c:	080074bb 	.word	0x080074bb
 8007310:	080073f7 	.word	0x080073f7
 8007314:	080074bb 	.word	0x080074bb
 8007318:	080074bb 	.word	0x080074bb
 800731c:	080074bb 	.word	0x080074bb
 8007320:	08007439 	.word	0x08007439
 8007324:	080074bb 	.word	0x080074bb
 8007328:	080074bb 	.word	0x080074bb
 800732c:	080074bb 	.word	0x080074bb
 8007330:	08007479 	.word	0x08007479
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 f98c 	bl	8007658 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	699a      	ldr	r2, [r3, #24]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0208 	orr.w	r2, r2, #8
 800734e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699a      	ldr	r2, [r3, #24]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f022 0204 	bic.w	r2, r2, #4
 800735e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6999      	ldr	r1, [r3, #24]
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	691a      	ldr	r2, [r3, #16]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	619a      	str	r2, [r3, #24]
      break;
 8007372:	e0a5      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68b9      	ldr	r1, [r7, #8]
 800737a:	4618      	mov	r0, r3
 800737c:	f000 f9fc 	bl	8007778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	699a      	ldr	r2, [r3, #24]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800738e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	699a      	ldr	r2, [r3, #24]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6999      	ldr	r1, [r3, #24]
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	021a      	lsls	r2, r3, #8
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	619a      	str	r2, [r3, #24]
      break;
 80073b4:	e084      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 fa65 	bl	800788c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f042 0208 	orr.w	r2, r2, #8
 80073d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	69da      	ldr	r2, [r3, #28]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f022 0204 	bic.w	r2, r2, #4
 80073e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69d9      	ldr	r1, [r3, #28]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	61da      	str	r2, [r3, #28]
      break;
 80073f4:	e064      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68b9      	ldr	r1, [r7, #8]
 80073fc:	4618      	mov	r0, r3
 80073fe:	f000 facd 	bl	800799c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69da      	ldr	r2, [r3, #28]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69da      	ldr	r2, [r3, #28]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	69d9      	ldr	r1, [r3, #28]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	021a      	lsls	r2, r3, #8
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	430a      	orrs	r2, r1
 8007434:	61da      	str	r2, [r3, #28]
      break;
 8007436:	e043      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fb16 	bl	8007a70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0208 	orr.w	r2, r2, #8
 8007452:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0204 	bic.w	r2, r2, #4
 8007462:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007476:	e023      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fb5a 	bl	8007b38 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007492:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	021a      	lsls	r2, r3, #8
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074b8:	e002      	b.n	80074c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	75fb      	strb	r3, [r7, #23]
      break;
 80074be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop

080074d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007504:	bf00      	nop
 8007506:	370c      	adds	r7, #12
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a40      	ldr	r2, [pc, #256]	; (8007638 <TIM_Base_SetConfig+0x114>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d013      	beq.n	8007564 <TIM_Base_SetConfig+0x40>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007542:	d00f      	beq.n	8007564 <TIM_Base_SetConfig+0x40>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a3d      	ldr	r2, [pc, #244]	; (800763c <TIM_Base_SetConfig+0x118>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d00b      	beq.n	8007564 <TIM_Base_SetConfig+0x40>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a3c      	ldr	r2, [pc, #240]	; (8007640 <TIM_Base_SetConfig+0x11c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d007      	beq.n	8007564 <TIM_Base_SetConfig+0x40>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a3b      	ldr	r2, [pc, #236]	; (8007644 <TIM_Base_SetConfig+0x120>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d003      	beq.n	8007564 <TIM_Base_SetConfig+0x40>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a3a      	ldr	r2, [pc, #232]	; (8007648 <TIM_Base_SetConfig+0x124>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d108      	bne.n	8007576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800756a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a2f      	ldr	r2, [pc, #188]	; (8007638 <TIM_Base_SetConfig+0x114>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d01f      	beq.n	80075be <TIM_Base_SetConfig+0x9a>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007584:	d01b      	beq.n	80075be <TIM_Base_SetConfig+0x9a>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a2c      	ldr	r2, [pc, #176]	; (800763c <TIM_Base_SetConfig+0x118>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d017      	beq.n	80075be <TIM_Base_SetConfig+0x9a>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a2b      	ldr	r2, [pc, #172]	; (8007640 <TIM_Base_SetConfig+0x11c>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d013      	beq.n	80075be <TIM_Base_SetConfig+0x9a>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a2a      	ldr	r2, [pc, #168]	; (8007644 <TIM_Base_SetConfig+0x120>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d00f      	beq.n	80075be <TIM_Base_SetConfig+0x9a>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a29      	ldr	r2, [pc, #164]	; (8007648 <TIM_Base_SetConfig+0x124>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d00b      	beq.n	80075be <TIM_Base_SetConfig+0x9a>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a28      	ldr	r2, [pc, #160]	; (800764c <TIM_Base_SetConfig+0x128>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d007      	beq.n	80075be <TIM_Base_SetConfig+0x9a>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	4a27      	ldr	r2, [pc, #156]	; (8007650 <TIM_Base_SetConfig+0x12c>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d003      	beq.n	80075be <TIM_Base_SetConfig+0x9a>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a26      	ldr	r2, [pc, #152]	; (8007654 <TIM_Base_SetConfig+0x130>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d108      	bne.n	80075d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	695b      	ldr	r3, [r3, #20]
 80075da:	4313      	orrs	r3, r2
 80075dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a10      	ldr	r2, [pc, #64]	; (8007638 <TIM_Base_SetConfig+0x114>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d00f      	beq.n	800761c <TIM_Base_SetConfig+0xf8>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a12      	ldr	r2, [pc, #72]	; (8007648 <TIM_Base_SetConfig+0x124>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d00b      	beq.n	800761c <TIM_Base_SetConfig+0xf8>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a11      	ldr	r2, [pc, #68]	; (800764c <TIM_Base_SetConfig+0x128>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d007      	beq.n	800761c <TIM_Base_SetConfig+0xf8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a10      	ldr	r2, [pc, #64]	; (8007650 <TIM_Base_SetConfig+0x12c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d003      	beq.n	800761c <TIM_Base_SetConfig+0xf8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a0f      	ldr	r2, [pc, #60]	; (8007654 <TIM_Base_SetConfig+0x130>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d103      	bne.n	8007624 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	691a      	ldr	r2, [r3, #16]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	615a      	str	r2, [r3, #20]
}
 800762a:	bf00      	nop
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	40010000 	.word	0x40010000
 800763c:	40000400 	.word	0x40000400
 8007640:	40000800 	.word	0x40000800
 8007644:	40000c00 	.word	0x40000c00
 8007648:	40010400 	.word	0x40010400
 800764c:	40014000 	.word	0x40014000
 8007650:	40014400 	.word	0x40014400
 8007654:	40014800 	.word	0x40014800

08007658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007658:	b480      	push	{r7}
 800765a:	b087      	sub	sp, #28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	f023 0201 	bic.w	r2, r3, #1
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007680:	68fa      	ldr	r2, [r7, #12]
 8007682:	4b37      	ldr	r3, [pc, #220]	; (8007760 <TIM_OC1_SetConfig+0x108>)
 8007684:	4013      	ands	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f023 0302 	bic.w	r3, r3, #2
 80076a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a2d      	ldr	r2, [pc, #180]	; (8007764 <TIM_OC1_SetConfig+0x10c>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d00f      	beq.n	80076d4 <TIM_OC1_SetConfig+0x7c>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a2c      	ldr	r2, [pc, #176]	; (8007768 <TIM_OC1_SetConfig+0x110>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00b      	beq.n	80076d4 <TIM_OC1_SetConfig+0x7c>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4a2b      	ldr	r2, [pc, #172]	; (800776c <TIM_OC1_SetConfig+0x114>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d007      	beq.n	80076d4 <TIM_OC1_SetConfig+0x7c>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a2a      	ldr	r2, [pc, #168]	; (8007770 <TIM_OC1_SetConfig+0x118>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <TIM_OC1_SetConfig+0x7c>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a29      	ldr	r2, [pc, #164]	; (8007774 <TIM_OC1_SetConfig+0x11c>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d10c      	bne.n	80076ee <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f023 0308 	bic.w	r3, r3, #8
 80076da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f023 0304 	bic.w	r3, r3, #4
 80076ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a1c      	ldr	r2, [pc, #112]	; (8007764 <TIM_OC1_SetConfig+0x10c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d00f      	beq.n	8007716 <TIM_OC1_SetConfig+0xbe>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a1b      	ldr	r2, [pc, #108]	; (8007768 <TIM_OC1_SetConfig+0x110>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d00b      	beq.n	8007716 <TIM_OC1_SetConfig+0xbe>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a1a      	ldr	r2, [pc, #104]	; (800776c <TIM_OC1_SetConfig+0x114>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d007      	beq.n	8007716 <TIM_OC1_SetConfig+0xbe>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4a19      	ldr	r2, [pc, #100]	; (8007770 <TIM_OC1_SetConfig+0x118>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d003      	beq.n	8007716 <TIM_OC1_SetConfig+0xbe>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a18      	ldr	r2, [pc, #96]	; (8007774 <TIM_OC1_SetConfig+0x11c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d111      	bne.n	800773a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800771c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	4313      	orrs	r3, r2
 800772e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	685a      	ldr	r2, [r3, #4]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	621a      	str	r2, [r3, #32]
}
 8007754:	bf00      	nop
 8007756:	371c      	adds	r7, #28
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	fffeff8f 	.word	0xfffeff8f
 8007764:	40010000 	.word	0x40010000
 8007768:	40010400 	.word	0x40010400
 800776c:	40014000 	.word	0x40014000
 8007770:	40014400 	.word	0x40014400
 8007774:	40014800 	.word	0x40014800

08007778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a1b      	ldr	r3, [r3, #32]
 8007786:	f023 0210 	bic.w	r2, r3, #16
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4b34      	ldr	r3, [pc, #208]	; (8007874 <TIM_OC2_SetConfig+0xfc>)
 80077a4:	4013      	ands	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f023 0320 	bic.w	r3, r3, #32
 80077c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a29      	ldr	r2, [pc, #164]	; (8007878 <TIM_OC2_SetConfig+0x100>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d003      	beq.n	80077e0 <TIM_OC2_SetConfig+0x68>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a28      	ldr	r2, [pc, #160]	; (800787c <TIM_OC2_SetConfig+0x104>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d10d      	bne.n	80077fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a1e      	ldr	r2, [pc, #120]	; (8007878 <TIM_OC2_SetConfig+0x100>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00f      	beq.n	8007824 <TIM_OC2_SetConfig+0xac>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a1d      	ldr	r2, [pc, #116]	; (800787c <TIM_OC2_SetConfig+0x104>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00b      	beq.n	8007824 <TIM_OC2_SetConfig+0xac>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a1c      	ldr	r2, [pc, #112]	; (8007880 <TIM_OC2_SetConfig+0x108>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d007      	beq.n	8007824 <TIM_OC2_SetConfig+0xac>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a1b      	ldr	r2, [pc, #108]	; (8007884 <TIM_OC2_SetConfig+0x10c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d003      	beq.n	8007824 <TIM_OC2_SetConfig+0xac>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a1a      	ldr	r2, [pc, #104]	; (8007888 <TIM_OC2_SetConfig+0x110>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d113      	bne.n	800784c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800782a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007832:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4313      	orrs	r3, r2
 800783e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	697a      	ldr	r2, [r7, #20]
 8007864:	621a      	str	r2, [r3, #32]
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	feff8fff 	.word	0xfeff8fff
 8007878:	40010000 	.word	0x40010000
 800787c:	40010400 	.word	0x40010400
 8007880:	40014000 	.word	0x40014000
 8007884:	40014400 	.word	0x40014400
 8007888:	40014800 	.word	0x40014800

0800788c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4b33      	ldr	r3, [pc, #204]	; (8007984 <TIM_OC3_SetConfig+0xf8>)
 80078b8:	4013      	ands	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 0303 	bic.w	r3, r3, #3
 80078c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	021b      	lsls	r3, r3, #8
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	4313      	orrs	r3, r2
 80078e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a28      	ldr	r2, [pc, #160]	; (8007988 <TIM_OC3_SetConfig+0xfc>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d003      	beq.n	80078f2 <TIM_OC3_SetConfig+0x66>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a27      	ldr	r2, [pc, #156]	; (800798c <TIM_OC3_SetConfig+0x100>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d10d      	bne.n	800790e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	021b      	lsls	r3, r3, #8
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800790c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a1d      	ldr	r2, [pc, #116]	; (8007988 <TIM_OC3_SetConfig+0xfc>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00f      	beq.n	8007936 <TIM_OC3_SetConfig+0xaa>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a1c      	ldr	r2, [pc, #112]	; (800798c <TIM_OC3_SetConfig+0x100>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d00b      	beq.n	8007936 <TIM_OC3_SetConfig+0xaa>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <TIM_OC3_SetConfig+0x104>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d007      	beq.n	8007936 <TIM_OC3_SetConfig+0xaa>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a1a      	ldr	r2, [pc, #104]	; (8007994 <TIM_OC3_SetConfig+0x108>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d003      	beq.n	8007936 <TIM_OC3_SetConfig+0xaa>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a19      	ldr	r2, [pc, #100]	; (8007998 <TIM_OC3_SetConfig+0x10c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d113      	bne.n	800795e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800793c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	011b      	lsls	r3, r3, #4
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	4313      	orrs	r3, r2
 8007950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	4313      	orrs	r3, r2
 800795c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	621a      	str	r2, [r3, #32]
}
 8007978:	bf00      	nop
 800797a:	371c      	adds	r7, #28
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	fffeff8f 	.word	0xfffeff8f
 8007988:	40010000 	.word	0x40010000
 800798c:	40010400 	.word	0x40010400
 8007990:	40014000 	.word	0x40014000
 8007994:	40014400 	.word	0x40014400
 8007998:	40014800 	.word	0x40014800

0800799c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800799c:	b480      	push	{r7}
 800799e:	b087      	sub	sp, #28
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <TIM_OC4_SetConfig+0xbc>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	031b      	lsls	r3, r3, #12
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a19      	ldr	r2, [pc, #100]	; (8007a5c <TIM_OC4_SetConfig+0xc0>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d00f      	beq.n	8007a1c <TIM_OC4_SetConfig+0x80>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a18      	ldr	r2, [pc, #96]	; (8007a60 <TIM_OC4_SetConfig+0xc4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d00b      	beq.n	8007a1c <TIM_OC4_SetConfig+0x80>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <TIM_OC4_SetConfig+0xc8>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d007      	beq.n	8007a1c <TIM_OC4_SetConfig+0x80>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a16      	ldr	r2, [pc, #88]	; (8007a68 <TIM_OC4_SetConfig+0xcc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d003      	beq.n	8007a1c <TIM_OC4_SetConfig+0x80>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	4a15      	ldr	r2, [pc, #84]	; (8007a6c <TIM_OC4_SetConfig+0xd0>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d109      	bne.n	8007a30 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	019b      	lsls	r3, r3, #6
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	621a      	str	r2, [r3, #32]
}
 8007a4a:	bf00      	nop
 8007a4c:	371c      	adds	r7, #28
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	feff8fff 	.word	0xfeff8fff
 8007a5c:	40010000 	.word	0x40010000
 8007a60:	40010400 	.word	0x40010400
 8007a64:	40014000 	.word	0x40014000
 8007a68:	40014400 	.word	0x40014400
 8007a6c:	40014800 	.word	0x40014800

08007a70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4b21      	ldr	r3, [pc, #132]	; (8007b20 <TIM_OC5_SetConfig+0xb0>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ab0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	041b      	lsls	r3, r3, #16
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a18      	ldr	r2, [pc, #96]	; (8007b24 <TIM_OC5_SetConfig+0xb4>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00f      	beq.n	8007ae6 <TIM_OC5_SetConfig+0x76>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a17      	ldr	r2, [pc, #92]	; (8007b28 <TIM_OC5_SetConfig+0xb8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d00b      	beq.n	8007ae6 <TIM_OC5_SetConfig+0x76>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a16      	ldr	r2, [pc, #88]	; (8007b2c <TIM_OC5_SetConfig+0xbc>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d007      	beq.n	8007ae6 <TIM_OC5_SetConfig+0x76>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a15      	ldr	r2, [pc, #84]	; (8007b30 <TIM_OC5_SetConfig+0xc0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d003      	beq.n	8007ae6 <TIM_OC5_SetConfig+0x76>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a14      	ldr	r2, [pc, #80]	; (8007b34 <TIM_OC5_SetConfig+0xc4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d109      	bne.n	8007afa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	021b      	lsls	r3, r3, #8
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	697a      	ldr	r2, [r7, #20]
 8007afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68fa      	ldr	r2, [r7, #12]
 8007b04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685a      	ldr	r2, [r3, #4]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	621a      	str	r2, [r3, #32]
}
 8007b14:	bf00      	nop
 8007b16:	371c      	adds	r7, #28
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	fffeff8f 	.word	0xfffeff8f
 8007b24:	40010000 	.word	0x40010000
 8007b28:	40010400 	.word	0x40010400
 8007b2c:	40014000 	.word	0x40014000
 8007b30:	40014400 	.word	0x40014400
 8007b34:	40014800 	.word	0x40014800

08007b38 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	4b22      	ldr	r3, [pc, #136]	; (8007bec <TIM_OC6_SetConfig+0xb4>)
 8007b64:	4013      	ands	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	021b      	lsls	r3, r3, #8
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	051b      	lsls	r3, r3, #20
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a19      	ldr	r2, [pc, #100]	; (8007bf0 <TIM_OC6_SetConfig+0xb8>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d00f      	beq.n	8007bb0 <TIM_OC6_SetConfig+0x78>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a18      	ldr	r2, [pc, #96]	; (8007bf4 <TIM_OC6_SetConfig+0xbc>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d00b      	beq.n	8007bb0 <TIM_OC6_SetConfig+0x78>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a17      	ldr	r2, [pc, #92]	; (8007bf8 <TIM_OC6_SetConfig+0xc0>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d007      	beq.n	8007bb0 <TIM_OC6_SetConfig+0x78>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a16      	ldr	r2, [pc, #88]	; (8007bfc <TIM_OC6_SetConfig+0xc4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d003      	beq.n	8007bb0 <TIM_OC6_SetConfig+0x78>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	4a15      	ldr	r2, [pc, #84]	; (8007c00 <TIM_OC6_SetConfig+0xc8>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d109      	bne.n	8007bc4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	029b      	lsls	r3, r3, #10
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	693a      	ldr	r2, [r7, #16]
 8007bdc:	621a      	str	r2, [r3, #32]
}
 8007bde:	bf00      	nop
 8007be0:	371c      	adds	r7, #28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop
 8007bec:	feff8fff 	.word	0xfeff8fff
 8007bf0:	40010000 	.word	0x40010000
 8007bf4:	40010400 	.word	0x40010400
 8007bf8:	40014000 	.word	0x40014000
 8007bfc:	40014400 	.word	0x40014400
 8007c00:	40014800 	.word	0x40014800

08007c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d101      	bne.n	8007c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c18:	2302      	movs	r3, #2
 8007c1a:	e06d      	b.n	8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2202      	movs	r2, #2
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a30      	ldr	r2, [pc, #192]	; (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d004      	beq.n	8007c50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a2f      	ldr	r2, [pc, #188]	; (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d108      	bne.n	8007c62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a20      	ldr	r2, [pc, #128]	; (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d022      	beq.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8e:	d01d      	beq.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a1d      	ldr	r2, [pc, #116]	; (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d018      	beq.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a1c      	ldr	r2, [pc, #112]	; (8007d10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d013      	beq.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a1a      	ldr	r2, [pc, #104]	; (8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00e      	beq.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d009      	beq.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a16      	ldr	r2, [pc, #88]	; (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d004      	beq.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a15      	ldr	r2, [pc, #84]	; (8007d1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d10c      	bne.n	8007ce6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	40010000 	.word	0x40010000
 8007d08:	40010400 	.word	0x40010400
 8007d0c:	40000400 	.word	0x40000400
 8007d10:	40000800 	.word	0x40000800
 8007d14:	40000c00 	.word	0x40000c00
 8007d18:	40001800 	.word	0x40001800
 8007d1c:	40014000 	.word	0x40014000

08007d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d101      	bne.n	8007d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e042      	b.n	8007df4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7f9 fdbd 	bl	8001900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2224      	movs	r2, #36	; 0x24
 8007d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0201 	bic.w	r2, r2, #1
 8007d9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f82c 	bl	8007dfc <UART_SetConfig>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d101      	bne.n	8007dae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e022      	b.n	8007df4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d002      	beq.n	8007dbc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fd88 	bl	80088cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	689a      	ldr	r2, [r3, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0201 	orr.w	r2, r2, #1
 8007dea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fe0f 	bl	8008a10 <UART_CheckIdleState>
 8007df2:	4603      	mov	r3, r0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e00:	b092      	sub	sp, #72	; 0x48
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	691b      	ldr	r3, [r3, #16]
 8007e14:	431a      	orrs	r2, r3
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	431a      	orrs	r2, r3
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	4313      	orrs	r3, r2
 8007e22:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	4bbe      	ldr	r3, [pc, #760]	; (8008124 <UART_SetConfig+0x328>)
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e34:	430b      	orrs	r3, r1
 8007e36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	68da      	ldr	r2, [r3, #12]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4ab3      	ldr	r2, [pc, #716]	; (8008128 <UART_SetConfig+0x32c>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d004      	beq.n	8007e68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e64:	4313      	orrs	r3, r2
 8007e66:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689a      	ldr	r2, [r3, #8]
 8007e6e:	4baf      	ldr	r3, [pc, #700]	; (800812c <UART_SetConfig+0x330>)
 8007e70:	4013      	ands	r3, r2
 8007e72:	697a      	ldr	r2, [r7, #20]
 8007e74:	6812      	ldr	r2, [r2, #0]
 8007e76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007e78:	430b      	orrs	r3, r1
 8007e7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e82:	f023 010f 	bic.w	r1, r3, #15
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4aa6      	ldr	r2, [pc, #664]	; (8008130 <UART_SetConfig+0x334>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d177      	bne.n	8007f8c <UART_SetConfig+0x190>
 8007e9c:	4ba5      	ldr	r3, [pc, #660]	; (8008134 <UART_SetConfig+0x338>)
 8007e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ea4:	2b28      	cmp	r3, #40	; 0x28
 8007ea6:	d86d      	bhi.n	8007f84 <UART_SetConfig+0x188>
 8007ea8:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <UART_SetConfig+0xb4>)
 8007eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eae:	bf00      	nop
 8007eb0:	08007f55 	.word	0x08007f55
 8007eb4:	08007f85 	.word	0x08007f85
 8007eb8:	08007f85 	.word	0x08007f85
 8007ebc:	08007f85 	.word	0x08007f85
 8007ec0:	08007f85 	.word	0x08007f85
 8007ec4:	08007f85 	.word	0x08007f85
 8007ec8:	08007f85 	.word	0x08007f85
 8007ecc:	08007f85 	.word	0x08007f85
 8007ed0:	08007f5d 	.word	0x08007f5d
 8007ed4:	08007f85 	.word	0x08007f85
 8007ed8:	08007f85 	.word	0x08007f85
 8007edc:	08007f85 	.word	0x08007f85
 8007ee0:	08007f85 	.word	0x08007f85
 8007ee4:	08007f85 	.word	0x08007f85
 8007ee8:	08007f85 	.word	0x08007f85
 8007eec:	08007f85 	.word	0x08007f85
 8007ef0:	08007f65 	.word	0x08007f65
 8007ef4:	08007f85 	.word	0x08007f85
 8007ef8:	08007f85 	.word	0x08007f85
 8007efc:	08007f85 	.word	0x08007f85
 8007f00:	08007f85 	.word	0x08007f85
 8007f04:	08007f85 	.word	0x08007f85
 8007f08:	08007f85 	.word	0x08007f85
 8007f0c:	08007f85 	.word	0x08007f85
 8007f10:	08007f6d 	.word	0x08007f6d
 8007f14:	08007f85 	.word	0x08007f85
 8007f18:	08007f85 	.word	0x08007f85
 8007f1c:	08007f85 	.word	0x08007f85
 8007f20:	08007f85 	.word	0x08007f85
 8007f24:	08007f85 	.word	0x08007f85
 8007f28:	08007f85 	.word	0x08007f85
 8007f2c:	08007f85 	.word	0x08007f85
 8007f30:	08007f75 	.word	0x08007f75
 8007f34:	08007f85 	.word	0x08007f85
 8007f38:	08007f85 	.word	0x08007f85
 8007f3c:	08007f85 	.word	0x08007f85
 8007f40:	08007f85 	.word	0x08007f85
 8007f44:	08007f85 	.word	0x08007f85
 8007f48:	08007f85 	.word	0x08007f85
 8007f4c:	08007f85 	.word	0x08007f85
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	2301      	movs	r3, #1
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f5a:	e222      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f62:	e21e      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007f64:	2308      	movs	r3, #8
 8007f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f6a:	e21a      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007f6c:	2310      	movs	r3, #16
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f72:	e216      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007f74:	2320      	movs	r3, #32
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f7a:	e212      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007f7c:	2340      	movs	r3, #64	; 0x40
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f82:	e20e      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007f84:	2380      	movs	r3, #128	; 0x80
 8007f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8a:	e20a      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a69      	ldr	r2, [pc, #420]	; (8008138 <UART_SetConfig+0x33c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d130      	bne.n	8007ff8 <UART_SetConfig+0x1fc>
 8007f96:	4b67      	ldr	r3, [pc, #412]	; (8008134 <UART_SetConfig+0x338>)
 8007f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	2b05      	cmp	r3, #5
 8007fa0:	d826      	bhi.n	8007ff0 <UART_SetConfig+0x1f4>
 8007fa2:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <UART_SetConfig+0x1ac>)
 8007fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa8:	08007fc1 	.word	0x08007fc1
 8007fac:	08007fc9 	.word	0x08007fc9
 8007fb0:	08007fd1 	.word	0x08007fd1
 8007fb4:	08007fd9 	.word	0x08007fd9
 8007fb8:	08007fe1 	.word	0x08007fe1
 8007fbc:	08007fe9 	.word	0x08007fe9
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fc6:	e1ec      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007fc8:	2304      	movs	r3, #4
 8007fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fce:	e1e8      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007fd0:	2308      	movs	r3, #8
 8007fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fd6:	e1e4      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007fd8:	2310      	movs	r3, #16
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fde:	e1e0      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fe6:	e1dc      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007fe8:	2340      	movs	r3, #64	; 0x40
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fee:	e1d8      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007ff0:	2380      	movs	r3, #128	; 0x80
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff6:	e1d4      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a4f      	ldr	r2, [pc, #316]	; (800813c <UART_SetConfig+0x340>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d130      	bne.n	8008064 <UART_SetConfig+0x268>
 8008002:	4b4c      	ldr	r3, [pc, #304]	; (8008134 <UART_SetConfig+0x338>)
 8008004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	2b05      	cmp	r3, #5
 800800c:	d826      	bhi.n	800805c <UART_SetConfig+0x260>
 800800e:	a201      	add	r2, pc, #4	; (adr r2, 8008014 <UART_SetConfig+0x218>)
 8008010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008014:	0800802d 	.word	0x0800802d
 8008018:	08008035 	.word	0x08008035
 800801c:	0800803d 	.word	0x0800803d
 8008020:	08008045 	.word	0x08008045
 8008024:	0800804d 	.word	0x0800804d
 8008028:	08008055 	.word	0x08008055
 800802c:	2300      	movs	r3, #0
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008032:	e1b6      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008034:	2304      	movs	r3, #4
 8008036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800803a:	e1b2      	b.n	80083a2 <UART_SetConfig+0x5a6>
 800803c:	2308      	movs	r3, #8
 800803e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008042:	e1ae      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008044:	2310      	movs	r3, #16
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800804a:	e1aa      	b.n	80083a2 <UART_SetConfig+0x5a6>
 800804c:	2320      	movs	r3, #32
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008052:	e1a6      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008054:	2340      	movs	r3, #64	; 0x40
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805a:	e1a2      	b.n	80083a2 <UART_SetConfig+0x5a6>
 800805c:	2380      	movs	r3, #128	; 0x80
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008062:	e19e      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a35      	ldr	r2, [pc, #212]	; (8008140 <UART_SetConfig+0x344>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d130      	bne.n	80080d0 <UART_SetConfig+0x2d4>
 800806e:	4b31      	ldr	r3, [pc, #196]	; (8008134 <UART_SetConfig+0x338>)
 8008070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b05      	cmp	r3, #5
 8008078:	d826      	bhi.n	80080c8 <UART_SetConfig+0x2cc>
 800807a:	a201      	add	r2, pc, #4	; (adr r2, 8008080 <UART_SetConfig+0x284>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	08008099 	.word	0x08008099
 8008084:	080080a1 	.word	0x080080a1
 8008088:	080080a9 	.word	0x080080a9
 800808c:	080080b1 	.word	0x080080b1
 8008090:	080080b9 	.word	0x080080b9
 8008094:	080080c1 	.word	0x080080c1
 8008098:	2300      	movs	r3, #0
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800809e:	e180      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80080a0:	2304      	movs	r3, #4
 80080a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080a6:	e17c      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80080a8:	2308      	movs	r3, #8
 80080aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ae:	e178      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80080b0:	2310      	movs	r3, #16
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080b6:	e174      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80080b8:	2320      	movs	r3, #32
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080be:	e170      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80080c0:	2340      	movs	r3, #64	; 0x40
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c6:	e16c      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80080c8:	2380      	movs	r3, #128	; 0x80
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ce:	e168      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a1b      	ldr	r2, [pc, #108]	; (8008144 <UART_SetConfig+0x348>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d142      	bne.n	8008160 <UART_SetConfig+0x364>
 80080da:	4b16      	ldr	r3, [pc, #88]	; (8008134 <UART_SetConfig+0x338>)
 80080dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080de:	f003 0307 	and.w	r3, r3, #7
 80080e2:	2b05      	cmp	r3, #5
 80080e4:	d838      	bhi.n	8008158 <UART_SetConfig+0x35c>
 80080e6:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <UART_SetConfig+0x2f0>)
 80080e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ec:	08008105 	.word	0x08008105
 80080f0:	0800810d 	.word	0x0800810d
 80080f4:	08008115 	.word	0x08008115
 80080f8:	0800811d 	.word	0x0800811d
 80080fc:	08008149 	.word	0x08008149
 8008100:	08008151 	.word	0x08008151
 8008104:	2300      	movs	r3, #0
 8008106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800810a:	e14a      	b.n	80083a2 <UART_SetConfig+0x5a6>
 800810c:	2304      	movs	r3, #4
 800810e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008112:	e146      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008114:	2308      	movs	r3, #8
 8008116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800811a:	e142      	b.n	80083a2 <UART_SetConfig+0x5a6>
 800811c:	2310      	movs	r3, #16
 800811e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008122:	e13e      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008124:	cfff69f3 	.word	0xcfff69f3
 8008128:	58000c00 	.word	0x58000c00
 800812c:	11fff4ff 	.word	0x11fff4ff
 8008130:	40011000 	.word	0x40011000
 8008134:	58024400 	.word	0x58024400
 8008138:	40004400 	.word	0x40004400
 800813c:	40004800 	.word	0x40004800
 8008140:	40004c00 	.word	0x40004c00
 8008144:	40005000 	.word	0x40005000
 8008148:	2320      	movs	r3, #32
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814e:	e128      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008150:	2340      	movs	r3, #64	; 0x40
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008156:	e124      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008158:	2380      	movs	r3, #128	; 0x80
 800815a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815e:	e120      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4acb      	ldr	r2, [pc, #812]	; (8008494 <UART_SetConfig+0x698>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d176      	bne.n	8008258 <UART_SetConfig+0x45c>
 800816a:	4bcb      	ldr	r3, [pc, #812]	; (8008498 <UART_SetConfig+0x69c>)
 800816c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008172:	2b28      	cmp	r3, #40	; 0x28
 8008174:	d86c      	bhi.n	8008250 <UART_SetConfig+0x454>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <UART_SetConfig+0x380>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	08008221 	.word	0x08008221
 8008180:	08008251 	.word	0x08008251
 8008184:	08008251 	.word	0x08008251
 8008188:	08008251 	.word	0x08008251
 800818c:	08008251 	.word	0x08008251
 8008190:	08008251 	.word	0x08008251
 8008194:	08008251 	.word	0x08008251
 8008198:	08008251 	.word	0x08008251
 800819c:	08008229 	.word	0x08008229
 80081a0:	08008251 	.word	0x08008251
 80081a4:	08008251 	.word	0x08008251
 80081a8:	08008251 	.word	0x08008251
 80081ac:	08008251 	.word	0x08008251
 80081b0:	08008251 	.word	0x08008251
 80081b4:	08008251 	.word	0x08008251
 80081b8:	08008251 	.word	0x08008251
 80081bc:	08008231 	.word	0x08008231
 80081c0:	08008251 	.word	0x08008251
 80081c4:	08008251 	.word	0x08008251
 80081c8:	08008251 	.word	0x08008251
 80081cc:	08008251 	.word	0x08008251
 80081d0:	08008251 	.word	0x08008251
 80081d4:	08008251 	.word	0x08008251
 80081d8:	08008251 	.word	0x08008251
 80081dc:	08008239 	.word	0x08008239
 80081e0:	08008251 	.word	0x08008251
 80081e4:	08008251 	.word	0x08008251
 80081e8:	08008251 	.word	0x08008251
 80081ec:	08008251 	.word	0x08008251
 80081f0:	08008251 	.word	0x08008251
 80081f4:	08008251 	.word	0x08008251
 80081f8:	08008251 	.word	0x08008251
 80081fc:	08008241 	.word	0x08008241
 8008200:	08008251 	.word	0x08008251
 8008204:	08008251 	.word	0x08008251
 8008208:	08008251 	.word	0x08008251
 800820c:	08008251 	.word	0x08008251
 8008210:	08008251 	.word	0x08008251
 8008214:	08008251 	.word	0x08008251
 8008218:	08008251 	.word	0x08008251
 800821c:	08008249 	.word	0x08008249
 8008220:	2301      	movs	r3, #1
 8008222:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008226:	e0bc      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008228:	2304      	movs	r3, #4
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800822e:	e0b8      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008230:	2308      	movs	r3, #8
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008236:	e0b4      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008238:	2310      	movs	r3, #16
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800823e:	e0b0      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008240:	2320      	movs	r3, #32
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008246:	e0ac      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008248:	2340      	movs	r3, #64	; 0x40
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800824e:	e0a8      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008250:	2380      	movs	r3, #128	; 0x80
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008256:	e0a4      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a8f      	ldr	r2, [pc, #572]	; (800849c <UART_SetConfig+0x6a0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d130      	bne.n	80082c4 <UART_SetConfig+0x4c8>
 8008262:	4b8d      	ldr	r3, [pc, #564]	; (8008498 <UART_SetConfig+0x69c>)
 8008264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	2b05      	cmp	r3, #5
 800826c:	d826      	bhi.n	80082bc <UART_SetConfig+0x4c0>
 800826e:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <UART_SetConfig+0x478>)
 8008270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008274:	0800828d 	.word	0x0800828d
 8008278:	08008295 	.word	0x08008295
 800827c:	0800829d 	.word	0x0800829d
 8008280:	080082a5 	.word	0x080082a5
 8008284:	080082ad 	.word	0x080082ad
 8008288:	080082b5 	.word	0x080082b5
 800828c:	2300      	movs	r3, #0
 800828e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008292:	e086      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008294:	2304      	movs	r3, #4
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800829a:	e082      	b.n	80083a2 <UART_SetConfig+0x5a6>
 800829c:	2308      	movs	r3, #8
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082a2:	e07e      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80082a4:	2310      	movs	r3, #16
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082aa:	e07a      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80082ac:	2320      	movs	r3, #32
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082b2:	e076      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80082b4:	2340      	movs	r3, #64	; 0x40
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ba:	e072      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80082bc:	2380      	movs	r3, #128	; 0x80
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c2:	e06e      	b.n	80083a2 <UART_SetConfig+0x5a6>
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a75      	ldr	r2, [pc, #468]	; (80084a0 <UART_SetConfig+0x6a4>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d130      	bne.n	8008330 <UART_SetConfig+0x534>
 80082ce:	4b72      	ldr	r3, [pc, #456]	; (8008498 <UART_SetConfig+0x69c>)
 80082d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d2:	f003 0307 	and.w	r3, r3, #7
 80082d6:	2b05      	cmp	r3, #5
 80082d8:	d826      	bhi.n	8008328 <UART_SetConfig+0x52c>
 80082da:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <UART_SetConfig+0x4e4>)
 80082dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e0:	080082f9 	.word	0x080082f9
 80082e4:	08008301 	.word	0x08008301
 80082e8:	08008309 	.word	0x08008309
 80082ec:	08008311 	.word	0x08008311
 80082f0:	08008319 	.word	0x08008319
 80082f4:	08008321 	.word	0x08008321
 80082f8:	2300      	movs	r3, #0
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082fe:	e050      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008300:	2304      	movs	r3, #4
 8008302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008306:	e04c      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008308:	2308      	movs	r3, #8
 800830a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830e:	e048      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008310:	2310      	movs	r3, #16
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008316:	e044      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008318:	2320      	movs	r3, #32
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831e:	e040      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008320:	2340      	movs	r3, #64	; 0x40
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008326:	e03c      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008328:	2380      	movs	r3, #128	; 0x80
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832e:	e038      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a5b      	ldr	r2, [pc, #364]	; (80084a4 <UART_SetConfig+0x6a8>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d130      	bne.n	800839c <UART_SetConfig+0x5a0>
 800833a:	4b57      	ldr	r3, [pc, #348]	; (8008498 <UART_SetConfig+0x69c>)
 800833c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800833e:	f003 0307 	and.w	r3, r3, #7
 8008342:	2b05      	cmp	r3, #5
 8008344:	d826      	bhi.n	8008394 <UART_SetConfig+0x598>
 8008346:	a201      	add	r2, pc, #4	; (adr r2, 800834c <UART_SetConfig+0x550>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	08008365 	.word	0x08008365
 8008350:	0800836d 	.word	0x0800836d
 8008354:	08008375 	.word	0x08008375
 8008358:	0800837d 	.word	0x0800837d
 800835c:	08008385 	.word	0x08008385
 8008360:	0800838d 	.word	0x0800838d
 8008364:	2302      	movs	r3, #2
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800836a:	e01a      	b.n	80083a2 <UART_SetConfig+0x5a6>
 800836c:	2304      	movs	r3, #4
 800836e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008372:	e016      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008374:	2308      	movs	r3, #8
 8008376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800837a:	e012      	b.n	80083a2 <UART_SetConfig+0x5a6>
 800837c:	2310      	movs	r3, #16
 800837e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008382:	e00e      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008384:	2320      	movs	r3, #32
 8008386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800838a:	e00a      	b.n	80083a2 <UART_SetConfig+0x5a6>
 800838c:	2340      	movs	r3, #64	; 0x40
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008392:	e006      	b.n	80083a2 <UART_SetConfig+0x5a6>
 8008394:	2380      	movs	r3, #128	; 0x80
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839a:	e002      	b.n	80083a2 <UART_SetConfig+0x5a6>
 800839c:	2380      	movs	r3, #128	; 0x80
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a3f      	ldr	r2, [pc, #252]	; (80084a4 <UART_SetConfig+0x6a8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	f040 80f8 	bne.w	800859e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	dc46      	bgt.n	8008444 <UART_SetConfig+0x648>
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	f2c0 8082 	blt.w	80084c0 <UART_SetConfig+0x6c4>
 80083bc:	3b02      	subs	r3, #2
 80083be:	2b1e      	cmp	r3, #30
 80083c0:	d87e      	bhi.n	80084c0 <UART_SetConfig+0x6c4>
 80083c2:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <UART_SetConfig+0x5cc>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	0800844b 	.word	0x0800844b
 80083cc:	080084c1 	.word	0x080084c1
 80083d0:	08008453 	.word	0x08008453
 80083d4:	080084c1 	.word	0x080084c1
 80083d8:	080084c1 	.word	0x080084c1
 80083dc:	080084c1 	.word	0x080084c1
 80083e0:	08008463 	.word	0x08008463
 80083e4:	080084c1 	.word	0x080084c1
 80083e8:	080084c1 	.word	0x080084c1
 80083ec:	080084c1 	.word	0x080084c1
 80083f0:	080084c1 	.word	0x080084c1
 80083f4:	080084c1 	.word	0x080084c1
 80083f8:	080084c1 	.word	0x080084c1
 80083fc:	080084c1 	.word	0x080084c1
 8008400:	08008473 	.word	0x08008473
 8008404:	080084c1 	.word	0x080084c1
 8008408:	080084c1 	.word	0x080084c1
 800840c:	080084c1 	.word	0x080084c1
 8008410:	080084c1 	.word	0x080084c1
 8008414:	080084c1 	.word	0x080084c1
 8008418:	080084c1 	.word	0x080084c1
 800841c:	080084c1 	.word	0x080084c1
 8008420:	080084c1 	.word	0x080084c1
 8008424:	080084c1 	.word	0x080084c1
 8008428:	080084c1 	.word	0x080084c1
 800842c:	080084c1 	.word	0x080084c1
 8008430:	080084c1 	.word	0x080084c1
 8008434:	080084c1 	.word	0x080084c1
 8008438:	080084c1 	.word	0x080084c1
 800843c:	080084c1 	.word	0x080084c1
 8008440:	080084b3 	.word	0x080084b3
 8008444:	2b40      	cmp	r3, #64	; 0x40
 8008446:	d037      	beq.n	80084b8 <UART_SetConfig+0x6bc>
 8008448:	e03a      	b.n	80084c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800844a:	f7fd fe4b 	bl	80060e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800844e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008450:	e03c      	b.n	80084cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008456:	4618      	mov	r0, r3
 8008458:	f7fd fe5a 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008460:	e034      	b.n	80084cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008462:	f107 0318 	add.w	r3, r7, #24
 8008466:	4618      	mov	r0, r3
 8008468:	f7fd ffa6 	bl	80063b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008470:	e02c      	b.n	80084cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008472:	4b09      	ldr	r3, [pc, #36]	; (8008498 <UART_SetConfig+0x69c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0320 	and.w	r3, r3, #32
 800847a:	2b00      	cmp	r3, #0
 800847c:	d016      	beq.n	80084ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800847e:	4b06      	ldr	r3, [pc, #24]	; (8008498 <UART_SetConfig+0x69c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	08db      	lsrs	r3, r3, #3
 8008484:	f003 0303 	and.w	r3, r3, #3
 8008488:	4a07      	ldr	r2, [pc, #28]	; (80084a8 <UART_SetConfig+0x6ac>)
 800848a:	fa22 f303 	lsr.w	r3, r2, r3
 800848e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008490:	e01c      	b.n	80084cc <UART_SetConfig+0x6d0>
 8008492:	bf00      	nop
 8008494:	40011400 	.word	0x40011400
 8008498:	58024400 	.word	0x58024400
 800849c:	40007800 	.word	0x40007800
 80084a0:	40007c00 	.word	0x40007c00
 80084a4:	58000c00 	.word	0x58000c00
 80084a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80084ac:	4b9d      	ldr	r3, [pc, #628]	; (8008724 <UART_SetConfig+0x928>)
 80084ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b0:	e00c      	b.n	80084cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084b2:	4b9d      	ldr	r3, [pc, #628]	; (8008728 <UART_SetConfig+0x92c>)
 80084b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084b6:	e009      	b.n	80084cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084be:	e005      	b.n	80084cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80084ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80084cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 81de 	beq.w	8008890 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	4a94      	ldr	r2, [pc, #592]	; (800872c <UART_SetConfig+0x930>)
 80084da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084de:	461a      	mov	r2, r3
 80084e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80084e6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	4613      	mov	r3, r2
 80084ee:	005b      	lsls	r3, r3, #1
 80084f0:	4413      	add	r3, r2
 80084f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d305      	bcc.n	8008504 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80084fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008500:	429a      	cmp	r2, r3
 8008502:	d903      	bls.n	800850c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800850a:	e1c1      	b.n	8008890 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800850c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850e:	2200      	movs	r2, #0
 8008510:	60bb      	str	r3, [r7, #8]
 8008512:	60fa      	str	r2, [r7, #12]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008518:	4a84      	ldr	r2, [pc, #528]	; (800872c <UART_SetConfig+0x930>)
 800851a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800851e:	b29b      	uxth	r3, r3
 8008520:	2200      	movs	r2, #0
 8008522:	603b      	str	r3, [r7, #0]
 8008524:	607a      	str	r2, [r7, #4]
 8008526:	e9d7 2300 	ldrd	r2, r3, [r7]
 800852a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800852e:	f7f7 fed7 	bl	80002e0 <__aeabi_uldivmod>
 8008532:	4602      	mov	r2, r0
 8008534:	460b      	mov	r3, r1
 8008536:	4610      	mov	r0, r2
 8008538:	4619      	mov	r1, r3
 800853a:	f04f 0200 	mov.w	r2, #0
 800853e:	f04f 0300 	mov.w	r3, #0
 8008542:	020b      	lsls	r3, r1, #8
 8008544:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008548:	0202      	lsls	r2, r0, #8
 800854a:	6979      	ldr	r1, [r7, #20]
 800854c:	6849      	ldr	r1, [r1, #4]
 800854e:	0849      	lsrs	r1, r1, #1
 8008550:	2000      	movs	r0, #0
 8008552:	460c      	mov	r4, r1
 8008554:	4605      	mov	r5, r0
 8008556:	eb12 0804 	adds.w	r8, r2, r4
 800855a:	eb43 0905 	adc.w	r9, r3, r5
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	469a      	mov	sl, r3
 8008566:	4693      	mov	fp, r2
 8008568:	4652      	mov	r2, sl
 800856a:	465b      	mov	r3, fp
 800856c:	4640      	mov	r0, r8
 800856e:	4649      	mov	r1, r9
 8008570:	f7f7 feb6 	bl	80002e0 <__aeabi_uldivmod>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4613      	mov	r3, r2
 800857a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008582:	d308      	bcc.n	8008596 <UART_SetConfig+0x79a>
 8008584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800858a:	d204      	bcs.n	8008596 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008592:	60da      	str	r2, [r3, #12]
 8008594:	e17c      	b.n	8008890 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800859c:	e178      	b.n	8008890 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085a6:	f040 80c5 	bne.w	8008734 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80085aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80085ae:	2b20      	cmp	r3, #32
 80085b0:	dc48      	bgt.n	8008644 <UART_SetConfig+0x848>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	db7b      	blt.n	80086ae <UART_SetConfig+0x8b2>
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	d879      	bhi.n	80086ae <UART_SetConfig+0x8b2>
 80085ba:	a201      	add	r2, pc, #4	; (adr r2, 80085c0 <UART_SetConfig+0x7c4>)
 80085bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c0:	0800864b 	.word	0x0800864b
 80085c4:	08008653 	.word	0x08008653
 80085c8:	080086af 	.word	0x080086af
 80085cc:	080086af 	.word	0x080086af
 80085d0:	0800865b 	.word	0x0800865b
 80085d4:	080086af 	.word	0x080086af
 80085d8:	080086af 	.word	0x080086af
 80085dc:	080086af 	.word	0x080086af
 80085e0:	0800866b 	.word	0x0800866b
 80085e4:	080086af 	.word	0x080086af
 80085e8:	080086af 	.word	0x080086af
 80085ec:	080086af 	.word	0x080086af
 80085f0:	080086af 	.word	0x080086af
 80085f4:	080086af 	.word	0x080086af
 80085f8:	080086af 	.word	0x080086af
 80085fc:	080086af 	.word	0x080086af
 8008600:	0800867b 	.word	0x0800867b
 8008604:	080086af 	.word	0x080086af
 8008608:	080086af 	.word	0x080086af
 800860c:	080086af 	.word	0x080086af
 8008610:	080086af 	.word	0x080086af
 8008614:	080086af 	.word	0x080086af
 8008618:	080086af 	.word	0x080086af
 800861c:	080086af 	.word	0x080086af
 8008620:	080086af 	.word	0x080086af
 8008624:	080086af 	.word	0x080086af
 8008628:	080086af 	.word	0x080086af
 800862c:	080086af 	.word	0x080086af
 8008630:	080086af 	.word	0x080086af
 8008634:	080086af 	.word	0x080086af
 8008638:	080086af 	.word	0x080086af
 800863c:	080086af 	.word	0x080086af
 8008640:	080086a1 	.word	0x080086a1
 8008644:	2b40      	cmp	r3, #64	; 0x40
 8008646:	d02e      	beq.n	80086a6 <UART_SetConfig+0x8aa>
 8008648:	e031      	b.n	80086ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800864a:	f7fc f8c5 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 800864e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008650:	e033      	b.n	80086ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008652:	f7fc f8d7 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 8008656:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008658:	e02f      	b.n	80086ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800865a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800865e:	4618      	mov	r0, r3
 8008660:	f7fd fd56 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008668:	e027      	b.n	80086ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800866a:	f107 0318 	add.w	r3, r7, #24
 800866e:	4618      	mov	r0, r3
 8008670:	f7fd fea2 	bl	80063b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008678:	e01f      	b.n	80086ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800867a:	4b2d      	ldr	r3, [pc, #180]	; (8008730 <UART_SetConfig+0x934>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b00      	cmp	r3, #0
 8008684:	d009      	beq.n	800869a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008686:	4b2a      	ldr	r3, [pc, #168]	; (8008730 <UART_SetConfig+0x934>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	08db      	lsrs	r3, r3, #3
 800868c:	f003 0303 	and.w	r3, r3, #3
 8008690:	4a24      	ldr	r2, [pc, #144]	; (8008724 <UART_SetConfig+0x928>)
 8008692:	fa22 f303 	lsr.w	r3, r2, r3
 8008696:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008698:	e00f      	b.n	80086ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800869a:	4b22      	ldr	r3, [pc, #136]	; (8008724 <UART_SetConfig+0x928>)
 800869c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800869e:	e00c      	b.n	80086ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086a0:	4b21      	ldr	r3, [pc, #132]	; (8008728 <UART_SetConfig+0x92c>)
 80086a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086a4:	e009      	b.n	80086ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80086ac:	e005      	b.n	80086ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80086b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 80e7 	beq.w	8008890 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c6:	4a19      	ldr	r2, [pc, #100]	; (800872c <UART_SetConfig+0x930>)
 80086c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086cc:	461a      	mov	r2, r3
 80086ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086d4:	005a      	lsls	r2, r3, #1
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	085b      	lsrs	r3, r3, #1
 80086dc:	441a      	add	r2, r3
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ea:	2b0f      	cmp	r3, #15
 80086ec:	d916      	bls.n	800871c <UART_SetConfig+0x920>
 80086ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f4:	d212      	bcs.n	800871c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	f023 030f 	bic.w	r3, r3, #15
 80086fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008702:	085b      	lsrs	r3, r3, #1
 8008704:	b29b      	uxth	r3, r3
 8008706:	f003 0307 	and.w	r3, r3, #7
 800870a:	b29a      	uxth	r2, r3
 800870c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800870e:	4313      	orrs	r3, r2
 8008710:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008718:	60da      	str	r2, [r3, #12]
 800871a:	e0b9      	b.n	8008890 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800871c:	2301      	movs	r3, #1
 800871e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008722:	e0b5      	b.n	8008890 <UART_SetConfig+0xa94>
 8008724:	03d09000 	.word	0x03d09000
 8008728:	003d0900 	.word	0x003d0900
 800872c:	0800ba48 	.word	0x0800ba48
 8008730:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008734:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008738:	2b20      	cmp	r3, #32
 800873a:	dc49      	bgt.n	80087d0 <UART_SetConfig+0x9d4>
 800873c:	2b00      	cmp	r3, #0
 800873e:	db7c      	blt.n	800883a <UART_SetConfig+0xa3e>
 8008740:	2b20      	cmp	r3, #32
 8008742:	d87a      	bhi.n	800883a <UART_SetConfig+0xa3e>
 8008744:	a201      	add	r2, pc, #4	; (adr r2, 800874c <UART_SetConfig+0x950>)
 8008746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874a:	bf00      	nop
 800874c:	080087d7 	.word	0x080087d7
 8008750:	080087df 	.word	0x080087df
 8008754:	0800883b 	.word	0x0800883b
 8008758:	0800883b 	.word	0x0800883b
 800875c:	080087e7 	.word	0x080087e7
 8008760:	0800883b 	.word	0x0800883b
 8008764:	0800883b 	.word	0x0800883b
 8008768:	0800883b 	.word	0x0800883b
 800876c:	080087f7 	.word	0x080087f7
 8008770:	0800883b 	.word	0x0800883b
 8008774:	0800883b 	.word	0x0800883b
 8008778:	0800883b 	.word	0x0800883b
 800877c:	0800883b 	.word	0x0800883b
 8008780:	0800883b 	.word	0x0800883b
 8008784:	0800883b 	.word	0x0800883b
 8008788:	0800883b 	.word	0x0800883b
 800878c:	08008807 	.word	0x08008807
 8008790:	0800883b 	.word	0x0800883b
 8008794:	0800883b 	.word	0x0800883b
 8008798:	0800883b 	.word	0x0800883b
 800879c:	0800883b 	.word	0x0800883b
 80087a0:	0800883b 	.word	0x0800883b
 80087a4:	0800883b 	.word	0x0800883b
 80087a8:	0800883b 	.word	0x0800883b
 80087ac:	0800883b 	.word	0x0800883b
 80087b0:	0800883b 	.word	0x0800883b
 80087b4:	0800883b 	.word	0x0800883b
 80087b8:	0800883b 	.word	0x0800883b
 80087bc:	0800883b 	.word	0x0800883b
 80087c0:	0800883b 	.word	0x0800883b
 80087c4:	0800883b 	.word	0x0800883b
 80087c8:	0800883b 	.word	0x0800883b
 80087cc:	0800882d 	.word	0x0800882d
 80087d0:	2b40      	cmp	r3, #64	; 0x40
 80087d2:	d02e      	beq.n	8008832 <UART_SetConfig+0xa36>
 80087d4:	e031      	b.n	800883a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087d6:	f7fb ffff 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 80087da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087dc:	e033      	b.n	8008846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087de:	f7fc f811 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 80087e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80087e4:	e02f      	b.n	8008846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fd fc90 	bl	8006110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087f4:	e027      	b.n	8008846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087f6:	f107 0318 	add.w	r3, r7, #24
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fd fddc 	bl	80063b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008804:	e01f      	b.n	8008846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008806:	4b2d      	ldr	r3, [pc, #180]	; (80088bc <UART_SetConfig+0xac0>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0320 	and.w	r3, r3, #32
 800880e:	2b00      	cmp	r3, #0
 8008810:	d009      	beq.n	8008826 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008812:	4b2a      	ldr	r3, [pc, #168]	; (80088bc <UART_SetConfig+0xac0>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	08db      	lsrs	r3, r3, #3
 8008818:	f003 0303 	and.w	r3, r3, #3
 800881c:	4a28      	ldr	r2, [pc, #160]	; (80088c0 <UART_SetConfig+0xac4>)
 800881e:	fa22 f303 	lsr.w	r3, r2, r3
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008824:	e00f      	b.n	8008846 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008826:	4b26      	ldr	r3, [pc, #152]	; (80088c0 <UART_SetConfig+0xac4>)
 8008828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800882a:	e00c      	b.n	8008846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800882c:	4b25      	ldr	r3, [pc, #148]	; (80088c4 <UART_SetConfig+0xac8>)
 800882e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008830:	e009      	b.n	8008846 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008838:	e005      	b.n	8008846 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800883a:	2300      	movs	r3, #0
 800883c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008844:	bf00      	nop
    }

    if (pclk != 0U)
 8008846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008848:	2b00      	cmp	r3, #0
 800884a:	d021      	beq.n	8008890 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008850:	4a1d      	ldr	r2, [pc, #116]	; (80088c8 <UART_SetConfig+0xacc>)
 8008852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008856:	461a      	mov	r2, r3
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	fbb3 f2f2 	udiv	r2, r3, r2
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	441a      	add	r2, r3
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	fbb2 f3f3 	udiv	r3, r2, r3
 800886e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008872:	2b0f      	cmp	r3, #15
 8008874:	d909      	bls.n	800888a <UART_SetConfig+0xa8e>
 8008876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800887c:	d205      	bcs.n	800888a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800887e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008880:	b29a      	uxth	r2, r3
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	60da      	str	r2, [r3, #12]
 8008888:	e002      	b.n	8008890 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2201      	movs	r2, #1
 8008894:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2201      	movs	r2, #1
 800889c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2200      	movs	r2, #0
 80088a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2200      	movs	r2, #0
 80088aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80088ac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3748      	adds	r7, #72	; 0x48
 80088b4:	46bd      	mov	sp, r7
 80088b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088ba:	bf00      	nop
 80088bc:	58024400 	.word	0x58024400
 80088c0:	03d09000 	.word	0x03d09000
 80088c4:	003d0900 	.word	0x003d0900
 80088c8:	0800ba48 	.word	0x0800ba48

080088cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fa:	f003 0302 	and.w	r3, r3, #2
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00a      	beq.n	8008918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	f003 0304 	and.w	r3, r3, #4
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00a      	beq.n	800893a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	430a      	orrs	r2, r1
 8008938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	f003 0308 	and.w	r3, r3, #8
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008960:	f003 0310 	and.w	r3, r3, #16
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00a      	beq.n	800897e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008982:	f003 0320 	and.w	r3, r3, #32
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00a      	beq.n	80089a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	430a      	orrs	r2, r1
 800899e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01a      	beq.n	80089e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ca:	d10a      	bne.n	80089e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	605a      	str	r2, [r3, #4]
  }
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af02      	add	r7, sp, #8
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a20:	f7f9 fa82 	bl	8001f28 <HAL_GetTick>
 8008a24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0308 	and.w	r3, r3, #8
 8008a30:	2b08      	cmp	r3, #8
 8008a32:	d10e      	bne.n	8008a52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f82f 	bl	8008aa6 <UART_WaitOnFlagUntilTimeout>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e025      	b.n	8008a9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b04      	cmp	r3, #4
 8008a5e:	d10e      	bne.n	8008a7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f819 	bl	8008aa6 <UART_WaitOnFlagUntilTimeout>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e00f      	b.n	8008a9e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2220      	movs	r2, #32
 8008a82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2220      	movs	r2, #32
 8008a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b09c      	sub	sp, #112	; 0x70
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	60f8      	str	r0, [r7, #12]
 8008aae:	60b9      	str	r1, [r7, #8]
 8008ab0:	603b      	str	r3, [r7, #0]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ab6:	e0a9      	b.n	8008c0c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008abe:	f000 80a5 	beq.w	8008c0c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ac2:	f7f9 fa31 	bl	8001f28 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d302      	bcc.n	8008ad8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d140      	bne.n	8008b5a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ae0:	e853 3f00 	ldrex	r3, [r3]
 8008ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008aec:	667b      	str	r3, [r7, #100]	; 0x64
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008af8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008afc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008afe:	e841 2300 	strex	r3, r2, [r1]
 8008b02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1e6      	bne.n	8008ad8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	3308      	adds	r3, #8
 8008b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b14:	e853 3f00 	ldrex	r3, [r3]
 8008b18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1c:	f023 0301 	bic.w	r3, r3, #1
 8008b20:	663b      	str	r3, [r7, #96]	; 0x60
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3308      	adds	r3, #8
 8008b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b32:	e841 2300 	strex	r3, r2, [r1]
 8008b36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1e5      	bne.n	8008b0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2220      	movs	r2, #32
 8008b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	2220      	movs	r2, #32
 8008b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	e069      	b.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d051      	beq.n	8008c0c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b76:	d149      	bne.n	8008c0c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b80:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	e853 3f00 	ldrex	r3, [r3]
 8008b8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ba2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ba8:	e841 2300 	strex	r3, r2, [r1]
 8008bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d1e6      	bne.n	8008b82 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	3308      	adds	r3, #8
 8008bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbc:	697b      	ldr	r3, [r7, #20]
 8008bbe:	e853 3f00 	ldrex	r3, [r3]
 8008bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f023 0301 	bic.w	r3, r3, #1
 8008bca:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bd4:	623a      	str	r2, [r7, #32]
 8008bd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd8:	69f9      	ldr	r1, [r7, #28]
 8008bda:	6a3a      	ldr	r2, [r7, #32]
 8008bdc:	e841 2300 	strex	r3, r2, [r1]
 8008be0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d1e5      	bne.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2220      	movs	r2, #32
 8008bec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e010      	b.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	69da      	ldr	r2, [r3, #28]
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	4013      	ands	r3, r2
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	bf0c      	ite	eq
 8008c1c:	2301      	moveq	r3, #1
 8008c1e:	2300      	movne	r3, #0
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	461a      	mov	r2, r3
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	f43f af46 	beq.w	8008ab8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3770      	adds	r7, #112	; 0x70
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d101      	bne.n	8008c4c <HAL_UARTEx_DisableFifoMode+0x16>
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e027      	b.n	8008c9c <HAL_UARTEx_DisableFifoMode+0x66>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2224      	movs	r2, #36	; 0x24
 8008c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 0201 	bic.w	r2, r2, #1
 8008c72:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c7a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d101      	bne.n	8008cc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e02d      	b.n	8008d1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2224      	movs	r2, #36	; 0x24
 8008ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0201 	bic.w	r2, r2, #1
 8008ce6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f84f 	bl	8008da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d101      	bne.n	8008d3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e02d      	b.n	8008d98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2224      	movs	r2, #36	; 0x24
 8008d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f022 0201 	bic.w	r2, r2, #1
 8008d62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f811 	bl	8008da0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2220      	movs	r2, #32
 8008d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d96:	2300      	movs	r3, #0
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3710      	adds	r7, #16
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d108      	bne.n	8008dc2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008dc0:	e031      	b.n	8008e26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008dc2:	2310      	movs	r3, #16
 8008dc4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008dc6:	2310      	movs	r3, #16
 8008dc8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	0e5b      	lsrs	r3, r3, #25
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	f003 0307 	and.w	r3, r3, #7
 8008dd8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	0f5b      	lsrs	r3, r3, #29
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	f003 0307 	and.w	r3, r3, #7
 8008de8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	7b3a      	ldrb	r2, [r7, #12]
 8008dee:	4911      	ldr	r1, [pc, #68]	; (8008e34 <UARTEx_SetNbDataToProcess+0x94>)
 8008df0:	5c8a      	ldrb	r2, [r1, r2]
 8008df2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008df6:	7b3a      	ldrb	r2, [r7, #12]
 8008df8:	490f      	ldr	r1, [pc, #60]	; (8008e38 <UARTEx_SetNbDataToProcess+0x98>)
 8008dfa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dfc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	7b7a      	ldrb	r2, [r7, #13]
 8008e0c:	4909      	ldr	r1, [pc, #36]	; (8008e34 <UARTEx_SetNbDataToProcess+0x94>)
 8008e0e:	5c8a      	ldrb	r2, [r1, r2]
 8008e10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e14:	7b7a      	ldrb	r2, [r7, #13]
 8008e16:	4908      	ldr	r1, [pc, #32]	; (8008e38 <UARTEx_SetNbDataToProcess+0x98>)
 8008e18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e26:	bf00      	nop
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	0800ba60 	.word	0x0800ba60
 8008e38:	0800ba68 	.word	0x0800ba68

08008e3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	4603      	mov	r3, r0
 8008e44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e4e:	2b84      	cmp	r3, #132	; 0x84
 8008e50:	d005      	beq.n	8008e5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008e52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	4413      	add	r3, r2
 8008e5a:	3303      	adds	r3, #3
 8008e5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008e70:	f000 ffde 	bl	8009e30 <vTaskStartScheduler>
  
  return osOK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e7c:	b089      	sub	sp, #36	; 0x24
 8008e7e:	af04      	add	r7, sp, #16
 8008e80:	6078      	str	r0, [r7, #4]
 8008e82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d020      	beq.n	8008ece <osThreadCreate+0x54>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	699b      	ldr	r3, [r3, #24]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d01c      	beq.n	8008ece <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685c      	ldr	r4, [r3, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681d      	ldr	r5, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	691e      	ldr	r6, [r3, #16]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7ff ffc8 	bl	8008e3c <makeFreeRtosPriority>
 8008eac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008eb6:	9202      	str	r2, [sp, #8]
 8008eb8:	9301      	str	r3, [sp, #4]
 8008eba:	9100      	str	r1, [sp, #0]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	4632      	mov	r2, r6
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f000 fdd6 	bl	8009a74 <xTaskCreateStatic>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e01c      	b.n	8008f08 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	685c      	ldr	r4, [r3, #4]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008eda:	b29e      	uxth	r6, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7ff ffaa 	bl	8008e3c <makeFreeRtosPriority>
 8008ee8:	4602      	mov	r2, r0
 8008eea:	f107 030c 	add.w	r3, r7, #12
 8008eee:	9301      	str	r3, [sp, #4]
 8008ef0:	9200      	str	r2, [sp, #0]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	4632      	mov	r2, r6
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	4620      	mov	r0, r4
 8008efa:	f000 fe18 	bl	8009b2e <xTaskCreate>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d001      	beq.n	8008f08 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008f04:	2300      	movs	r3, #0
 8008f06:	e000      	b.n	8008f0a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008f08:	68fb      	ldr	r3, [r7, #12]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3714      	adds	r7, #20
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f12 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d001      	beq.n	8008f28 <osDelay+0x16>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	e000      	b.n	8008f2a <osDelay+0x18>
 8008f28:	2301      	movs	r3, #1
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 ff4c 	bl	8009dc8 <vTaskDelay>
  
  return osOK;
 8008f30:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f3a:	b480      	push	{r7}
 8008f3c:	b083      	sub	sp, #12
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f103 0208 	add.w	r2, r3, #8
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f52:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f103 0208 	add.w	r2, r3, #8
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f103 0208 	add.w	r2, r3, #8
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f6e:	bf00      	nop
 8008f70:	370c      	adds	r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b083      	sub	sp, #12
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2200      	movs	r2, #0
 8008f86:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	683a      	ldr	r2, [r7, #0]
 8008fbe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	601a      	str	r2, [r3, #0]
}
 8008fd0:	bf00      	nop
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff2:	d103      	bne.n	8008ffc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	e00c      	b.n	8009016 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	3308      	adds	r3, #8
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	e002      	b.n	800900a <vListInsert+0x2e>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	60fb      	str	r3, [r7, #12]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	429a      	cmp	r2, r3
 8009014:	d2f6      	bcs.n	8009004 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	601a      	str	r2, [r3, #0]
}
 8009042:	bf00      	nop
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr

0800904e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800904e:	b480      	push	{r7}
 8009050:	b085      	sub	sp, #20
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	6892      	ldr	r2, [r2, #8]
 8009064:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6852      	ldr	r2, [r2, #4]
 800906e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	429a      	cmp	r2, r3
 8009078:	d103      	bne.n	8009082 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	689a      	ldr	r2, [r3, #8]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	1e5a      	subs	r2, r3, #1
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
}
 8009096:	4618      	mov	r0, r3
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
	...

080090a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10a      	bne.n	80090ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090bc:	f383 8811 	msr	BASEPRI, r3
 80090c0:	f3bf 8f6f 	isb	sy
 80090c4:	f3bf 8f4f 	dsb	sy
 80090c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80090ca:	bf00      	nop
 80090cc:	e7fe      	b.n	80090cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80090ce:	f002 f869 	bl	800b1a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090da:	68f9      	ldr	r1, [r7, #12]
 80090dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090de:	fb01 f303 	mul.w	r3, r1, r3
 80090e2:	441a      	add	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681a      	ldr	r2, [r3, #0]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090fe:	3b01      	subs	r3, #1
 8009100:	68f9      	ldr	r1, [r7, #12]
 8009102:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009104:	fb01 f303 	mul.w	r3, r1, r3
 8009108:	441a      	add	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	22ff      	movs	r2, #255	; 0xff
 8009112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	22ff      	movs	r2, #255	; 0xff
 800911a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d114      	bne.n	800914e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d01a      	beq.n	8009162 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3310      	adds	r3, #16
 8009130:	4618      	mov	r0, r3
 8009132:	f001 f911 	bl	800a358 <xTaskRemoveFromEventList>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d012      	beq.n	8009162 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800913c:	4b0c      	ldr	r3, [pc, #48]	; (8009170 <xQueueGenericReset+0xcc>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	e009      	b.n	8009162 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3310      	adds	r3, #16
 8009152:	4618      	mov	r0, r3
 8009154:	f7ff fef1 	bl	8008f3a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3324      	adds	r3, #36	; 0x24
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff feec 	bl	8008f3a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009162:	f002 f84f 	bl	800b204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009166:	2301      	movs	r3, #1
}
 8009168:	4618      	mov	r0, r3
 800916a:	3710      	adds	r7, #16
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08e      	sub	sp, #56	; 0x38
 8009178:	af02      	add	r7, sp, #8
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
 8009180:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10a      	bne.n	800919e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800919a:	bf00      	nop
 800919c:	e7fe      	b.n	800919c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d002      	beq.n	80091c6 <xQueueGenericCreateStatic+0x52>
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d001      	beq.n	80091ca <xQueueGenericCreateStatic+0x56>
 80091c6:	2301      	movs	r3, #1
 80091c8:	e000      	b.n	80091cc <xQueueGenericCreateStatic+0x58>
 80091ca:	2300      	movs	r3, #0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	623b      	str	r3, [r7, #32]
}
 80091e2:	bf00      	nop
 80091e4:	e7fe      	b.n	80091e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d102      	bne.n	80091f2 <xQueueGenericCreateStatic+0x7e>
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <xQueueGenericCreateStatic+0x82>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e000      	b.n	80091f8 <xQueueGenericCreateStatic+0x84>
 80091f6:	2300      	movs	r3, #0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	f383 8811 	msr	BASEPRI, r3
 8009204:	f3bf 8f6f 	isb	sy
 8009208:	f3bf 8f4f 	dsb	sy
 800920c:	61fb      	str	r3, [r7, #28]
}
 800920e:	bf00      	nop
 8009210:	e7fe      	b.n	8009210 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009212:	2348      	movs	r3, #72	; 0x48
 8009214:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	2b48      	cmp	r3, #72	; 0x48
 800921a:	d00a      	beq.n	8009232 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	61bb      	str	r3, [r7, #24]
}
 800922e:	bf00      	nop
 8009230:	e7fe      	b.n	8009230 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009232:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00d      	beq.n	800925a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009240:	2201      	movs	r2, #1
 8009242:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009246:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800924a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	4613      	mov	r3, r2
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	68b9      	ldr	r1, [r7, #8]
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 f805 	bl	8009264 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800925a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800925c:	4618      	mov	r0, r3
 800925e:	3730      	adds	r7, #48	; 0x30
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	60b9      	str	r1, [r7, #8]
 800926e:	607a      	str	r2, [r7, #4]
 8009270:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d103      	bne.n	8009280 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	e002      	b.n	8009286 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	68ba      	ldr	r2, [r7, #8]
 8009290:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009292:	2101      	movs	r1, #1
 8009294:	69b8      	ldr	r0, [r7, #24]
 8009296:	f7ff ff05 	bl	80090a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800929a:	bf00      	nop
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
	...

080092a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b08e      	sub	sp, #56	; 0x38
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80092b2:	2300      	movs	r3, #0
 80092b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <xQueueGenericSend+0x32>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092d2:	bf00      	nop
 80092d4:	e7fe      	b.n	80092d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d103      	bne.n	80092e4 <xQueueGenericSend+0x40>
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d101      	bne.n	80092e8 <xQueueGenericSend+0x44>
 80092e4:	2301      	movs	r3, #1
 80092e6:	e000      	b.n	80092ea <xQueueGenericSend+0x46>
 80092e8:	2300      	movs	r3, #0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10a      	bne.n	8009304 <xQueueGenericSend+0x60>
	__asm volatile
 80092ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f2:	f383 8811 	msr	BASEPRI, r3
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	f3bf 8f4f 	dsb	sy
 80092fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009300:	bf00      	nop
 8009302:	e7fe      	b.n	8009302 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d103      	bne.n	8009312 <xQueueGenericSend+0x6e>
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800930e:	2b01      	cmp	r3, #1
 8009310:	d101      	bne.n	8009316 <xQueueGenericSend+0x72>
 8009312:	2301      	movs	r3, #1
 8009314:	e000      	b.n	8009318 <xQueueGenericSend+0x74>
 8009316:	2300      	movs	r3, #0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10a      	bne.n	8009332 <xQueueGenericSend+0x8e>
	__asm volatile
 800931c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009320:	f383 8811 	msr	BASEPRI, r3
 8009324:	f3bf 8f6f 	isb	sy
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	623b      	str	r3, [r7, #32]
}
 800932e:	bf00      	nop
 8009330:	e7fe      	b.n	8009330 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009332:	f001 f9d1 	bl	800a6d8 <xTaskGetSchedulerState>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d102      	bne.n	8009342 <xQueueGenericSend+0x9e>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <xQueueGenericSend+0xa2>
 8009342:	2301      	movs	r3, #1
 8009344:	e000      	b.n	8009348 <xQueueGenericSend+0xa4>
 8009346:	2300      	movs	r3, #0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <xQueueGenericSend+0xbe>
	__asm volatile
 800934c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009350:	f383 8811 	msr	BASEPRI, r3
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	f3bf 8f4f 	dsb	sy
 800935c:	61fb      	str	r3, [r7, #28]
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009362:	f001 ff1f 	bl	800b1a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800936a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800936c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936e:	429a      	cmp	r2, r3
 8009370:	d302      	bcc.n	8009378 <xQueueGenericSend+0xd4>
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	2b02      	cmp	r3, #2
 8009376:	d129      	bne.n	80093cc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	68b9      	ldr	r1, [r7, #8]
 800937c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800937e:	f000 fa0b 	bl	8009798 <prvCopyDataToQueue>
 8009382:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	2b00      	cmp	r3, #0
 800938a:	d010      	beq.n	80093ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800938c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800938e:	3324      	adds	r3, #36	; 0x24
 8009390:	4618      	mov	r0, r3
 8009392:	f000 ffe1 	bl	800a358 <xTaskRemoveFromEventList>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d013      	beq.n	80093c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800939c:	4b3f      	ldr	r3, [pc, #252]	; (800949c <xQueueGenericSend+0x1f8>)
 800939e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	e00a      	b.n	80093c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80093ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d007      	beq.n	80093c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80093b4:	4b39      	ldr	r3, [pc, #228]	; (800949c <xQueueGenericSend+0x1f8>)
 80093b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80093c4:	f001 ff1e 	bl	800b204 <vPortExitCritical>
				return pdPASS;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e063      	b.n	8009494 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d103      	bne.n	80093da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093d2:	f001 ff17 	bl	800b204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	e05c      	b.n	8009494 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d106      	bne.n	80093ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093e0:	f107 0314 	add.w	r3, r7, #20
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 f819 	bl	800a41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093ea:	2301      	movs	r3, #1
 80093ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093ee:	f001 ff09 	bl	800b204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093f2:	f000 fd8d 	bl	8009f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093f6:	f001 fed5 	bl	800b1a4 <vPortEnterCritical>
 80093fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009400:	b25b      	sxtb	r3, r3
 8009402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009406:	d103      	bne.n	8009410 <xQueueGenericSend+0x16c>
 8009408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009416:	b25b      	sxtb	r3, r3
 8009418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800941c:	d103      	bne.n	8009426 <xQueueGenericSend+0x182>
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009426:	f001 feed 	bl	800b204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800942a:	1d3a      	adds	r2, r7, #4
 800942c:	f107 0314 	add.w	r3, r7, #20
 8009430:	4611      	mov	r1, r2
 8009432:	4618      	mov	r0, r3
 8009434:	f001 f808 	bl	800a448 <xTaskCheckForTimeOut>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d124      	bne.n	8009488 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800943e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009440:	f000 faa2 	bl	8009988 <prvIsQueueFull>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d018      	beq.n	800947c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800944a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944c:	3310      	adds	r3, #16
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	4611      	mov	r1, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f000 ff30 	bl	800a2b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800945a:	f000 fa2d 	bl	80098b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800945e:	f000 fd65 	bl	8009f2c <xTaskResumeAll>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	f47f af7c 	bne.w	8009362 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800946a:	4b0c      	ldr	r3, [pc, #48]	; (800949c <xQueueGenericSend+0x1f8>)
 800946c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009470:	601a      	str	r2, [r3, #0]
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	e772      	b.n	8009362 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800947c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800947e:	f000 fa1b 	bl	80098b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009482:	f000 fd53 	bl	8009f2c <xTaskResumeAll>
 8009486:	e76c      	b.n	8009362 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800948a:	f000 fa15 	bl	80098b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800948e:	f000 fd4d 	bl	8009f2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009492:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009494:	4618      	mov	r0, r3
 8009496:	3738      	adds	r7, #56	; 0x38
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	e000ed04 	.word	0xe000ed04

080094a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b090      	sub	sp, #64	; 0x40
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	607a      	str	r2, [r7, #4]
 80094ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80094b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094ca:	bf00      	nop
 80094cc:	e7fe      	b.n	80094cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d103      	bne.n	80094dc <xQueueGenericSendFromISR+0x3c>
 80094d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <xQueueGenericSendFromISR+0x40>
 80094dc:	2301      	movs	r3, #1
 80094de:	e000      	b.n	80094e2 <xQueueGenericSendFromISR+0x42>
 80094e0:	2300      	movs	r3, #0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10a      	bne.n	80094fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094f8:	bf00      	nop
 80094fa:	e7fe      	b.n	80094fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d103      	bne.n	800950a <xQueueGenericSendFromISR+0x6a>
 8009502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009506:	2b01      	cmp	r3, #1
 8009508:	d101      	bne.n	800950e <xQueueGenericSendFromISR+0x6e>
 800950a:	2301      	movs	r3, #1
 800950c:	e000      	b.n	8009510 <xQueueGenericSendFromISR+0x70>
 800950e:	2300      	movs	r3, #0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10a      	bne.n	800952a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	623b      	str	r3, [r7, #32]
}
 8009526:	bf00      	nop
 8009528:	e7fe      	b.n	8009528 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800952a:	f001 ff1d 	bl	800b368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800952e:	f3ef 8211 	mrs	r2, BASEPRI
 8009532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	61fa      	str	r2, [r7, #28]
 8009544:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009546:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009548:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009552:	429a      	cmp	r2, r3
 8009554:	d302      	bcc.n	800955c <xQueueGenericSendFromISR+0xbc>
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2b02      	cmp	r3, #2
 800955a:	d12f      	bne.n	80095bc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009572:	f000 f911 	bl	8009798 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009576:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800957a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957e:	d112      	bne.n	80095a6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	2b00      	cmp	r3, #0
 8009586:	d016      	beq.n	80095b6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	3324      	adds	r3, #36	; 0x24
 800958c:	4618      	mov	r0, r3
 800958e:	f000 fee3 	bl	800a358 <xTaskRemoveFromEventList>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00e      	beq.n	80095b6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00b      	beq.n	80095b6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	601a      	str	r2, [r3, #0]
 80095a4:	e007      	b.n	80095b6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80095a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80095aa:	3301      	adds	r3, #1
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	b25a      	sxtb	r2, r3
 80095b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80095b6:	2301      	movs	r3, #1
 80095b8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80095ba:	e001      	b.n	80095c0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80095bc:	2300      	movs	r3, #0
 80095be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80095ca:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80095cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3740      	adds	r7, #64	; 0x40
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
	...

080095d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08c      	sub	sp, #48	; 0x30
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80095ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10a      	bne.n	8009608 <xQueueReceive+0x30>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	623b      	str	r3, [r7, #32]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <xQueueReceive+0x3e>
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	2b00      	cmp	r3, #0
 8009614:	d101      	bne.n	800961a <xQueueReceive+0x42>
 8009616:	2301      	movs	r3, #1
 8009618:	e000      	b.n	800961c <xQueueReceive+0x44>
 800961a:	2300      	movs	r3, #0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <xQueueReceive+0x5e>
	__asm volatile
 8009620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009624:	f383 8811 	msr	BASEPRI, r3
 8009628:	f3bf 8f6f 	isb	sy
 800962c:	f3bf 8f4f 	dsb	sy
 8009630:	61fb      	str	r3, [r7, #28]
}
 8009632:	bf00      	nop
 8009634:	e7fe      	b.n	8009634 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009636:	f001 f84f 	bl	800a6d8 <xTaskGetSchedulerState>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d102      	bne.n	8009646 <xQueueReceive+0x6e>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <xQueueReceive+0x72>
 8009646:	2301      	movs	r3, #1
 8009648:	e000      	b.n	800964c <xQueueReceive+0x74>
 800964a:	2300      	movs	r3, #0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d10a      	bne.n	8009666 <xQueueReceive+0x8e>
	__asm volatile
 8009650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009654:	f383 8811 	msr	BASEPRI, r3
 8009658:	f3bf 8f6f 	isb	sy
 800965c:	f3bf 8f4f 	dsb	sy
 8009660:	61bb      	str	r3, [r7, #24]
}
 8009662:	bf00      	nop
 8009664:	e7fe      	b.n	8009664 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009666:	f001 fd9d 	bl	800b1a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009672:	2b00      	cmp	r3, #0
 8009674:	d01f      	beq.n	80096b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009676:	68b9      	ldr	r1, [r7, #8]
 8009678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800967a:	f000 f8f7 	bl	800986c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	1e5a      	subs	r2, r3, #1
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00f      	beq.n	80096ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009690:	3310      	adds	r3, #16
 8009692:	4618      	mov	r0, r3
 8009694:	f000 fe60 	bl	800a358 <xTaskRemoveFromEventList>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d007      	beq.n	80096ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800969e:	4b3d      	ldr	r3, [pc, #244]	; (8009794 <xQueueReceive+0x1bc>)
 80096a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80096ae:	f001 fda9 	bl	800b204 <vPortExitCritical>
				return pdPASS;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e069      	b.n	800978a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d103      	bne.n	80096c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80096bc:	f001 fda2 	bl	800b204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80096c0:	2300      	movs	r3, #0
 80096c2:	e062      	b.n	800978a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d106      	bne.n	80096d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80096ca:	f107 0310 	add.w	r3, r7, #16
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 fea4 	bl	800a41c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80096d4:	2301      	movs	r3, #1
 80096d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80096d8:	f001 fd94 	bl	800b204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80096dc:	f000 fc18 	bl	8009f10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80096e0:	f001 fd60 	bl	800b1a4 <vPortEnterCritical>
 80096e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80096ea:	b25b      	sxtb	r3, r3
 80096ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f0:	d103      	bne.n	80096fa <xQueueReceive+0x122>
 80096f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009700:	b25b      	sxtb	r3, r3
 8009702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009706:	d103      	bne.n	8009710 <xQueueReceive+0x138>
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	2200      	movs	r2, #0
 800970c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009710:	f001 fd78 	bl	800b204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009714:	1d3a      	adds	r2, r7, #4
 8009716:	f107 0310 	add.w	r3, r7, #16
 800971a:	4611      	mov	r1, r2
 800971c:	4618      	mov	r0, r3
 800971e:	f000 fe93 	bl	800a448 <xTaskCheckForTimeOut>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d123      	bne.n	8009770 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009728:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800972a:	f000 f917 	bl	800995c <prvIsQueueEmpty>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d017      	beq.n	8009764 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	3324      	adds	r3, #36	; 0x24
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	4611      	mov	r1, r2
 800973c:	4618      	mov	r0, r3
 800973e:	f000 fdbb 	bl	800a2b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009744:	f000 f8b8 	bl	80098b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009748:	f000 fbf0 	bl	8009f2c <xTaskResumeAll>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d189      	bne.n	8009666 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009752:	4b10      	ldr	r3, [pc, #64]	; (8009794 <xQueueReceive+0x1bc>)
 8009754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	e780      	b.n	8009666 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009766:	f000 f8a7 	bl	80098b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800976a:	f000 fbdf 	bl	8009f2c <xTaskResumeAll>
 800976e:	e77a      	b.n	8009666 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009772:	f000 f8a1 	bl	80098b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009776:	f000 fbd9 	bl	8009f2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800977a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800977c:	f000 f8ee 	bl	800995c <prvIsQueueEmpty>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	f43f af6f 	beq.w	8009666 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009788:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800978a:	4618      	mov	r0, r3
 800978c:	3730      	adds	r7, #48	; 0x30
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	e000ed04 	.word	0xe000ed04

08009798 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b086      	sub	sp, #24
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d10d      	bne.n	80097d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d14d      	bne.n	800985a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 ffa6 	bl	800a714 <xTaskPriorityDisinherit>
 80097c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	609a      	str	r2, [r3, #8]
 80097d0:	e043      	b.n	800985a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d119      	bne.n	800980c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6858      	ldr	r0, [r3, #4]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e0:	461a      	mov	r2, r3
 80097e2:	68b9      	ldr	r1, [r7, #8]
 80097e4:	f002 f810 	bl	800b808 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f0:	441a      	add	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	685a      	ldr	r2, [r3, #4]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d32b      	bcc.n	800985a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	605a      	str	r2, [r3, #4]
 800980a:	e026      	b.n	800985a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	68d8      	ldr	r0, [r3, #12]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009814:	461a      	mov	r2, r3
 8009816:	68b9      	ldr	r1, [r7, #8]
 8009818:	f001 fff6 	bl	800b808 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009824:	425b      	negs	r3, r3
 8009826:	441a      	add	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	429a      	cmp	r2, r3
 8009836:	d207      	bcs.n	8009848 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009840:	425b      	negs	r3, r3
 8009842:	441a      	add	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b02      	cmp	r3, #2
 800984c:	d105      	bne.n	800985a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	3b01      	subs	r3, #1
 8009858:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009862:	697b      	ldr	r3, [r7, #20]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987a:	2b00      	cmp	r3, #0
 800987c:	d018      	beq.n	80098b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	68da      	ldr	r2, [r3, #12]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	441a      	add	r2, r3
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68da      	ldr	r2, [r3, #12]
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689b      	ldr	r3, [r3, #8]
 8009894:	429a      	cmp	r2, r3
 8009896:	d303      	bcc.n	80098a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	68d9      	ldr	r1, [r3, #12]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a8:	461a      	mov	r2, r3
 80098aa:	6838      	ldr	r0, [r7, #0]
 80098ac:	f001 ffac 	bl	800b808 <memcpy>
	}
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80098c0:	f001 fc70 	bl	800b1a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098cc:	e011      	b.n	80098f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d012      	beq.n	80098fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	3324      	adds	r3, #36	; 0x24
 80098da:	4618      	mov	r0, r3
 80098dc:	f000 fd3c 	bl	800a358 <xTaskRemoveFromEventList>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d001      	beq.n	80098ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80098e6:	f000 fe11 	bl	800a50c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80098f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	dce9      	bgt.n	80098ce <prvUnlockQueue+0x16>
 80098fa:	e000      	b.n	80098fe <prvUnlockQueue+0x46>
					break;
 80098fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	22ff      	movs	r2, #255	; 0xff
 8009902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009906:	f001 fc7d 	bl	800b204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800990a:	f001 fc4b 	bl	800b1a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009914:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009916:	e011      	b.n	800993c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d012      	beq.n	8009946 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	3310      	adds	r3, #16
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fd17 	bl	800a358 <xTaskRemoveFromEventList>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009930:	f000 fdec 	bl	800a50c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	3b01      	subs	r3, #1
 8009938:	b2db      	uxtb	r3, r3
 800993a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800993c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009940:	2b00      	cmp	r3, #0
 8009942:	dce9      	bgt.n	8009918 <prvUnlockQueue+0x60>
 8009944:	e000      	b.n	8009948 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009946:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	22ff      	movs	r2, #255	; 0xff
 800994c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009950:	f001 fc58 	bl	800b204 <vPortExitCritical>
}
 8009954:	bf00      	nop
 8009956:	3710      	adds	r7, #16
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}

0800995c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009964:	f001 fc1e 	bl	800b1a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800996c:	2b00      	cmp	r3, #0
 800996e:	d102      	bne.n	8009976 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009970:	2301      	movs	r3, #1
 8009972:	60fb      	str	r3, [r7, #12]
 8009974:	e001      	b.n	800997a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009976:	2300      	movs	r3, #0
 8009978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800997a:	f001 fc43 	bl	800b204 <vPortExitCritical>

	return xReturn;
 800997e:	68fb      	ldr	r3, [r7, #12]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009990:	f001 fc08 	bl	800b1a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999c:	429a      	cmp	r2, r3
 800999e:	d102      	bne.n	80099a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80099a0:	2301      	movs	r3, #1
 80099a2:	60fb      	str	r3, [r7, #12]
 80099a4:	e001      	b.n	80099aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80099a6:	2300      	movs	r3, #0
 80099a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80099aa:	f001 fc2b 	bl	800b204 <vPortExitCritical>

	return xReturn;
 80099ae:	68fb      	ldr	r3, [r7, #12]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099c2:	2300      	movs	r3, #0
 80099c4:	60fb      	str	r3, [r7, #12]
 80099c6:	e014      	b.n	80099f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80099c8:	4a0f      	ldr	r2, [pc, #60]	; (8009a08 <vQueueAddToRegistry+0x50>)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10b      	bne.n	80099ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80099d4:	490c      	ldr	r1, [pc, #48]	; (8009a08 <vQueueAddToRegistry+0x50>)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80099de:	4a0a      	ldr	r2, [pc, #40]	; (8009a08 <vQueueAddToRegistry+0x50>)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	4413      	add	r3, r2
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80099ea:	e006      	b.n	80099fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	3301      	adds	r3, #1
 80099f0:	60fb      	str	r3, [r7, #12]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2b07      	cmp	r3, #7
 80099f6:	d9e7      	bls.n	80099c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80099f8:	bf00      	nop
 80099fa:	bf00      	nop
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	24000dd8 	.word	0x24000dd8

08009a0c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009a1c:	f001 fbc2 	bl	800b1a4 <vPortEnterCritical>
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a26:	b25b      	sxtb	r3, r3
 8009a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2c:	d103      	bne.n	8009a36 <vQueueWaitForMessageRestricted+0x2a>
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a3c:	b25b      	sxtb	r3, r3
 8009a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a42:	d103      	bne.n	8009a4c <vQueueWaitForMessageRestricted+0x40>
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	2200      	movs	r2, #0
 8009a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a4c:	f001 fbda 	bl	800b204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d106      	bne.n	8009a66 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	3324      	adds	r3, #36	; 0x24
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 fc4d 	bl	800a300 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009a66:	6978      	ldr	r0, [r7, #20]
 8009a68:	f7ff ff26 	bl	80098b8 <prvUnlockQueue>
	}
 8009a6c:	bf00      	nop
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08e      	sub	sp, #56	; 0x38
 8009a78:	af04      	add	r7, sp, #16
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10a      	bne.n	8009a9e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	623b      	str	r3, [r7, #32]
}
 8009a9a:	bf00      	nop
 8009a9c:	e7fe      	b.n	8009a9c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10a      	bne.n	8009aba <xTaskCreateStatic+0x46>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	61fb      	str	r3, [r7, #28]
}
 8009ab6:	bf00      	nop
 8009ab8:	e7fe      	b.n	8009ab8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009aba:	23b4      	movs	r3, #180	; 0xb4
 8009abc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	2bb4      	cmp	r3, #180	; 0xb4
 8009ac2:	d00a      	beq.n	8009ada <xTaskCreateStatic+0x66>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	61bb      	str	r3, [r7, #24]
}
 8009ad6:	bf00      	nop
 8009ad8:	e7fe      	b.n	8009ad8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ada:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d01e      	beq.n	8009b20 <xTaskCreateStatic+0xac>
 8009ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d01b      	beq.n	8009b20 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009af0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	2202      	movs	r2, #2
 8009af6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009afa:	2300      	movs	r3, #0
 8009afc:	9303      	str	r3, [sp, #12]
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	9302      	str	r3, [sp, #8]
 8009b02:	f107 0314 	add.w	r3, r7, #20
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	68b9      	ldr	r1, [r7, #8]
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 f850 	bl	8009bb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b1a:	f000 f8eb 	bl	8009cf4 <prvAddNewTaskToReadyList>
 8009b1e:	e001      	b.n	8009b24 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b24:	697b      	ldr	r3, [r7, #20]
	}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3728      	adds	r7, #40	; 0x28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}

08009b2e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b2e:	b580      	push	{r7, lr}
 8009b30:	b08c      	sub	sp, #48	; 0x30
 8009b32:	af04      	add	r7, sp, #16
 8009b34:	60f8      	str	r0, [r7, #12]
 8009b36:	60b9      	str	r1, [r7, #8]
 8009b38:	603b      	str	r3, [r7, #0]
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b3e:	88fb      	ldrh	r3, [r7, #6]
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	4618      	mov	r0, r3
 8009b44:	f001 fc50 	bl	800b3e8 <pvPortMalloc>
 8009b48:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00e      	beq.n	8009b6e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b50:	20b4      	movs	r0, #180	; 0xb4
 8009b52:	f001 fc49 	bl	800b3e8 <pvPortMalloc>
 8009b56:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	697a      	ldr	r2, [r7, #20]
 8009b62:	631a      	str	r2, [r3, #48]	; 0x30
 8009b64:	e005      	b.n	8009b72 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b66:	6978      	ldr	r0, [r7, #20]
 8009b68:	f001 fd0a 	bl	800b580 <vPortFree>
 8009b6c:	e001      	b.n	8009b72 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d017      	beq.n	8009ba8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b80:	88fa      	ldrh	r2, [r7, #6]
 8009b82:	2300      	movs	r3, #0
 8009b84:	9303      	str	r3, [sp, #12]
 8009b86:	69fb      	ldr	r3, [r7, #28]
 8009b88:	9302      	str	r3, [sp, #8]
 8009b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8c:	9301      	str	r3, [sp, #4]
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	68b9      	ldr	r1, [r7, #8]
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 f80e 	bl	8009bb8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b9c:	69f8      	ldr	r0, [r7, #28]
 8009b9e:	f000 f8a9 	bl	8009cf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	61bb      	str	r3, [r7, #24]
 8009ba6:	e002      	b.n	8009bae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009bae:	69bb      	ldr	r3, [r7, #24]
	}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3720      	adds	r7, #32
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b088      	sub	sp, #32
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	607a      	str	r2, [r7, #4]
 8009bc4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bca:	6879      	ldr	r1, [r7, #4]
 8009bcc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009bd0:	440b      	add	r3, r1
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	f023 0307 	bic.w	r3, r3, #7
 8009bde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	f003 0307 	and.w	r3, r3, #7
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00a      	beq.n	8009c00 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	617b      	str	r3, [r7, #20]
}
 8009bfc:	bf00      	nop
 8009bfe:	e7fe      	b.n	8009bfe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d01f      	beq.n	8009c46 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c06:	2300      	movs	r3, #0
 8009c08:	61fb      	str	r3, [r7, #28]
 8009c0a:	e012      	b.n	8009c32 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009c0c:	68ba      	ldr	r2, [r7, #8]
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	4413      	add	r3, r2
 8009c12:	7819      	ldrb	r1, [r3, #0]
 8009c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	4413      	add	r3, r2
 8009c1a:	3334      	adds	r3, #52	; 0x34
 8009c1c:	460a      	mov	r2, r1
 8009c1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	4413      	add	r3, r2
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d006      	beq.n	8009c3a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	61fb      	str	r3, [r7, #28]
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	2b0f      	cmp	r3, #15
 8009c36:	d9e9      	bls.n	8009c0c <prvInitialiseNewTask+0x54>
 8009c38:	e000      	b.n	8009c3c <prvInitialiseNewTask+0x84>
			{
				break;
 8009c3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c44:	e003      	b.n	8009c4e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	2b06      	cmp	r3, #6
 8009c52:	d901      	bls.n	8009c58 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c54:	2306      	movs	r3, #6
 8009c56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c66:	2200      	movs	r2, #0
 8009c68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7ff f983 	bl	8008f7a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	3318      	adds	r3, #24
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7ff f97e 	bl	8008f7a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c86:	f1c3 0207 	rsb	r2, r3, #7
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c96:	2200      	movs	r2, #0
 8009c98:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca6:	334c      	adds	r3, #76	; 0x4c
 8009ca8:	2260      	movs	r2, #96	; 0x60
 8009caa:	2100      	movs	r1, #0
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 fdb9 	bl	800b824 <memset>
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb4:	4a0c      	ldr	r2, [pc, #48]	; (8009ce8 <prvInitialiseNewTask+0x130>)
 8009cb6:	651a      	str	r2, [r3, #80]	; 0x50
 8009cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cba:	4a0c      	ldr	r2, [pc, #48]	; (8009cec <prvInitialiseNewTask+0x134>)
 8009cbc:	655a      	str	r2, [r3, #84]	; 0x54
 8009cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc0:	4a0b      	ldr	r2, [pc, #44]	; (8009cf0 <prvInitialiseNewTask+0x138>)
 8009cc2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	68f9      	ldr	r1, [r7, #12]
 8009cc8:	69b8      	ldr	r0, [r7, #24]
 8009cca:	f001 f941 	bl	800af50 <pxPortInitialiseStack>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d002      	beq.n	8009ce0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ce0:	bf00      	nop
 8009ce2:	3720      	adds	r7, #32
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	0800ba90 	.word	0x0800ba90
 8009cec:	0800bab0 	.word	0x0800bab0
 8009cf0:	0800ba70 	.word	0x0800ba70

08009cf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009cfc:	f001 fa52 	bl	800b1a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009d00:	4b2a      	ldr	r3, [pc, #168]	; (8009dac <prvAddNewTaskToReadyList+0xb8>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3301      	adds	r3, #1
 8009d06:	4a29      	ldr	r2, [pc, #164]	; (8009dac <prvAddNewTaskToReadyList+0xb8>)
 8009d08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009d0a:	4b29      	ldr	r3, [pc, #164]	; (8009db0 <prvAddNewTaskToReadyList+0xbc>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d109      	bne.n	8009d26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d12:	4a27      	ldr	r2, [pc, #156]	; (8009db0 <prvAddNewTaskToReadyList+0xbc>)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d18:	4b24      	ldr	r3, [pc, #144]	; (8009dac <prvAddNewTaskToReadyList+0xb8>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d110      	bne.n	8009d42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d20:	f000 fc18 	bl	800a554 <prvInitialiseTaskLists>
 8009d24:	e00d      	b.n	8009d42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d26:	4b23      	ldr	r3, [pc, #140]	; (8009db4 <prvAddNewTaskToReadyList+0xc0>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d109      	bne.n	8009d42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d2e:	4b20      	ldr	r3, [pc, #128]	; (8009db0 <prvAddNewTaskToReadyList+0xbc>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	d802      	bhi.n	8009d42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d3c:	4a1c      	ldr	r2, [pc, #112]	; (8009db0 <prvAddNewTaskToReadyList+0xbc>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d42:	4b1d      	ldr	r3, [pc, #116]	; (8009db8 <prvAddNewTaskToReadyList+0xc4>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3301      	adds	r3, #1
 8009d48:	4a1b      	ldr	r2, [pc, #108]	; (8009db8 <prvAddNewTaskToReadyList+0xc4>)
 8009d4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	2201      	movs	r2, #1
 8009d52:	409a      	lsls	r2, r3
 8009d54:	4b19      	ldr	r3, [pc, #100]	; (8009dbc <prvAddNewTaskToReadyList+0xc8>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	4a18      	ldr	r2, [pc, #96]	; (8009dbc <prvAddNewTaskToReadyList+0xc8>)
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d62:	4613      	mov	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4413      	add	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4a15      	ldr	r2, [pc, #84]	; (8009dc0 <prvAddNewTaskToReadyList+0xcc>)
 8009d6c:	441a      	add	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	3304      	adds	r3, #4
 8009d72:	4619      	mov	r1, r3
 8009d74:	4610      	mov	r0, r2
 8009d76:	f7ff f90d 	bl	8008f94 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d7a:	f001 fa43 	bl	800b204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d7e:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <prvAddNewTaskToReadyList+0xc0>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00e      	beq.n	8009da4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d86:	4b0a      	ldr	r3, [pc, #40]	; (8009db0 <prvAddNewTaskToReadyList+0xbc>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d207      	bcs.n	8009da4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d94:	4b0b      	ldr	r3, [pc, #44]	; (8009dc4 <prvAddNewTaskToReadyList+0xd0>)
 8009d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009da4:	bf00      	nop
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	24000f18 	.word	0x24000f18
 8009db0:	24000e18 	.word	0x24000e18
 8009db4:	24000f24 	.word	0x24000f24
 8009db8:	24000f34 	.word	0x24000f34
 8009dbc:	24000f20 	.word	0x24000f20
 8009dc0:	24000e1c 	.word	0x24000e1c
 8009dc4:	e000ed04 	.word	0xe000ed04

08009dc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d017      	beq.n	8009e0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009dda:	4b13      	ldr	r3, [pc, #76]	; (8009e28 <vTaskDelay+0x60>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00a      	beq.n	8009df8 <vTaskDelay+0x30>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	60bb      	str	r3, [r7, #8]
}
 8009df4:	bf00      	nop
 8009df6:	e7fe      	b.n	8009df6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009df8:	f000 f88a 	bl	8009f10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fd0e 	bl	800a820 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009e04:	f000 f892 	bl	8009f2c <xTaskResumeAll>
 8009e08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d107      	bne.n	8009e20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009e10:	4b06      	ldr	r3, [pc, #24]	; (8009e2c <vTaskDelay+0x64>)
 8009e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e16:	601a      	str	r2, [r3, #0]
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e20:	bf00      	nop
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	24000f40 	.word	0x24000f40
 8009e2c:	e000ed04 	.word	0xe000ed04

08009e30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b08a      	sub	sp, #40	; 0x28
 8009e34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e3e:	463a      	mov	r2, r7
 8009e40:	1d39      	adds	r1, r7, #4
 8009e42:	f107 0308 	add.w	r3, r7, #8
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7f6 fbcc 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68ba      	ldr	r2, [r7, #8]
 8009e52:	9202      	str	r2, [sp, #8]
 8009e54:	9301      	str	r3, [sp, #4]
 8009e56:	2300      	movs	r3, #0
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	460a      	mov	r2, r1
 8009e5e:	4924      	ldr	r1, [pc, #144]	; (8009ef0 <vTaskStartScheduler+0xc0>)
 8009e60:	4824      	ldr	r0, [pc, #144]	; (8009ef4 <vTaskStartScheduler+0xc4>)
 8009e62:	f7ff fe07 	bl	8009a74 <xTaskCreateStatic>
 8009e66:	4603      	mov	r3, r0
 8009e68:	4a23      	ldr	r2, [pc, #140]	; (8009ef8 <vTaskStartScheduler+0xc8>)
 8009e6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e6c:	4b22      	ldr	r3, [pc, #136]	; (8009ef8 <vTaskStartScheduler+0xc8>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e74:	2301      	movs	r3, #1
 8009e76:	617b      	str	r3, [r7, #20]
 8009e78:	e001      	b.n	8009e7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d102      	bne.n	8009e8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009e84:	f000 fd32 	bl	800a8ec <xTimerCreateTimerTask>
 8009e88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d11b      	bne.n	8009ec8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	613b      	str	r3, [r7, #16]
}
 8009ea2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ea4:	4b15      	ldr	r3, [pc, #84]	; (8009efc <vTaskStartScheduler+0xcc>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	334c      	adds	r3, #76	; 0x4c
 8009eaa:	4a15      	ldr	r2, [pc, #84]	; (8009f00 <vTaskStartScheduler+0xd0>)
 8009eac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009eae:	4b15      	ldr	r3, [pc, #84]	; (8009f04 <vTaskStartScheduler+0xd4>)
 8009eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009eb6:	4b14      	ldr	r3, [pc, #80]	; (8009f08 <vTaskStartScheduler+0xd8>)
 8009eb8:	2201      	movs	r2, #1
 8009eba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ebc:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <vTaskStartScheduler+0xdc>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ec2:	f001 f8cd 	bl	800b060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ec6:	e00e      	b.n	8009ee6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ece:	d10a      	bne.n	8009ee6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	60fb      	str	r3, [r7, #12]
}
 8009ee2:	bf00      	nop
 8009ee4:	e7fe      	b.n	8009ee4 <vTaskStartScheduler+0xb4>
}
 8009ee6:	bf00      	nop
 8009ee8:	3718      	adds	r7, #24
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	0800ba20 	.word	0x0800ba20
 8009ef4:	0800a525 	.word	0x0800a525
 8009ef8:	24000f3c 	.word	0x24000f3c
 8009efc:	24000e18 	.word	0x24000e18
 8009f00:	24000014 	.word	0x24000014
 8009f04:	24000f38 	.word	0x24000f38
 8009f08:	24000f24 	.word	0x24000f24
 8009f0c:	24000f1c 	.word	0x24000f1c

08009f10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009f10:	b480      	push	{r7}
 8009f12:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009f14:	4b04      	ldr	r3, [pc, #16]	; (8009f28 <vTaskSuspendAll+0x18>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	3301      	adds	r3, #1
 8009f1a:	4a03      	ldr	r2, [pc, #12]	; (8009f28 <vTaskSuspendAll+0x18>)
 8009f1c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f1e:	bf00      	nop
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr
 8009f28:	24000f40 	.word	0x24000f40

08009f2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f36:	2300      	movs	r3, #0
 8009f38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f3a:	4b41      	ldr	r3, [pc, #260]	; (800a040 <xTaskResumeAll+0x114>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <xTaskResumeAll+0x2c>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	603b      	str	r3, [r7, #0]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f58:	f001 f924 	bl	800b1a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f5c:	4b38      	ldr	r3, [pc, #224]	; (800a040 <xTaskResumeAll+0x114>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	4a37      	ldr	r2, [pc, #220]	; (800a040 <xTaskResumeAll+0x114>)
 8009f64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f66:	4b36      	ldr	r3, [pc, #216]	; (800a040 <xTaskResumeAll+0x114>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d161      	bne.n	800a032 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f6e:	4b35      	ldr	r3, [pc, #212]	; (800a044 <xTaskResumeAll+0x118>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d05d      	beq.n	800a032 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f76:	e02e      	b.n	8009fd6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f78:	4b33      	ldr	r3, [pc, #204]	; (800a048 <xTaskResumeAll+0x11c>)
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3318      	adds	r3, #24
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7ff f862 	bl	800904e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7ff f85d 	bl	800904e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f98:	2201      	movs	r2, #1
 8009f9a:	409a      	lsls	r2, r3
 8009f9c:	4b2b      	ldr	r3, [pc, #172]	; (800a04c <xTaskResumeAll+0x120>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	4a2a      	ldr	r2, [pc, #168]	; (800a04c <xTaskResumeAll+0x120>)
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4a27      	ldr	r2, [pc, #156]	; (800a050 <xTaskResumeAll+0x124>)
 8009fb4:	441a      	add	r2, r3
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	f7fe ffe9 	bl	8008f94 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc6:	4b23      	ldr	r3, [pc, #140]	; (800a054 <xTaskResumeAll+0x128>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d302      	bcc.n	8009fd6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009fd0:	4b21      	ldr	r3, [pc, #132]	; (800a058 <xTaskResumeAll+0x12c>)
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fd6:	4b1c      	ldr	r3, [pc, #112]	; (800a048 <xTaskResumeAll+0x11c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1cc      	bne.n	8009f78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d001      	beq.n	8009fe8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009fe4:	f000 fb58 	bl	800a698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009fe8:	4b1c      	ldr	r3, [pc, #112]	; (800a05c <xTaskResumeAll+0x130>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d010      	beq.n	800a016 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009ff4:	f000 f846 	bl	800a084 <xTaskIncrementTick>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d002      	beq.n	800a004 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009ffe:	4b16      	ldr	r3, [pc, #88]	; (800a058 <xTaskResumeAll+0x12c>)
 800a000:	2201      	movs	r2, #1
 800a002:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3b01      	subs	r3, #1
 800a008:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1f1      	bne.n	8009ff4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a010:	4b12      	ldr	r3, [pc, #72]	; (800a05c <xTaskResumeAll+0x130>)
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a016:	4b10      	ldr	r3, [pc, #64]	; (800a058 <xTaskResumeAll+0x12c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d009      	beq.n	800a032 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a01e:	2301      	movs	r3, #1
 800a020:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a022:	4b0f      	ldr	r3, [pc, #60]	; (800a060 <xTaskResumeAll+0x134>)
 800a024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a028:	601a      	str	r2, [r3, #0]
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a032:	f001 f8e7 	bl	800b204 <vPortExitCritical>

	return xAlreadyYielded;
 800a036:	68bb      	ldr	r3, [r7, #8]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3710      	adds	r7, #16
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	24000f40 	.word	0x24000f40
 800a044:	24000f18 	.word	0x24000f18
 800a048:	24000ed8 	.word	0x24000ed8
 800a04c:	24000f20 	.word	0x24000f20
 800a050:	24000e1c 	.word	0x24000e1c
 800a054:	24000e18 	.word	0x24000e18
 800a058:	24000f2c 	.word	0x24000f2c
 800a05c:	24000f28 	.word	0x24000f28
 800a060:	e000ed04 	.word	0xe000ed04

0800a064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a06a:	4b05      	ldr	r3, [pc, #20]	; (800a080 <xTaskGetTickCount+0x1c>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a070:	687b      	ldr	r3, [r7, #4]
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	24000f1c 	.word	0x24000f1c

0800a084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a08a:	2300      	movs	r3, #0
 800a08c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a08e:	4b4e      	ldr	r3, [pc, #312]	; (800a1c8 <xTaskIncrementTick+0x144>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f040 808e 	bne.w	800a1b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a098:	4b4c      	ldr	r3, [pc, #304]	; (800a1cc <xTaskIncrementTick+0x148>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3301      	adds	r3, #1
 800a09e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a0a0:	4a4a      	ldr	r2, [pc, #296]	; (800a1cc <xTaskIncrementTick+0x148>)
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d120      	bne.n	800a0ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a0ac:	4b48      	ldr	r3, [pc, #288]	; (800a1d0 <xTaskIncrementTick+0x14c>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00a      	beq.n	800a0cc <xTaskIncrementTick+0x48>
	__asm volatile
 800a0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ba:	f383 8811 	msr	BASEPRI, r3
 800a0be:	f3bf 8f6f 	isb	sy
 800a0c2:	f3bf 8f4f 	dsb	sy
 800a0c6:	603b      	str	r3, [r7, #0]
}
 800a0c8:	bf00      	nop
 800a0ca:	e7fe      	b.n	800a0ca <xTaskIncrementTick+0x46>
 800a0cc:	4b40      	ldr	r3, [pc, #256]	; (800a1d0 <xTaskIncrementTick+0x14c>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	60fb      	str	r3, [r7, #12]
 800a0d2:	4b40      	ldr	r3, [pc, #256]	; (800a1d4 <xTaskIncrementTick+0x150>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a3e      	ldr	r2, [pc, #248]	; (800a1d0 <xTaskIncrementTick+0x14c>)
 800a0d8:	6013      	str	r3, [r2, #0]
 800a0da:	4a3e      	ldr	r2, [pc, #248]	; (800a1d4 <xTaskIncrementTick+0x150>)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	4b3d      	ldr	r3, [pc, #244]	; (800a1d8 <xTaskIncrementTick+0x154>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	4a3c      	ldr	r2, [pc, #240]	; (800a1d8 <xTaskIncrementTick+0x154>)
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	f000 fad5 	bl	800a698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a0ee:	4b3b      	ldr	r3, [pc, #236]	; (800a1dc <xTaskIncrementTick+0x158>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d348      	bcc.n	800a18a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0f8:	4b35      	ldr	r3, [pc, #212]	; (800a1d0 <xTaskIncrementTick+0x14c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d104      	bne.n	800a10c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a102:	4b36      	ldr	r3, [pc, #216]	; (800a1dc <xTaskIncrementTick+0x158>)
 800a104:	f04f 32ff 	mov.w	r2, #4294967295
 800a108:	601a      	str	r2, [r3, #0]
					break;
 800a10a:	e03e      	b.n	800a18a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a10c:	4b30      	ldr	r3, [pc, #192]	; (800a1d0 <xTaskIncrementTick+0x14c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	d203      	bcs.n	800a12c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a124:	4a2d      	ldr	r2, [pc, #180]	; (800a1dc <xTaskIncrementTick+0x158>)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a12a:	e02e      	b.n	800a18a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	3304      	adds	r3, #4
 800a130:	4618      	mov	r0, r3
 800a132:	f7fe ff8c 	bl	800904e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d004      	beq.n	800a148 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	3318      	adds	r3, #24
 800a142:	4618      	mov	r0, r3
 800a144:	f7fe ff83 	bl	800904e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14c:	2201      	movs	r2, #1
 800a14e:	409a      	lsls	r2, r3
 800a150:	4b23      	ldr	r3, [pc, #140]	; (800a1e0 <xTaskIncrementTick+0x15c>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4313      	orrs	r3, r2
 800a156:	4a22      	ldr	r2, [pc, #136]	; (800a1e0 <xTaskIncrementTick+0x15c>)
 800a158:	6013      	str	r3, [r2, #0]
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4a1f      	ldr	r2, [pc, #124]	; (800a1e4 <xTaskIncrementTick+0x160>)
 800a168:	441a      	add	r2, r3
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	3304      	adds	r3, #4
 800a16e:	4619      	mov	r1, r3
 800a170:	4610      	mov	r0, r2
 800a172:	f7fe ff0f 	bl	8008f94 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a17a:	4b1b      	ldr	r3, [pc, #108]	; (800a1e8 <xTaskIncrementTick+0x164>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a180:	429a      	cmp	r2, r3
 800a182:	d3b9      	bcc.n	800a0f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a184:	2301      	movs	r3, #1
 800a186:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a188:	e7b6      	b.n	800a0f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a18a:	4b17      	ldr	r3, [pc, #92]	; (800a1e8 <xTaskIncrementTick+0x164>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a190:	4914      	ldr	r1, [pc, #80]	; (800a1e4 <xTaskIncrementTick+0x160>)
 800a192:	4613      	mov	r3, r2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	440b      	add	r3, r1
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d901      	bls.n	800a1a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a1a6:	4b11      	ldr	r3, [pc, #68]	; (800a1ec <xTaskIncrementTick+0x168>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d007      	beq.n	800a1be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	e004      	b.n	800a1be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a1b4:	4b0e      	ldr	r3, [pc, #56]	; (800a1f0 <xTaskIncrementTick+0x16c>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	4a0d      	ldr	r2, [pc, #52]	; (800a1f0 <xTaskIncrementTick+0x16c>)
 800a1bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a1be:	697b      	ldr	r3, [r7, #20]
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	24000f40 	.word	0x24000f40
 800a1cc:	24000f1c 	.word	0x24000f1c
 800a1d0:	24000ed0 	.word	0x24000ed0
 800a1d4:	24000ed4 	.word	0x24000ed4
 800a1d8:	24000f30 	.word	0x24000f30
 800a1dc:	24000f38 	.word	0x24000f38
 800a1e0:	24000f20 	.word	0x24000f20
 800a1e4:	24000e1c 	.word	0x24000e1c
 800a1e8:	24000e18 	.word	0x24000e18
 800a1ec:	24000f2c 	.word	0x24000f2c
 800a1f0:	24000f28 	.word	0x24000f28

0800a1f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a1fa:	4b29      	ldr	r3, [pc, #164]	; (800a2a0 <vTaskSwitchContext+0xac>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a202:	4b28      	ldr	r3, [pc, #160]	; (800a2a4 <vTaskSwitchContext+0xb0>)
 800a204:	2201      	movs	r2, #1
 800a206:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a208:	e044      	b.n	800a294 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a20a:	4b26      	ldr	r3, [pc, #152]	; (800a2a4 <vTaskSwitchContext+0xb0>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a210:	4b25      	ldr	r3, [pc, #148]	; (800a2a8 <vTaskSwitchContext+0xb4>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	fab3 f383 	clz	r3, r3
 800a21c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a21e:	7afb      	ldrb	r3, [r7, #11]
 800a220:	f1c3 031f 	rsb	r3, r3, #31
 800a224:	617b      	str	r3, [r7, #20]
 800a226:	4921      	ldr	r1, [pc, #132]	; (800a2ac <vTaskSwitchContext+0xb8>)
 800a228:	697a      	ldr	r2, [r7, #20]
 800a22a:	4613      	mov	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	440b      	add	r3, r1
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10a      	bne.n	800a250 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	607b      	str	r3, [r7, #4]
}
 800a24c:	bf00      	nop
 800a24e:	e7fe      	b.n	800a24e <vTaskSwitchContext+0x5a>
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	4613      	mov	r3, r2
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	4413      	add	r3, r2
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	4a14      	ldr	r2, [pc, #80]	; (800a2ac <vTaskSwitchContext+0xb8>)
 800a25c:	4413      	add	r3, r2
 800a25e:	613b      	str	r3, [r7, #16]
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	605a      	str	r2, [r3, #4]
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	3308      	adds	r3, #8
 800a272:	429a      	cmp	r2, r3
 800a274:	d104      	bne.n	800a280 <vTaskSwitchContext+0x8c>
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	605a      	str	r2, [r3, #4]
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	4a0a      	ldr	r2, [pc, #40]	; (800a2b0 <vTaskSwitchContext+0xbc>)
 800a288:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a28a:	4b09      	ldr	r3, [pc, #36]	; (800a2b0 <vTaskSwitchContext+0xbc>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	334c      	adds	r3, #76	; 0x4c
 800a290:	4a08      	ldr	r2, [pc, #32]	; (800a2b4 <vTaskSwitchContext+0xc0>)
 800a292:	6013      	str	r3, [r2, #0]
}
 800a294:	bf00      	nop
 800a296:	371c      	adds	r7, #28
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	24000f40 	.word	0x24000f40
 800a2a4:	24000f2c 	.word	0x24000f2c
 800a2a8:	24000f20 	.word	0x24000f20
 800a2ac:	24000e1c 	.word	0x24000e1c
 800a2b0:	24000e18 	.word	0x24000e18
 800a2b4:	24000014 	.word	0x24000014

0800a2b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d10a      	bne.n	800a2de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	60fb      	str	r3, [r7, #12]
}
 800a2da:	bf00      	nop
 800a2dc:	e7fe      	b.n	800a2dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2de:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <vTaskPlaceOnEventList+0x44>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3318      	adds	r3, #24
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f7fe fe78 	bl	8008fdc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	6838      	ldr	r0, [r7, #0]
 800a2f0:	f000 fa96 	bl	800a820 <prvAddCurrentTaskToDelayedList>
}
 800a2f4:	bf00      	nop
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	24000e18 	.word	0x24000e18

0800a300 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10a      	bne.n	800a328 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	617b      	str	r3, [r7, #20]
}
 800a324:	bf00      	nop
 800a326:	e7fe      	b.n	800a326 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a328:	4b0a      	ldr	r3, [pc, #40]	; (800a354 <vTaskPlaceOnEventListRestricted+0x54>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3318      	adds	r3, #24
 800a32e:	4619      	mov	r1, r3
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7fe fe2f 	bl	8008f94 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a33c:	f04f 33ff 	mov.w	r3, #4294967295
 800a340:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a342:	6879      	ldr	r1, [r7, #4]
 800a344:	68b8      	ldr	r0, [r7, #8]
 800a346:	f000 fa6b 	bl	800a820 <prvAddCurrentTaskToDelayedList>
	}
 800a34a:	bf00      	nop
 800a34c:	3718      	adds	r7, #24
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	24000e18 	.word	0x24000e18

0800a358 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	60fb      	str	r3, [r7, #12]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	3318      	adds	r3, #24
 800a388:	4618      	mov	r0, r3
 800a38a:	f7fe fe60 	bl	800904e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a38e:	4b1d      	ldr	r3, [pc, #116]	; (800a404 <xTaskRemoveFromEventList+0xac>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d11c      	bne.n	800a3d0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	3304      	adds	r3, #4
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7fe fe57 	bl	800904e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	409a      	lsls	r2, r3
 800a3a8:	4b17      	ldr	r3, [pc, #92]	; (800a408 <xTaskRemoveFromEventList+0xb0>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	4a16      	ldr	r2, [pc, #88]	; (800a408 <xTaskRemoveFromEventList+0xb0>)
 800a3b0:	6013      	str	r3, [r2, #0]
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	4413      	add	r3, r2
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	4a13      	ldr	r2, [pc, #76]	; (800a40c <xTaskRemoveFromEventList+0xb4>)
 800a3c0:	441a      	add	r2, r3
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	f7fe fde3 	bl	8008f94 <vListInsertEnd>
 800a3ce:	e005      	b.n	800a3dc <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	3318      	adds	r3, #24
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	480e      	ldr	r0, [pc, #56]	; (800a410 <xTaskRemoveFromEventList+0xb8>)
 800a3d8:	f7fe fddc 	bl	8008f94 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3e0:	4b0c      	ldr	r3, [pc, #48]	; (800a414 <xTaskRemoveFromEventList+0xbc>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d905      	bls.n	800a3f6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a3ee:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <xTaskRemoveFromEventList+0xc0>)
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	e001      	b.n	800a3fa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a3fa:	697b      	ldr	r3, [r7, #20]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	24000f40 	.word	0x24000f40
 800a408:	24000f20 	.word	0x24000f20
 800a40c:	24000e1c 	.word	0x24000e1c
 800a410:	24000ed8 	.word	0x24000ed8
 800a414:	24000e18 	.word	0x24000e18
 800a418:	24000f2c 	.word	0x24000f2c

0800a41c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a424:	4b06      	ldr	r3, [pc, #24]	; (800a440 <vTaskInternalSetTimeOutState+0x24>)
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a42c:	4b05      	ldr	r3, [pc, #20]	; (800a444 <vTaskInternalSetTimeOutState+0x28>)
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	605a      	str	r2, [r3, #4]
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	24000f30 	.word	0x24000f30
 800a444:	24000f1c 	.word	0x24000f1c

0800a448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b088      	sub	sp, #32
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10a      	bne.n	800a46e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	613b      	str	r3, [r7, #16]
}
 800a46a:	bf00      	nop
 800a46c:	e7fe      	b.n	800a46c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10a      	bne.n	800a48a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	60fb      	str	r3, [r7, #12]
}
 800a486:	bf00      	nop
 800a488:	e7fe      	b.n	800a488 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a48a:	f000 fe8b 	bl	800b1a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a48e:	4b1d      	ldr	r3, [pc, #116]	; (800a504 <xTaskCheckForTimeOut+0xbc>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	69ba      	ldr	r2, [r7, #24]
 800a49a:	1ad3      	subs	r3, r2, r3
 800a49c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a6:	d102      	bne.n	800a4ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	61fb      	str	r3, [r7, #28]
 800a4ac:	e023      	b.n	800a4f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	4b15      	ldr	r3, [pc, #84]	; (800a508 <xTaskCheckForTimeOut+0xc0>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d007      	beq.n	800a4ca <xTaskCheckForTimeOut+0x82>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	69ba      	ldr	r2, [r7, #24]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d302      	bcc.n	800a4ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	61fb      	str	r3, [r7, #28]
 800a4c8:	e015      	b.n	800a4f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d20b      	bcs.n	800a4ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	1ad2      	subs	r2, r2, r3
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f7ff ff9b 	bl	800a41c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61fb      	str	r3, [r7, #28]
 800a4ea:	e004      	b.n	800a4f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a4f6:	f000 fe85 	bl	800b204 <vPortExitCritical>

	return xReturn;
 800a4fa:	69fb      	ldr	r3, [r7, #28]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3720      	adds	r7, #32
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	24000f1c 	.word	0x24000f1c
 800a508:	24000f30 	.word	0x24000f30

0800a50c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a510:	4b03      	ldr	r3, [pc, #12]	; (800a520 <vTaskMissedYield+0x14>)
 800a512:	2201      	movs	r2, #1
 800a514:	601a      	str	r2, [r3, #0]
}
 800a516:	bf00      	nop
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr
 800a520:	24000f2c 	.word	0x24000f2c

0800a524 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a52c:	f000 f852 	bl	800a5d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a530:	4b06      	ldr	r3, [pc, #24]	; (800a54c <prvIdleTask+0x28>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2b01      	cmp	r3, #1
 800a536:	d9f9      	bls.n	800a52c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a538:	4b05      	ldr	r3, [pc, #20]	; (800a550 <prvIdleTask+0x2c>)
 800a53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a53e:	601a      	str	r2, [r3, #0]
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a548:	e7f0      	b.n	800a52c <prvIdleTask+0x8>
 800a54a:	bf00      	nop
 800a54c:	24000e1c 	.word	0x24000e1c
 800a550:	e000ed04 	.word	0xe000ed04

0800a554 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a55a:	2300      	movs	r3, #0
 800a55c:	607b      	str	r3, [r7, #4]
 800a55e:	e00c      	b.n	800a57a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	4613      	mov	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4a12      	ldr	r2, [pc, #72]	; (800a5b4 <prvInitialiseTaskLists+0x60>)
 800a56c:	4413      	add	r3, r2
 800a56e:	4618      	mov	r0, r3
 800a570:	f7fe fce3 	bl	8008f3a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	3301      	adds	r3, #1
 800a578:	607b      	str	r3, [r7, #4]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b06      	cmp	r3, #6
 800a57e:	d9ef      	bls.n	800a560 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a580:	480d      	ldr	r0, [pc, #52]	; (800a5b8 <prvInitialiseTaskLists+0x64>)
 800a582:	f7fe fcda 	bl	8008f3a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a586:	480d      	ldr	r0, [pc, #52]	; (800a5bc <prvInitialiseTaskLists+0x68>)
 800a588:	f7fe fcd7 	bl	8008f3a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a58c:	480c      	ldr	r0, [pc, #48]	; (800a5c0 <prvInitialiseTaskLists+0x6c>)
 800a58e:	f7fe fcd4 	bl	8008f3a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a592:	480c      	ldr	r0, [pc, #48]	; (800a5c4 <prvInitialiseTaskLists+0x70>)
 800a594:	f7fe fcd1 	bl	8008f3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a598:	480b      	ldr	r0, [pc, #44]	; (800a5c8 <prvInitialiseTaskLists+0x74>)
 800a59a:	f7fe fcce 	bl	8008f3a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a59e:	4b0b      	ldr	r3, [pc, #44]	; (800a5cc <prvInitialiseTaskLists+0x78>)
 800a5a0:	4a05      	ldr	r2, [pc, #20]	; (800a5b8 <prvInitialiseTaskLists+0x64>)
 800a5a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5a4:	4b0a      	ldr	r3, [pc, #40]	; (800a5d0 <prvInitialiseTaskLists+0x7c>)
 800a5a6:	4a05      	ldr	r2, [pc, #20]	; (800a5bc <prvInitialiseTaskLists+0x68>)
 800a5a8:	601a      	str	r2, [r3, #0]
}
 800a5aa:	bf00      	nop
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	24000e1c 	.word	0x24000e1c
 800a5b8:	24000ea8 	.word	0x24000ea8
 800a5bc:	24000ebc 	.word	0x24000ebc
 800a5c0:	24000ed8 	.word	0x24000ed8
 800a5c4:	24000eec 	.word	0x24000eec
 800a5c8:	24000f04 	.word	0x24000f04
 800a5cc:	24000ed0 	.word	0x24000ed0
 800a5d0:	24000ed4 	.word	0x24000ed4

0800a5d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5da:	e019      	b.n	800a610 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a5dc:	f000 fde2 	bl	800b1a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5e0:	4b10      	ldr	r3, [pc, #64]	; (800a624 <prvCheckTasksWaitingTermination+0x50>)
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe fd2e 	bl	800904e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <prvCheckTasksWaitingTermination+0x54>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	4a0b      	ldr	r2, [pc, #44]	; (800a628 <prvCheckTasksWaitingTermination+0x54>)
 800a5fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5fc:	4b0b      	ldr	r3, [pc, #44]	; (800a62c <prvCheckTasksWaitingTermination+0x58>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	3b01      	subs	r3, #1
 800a602:	4a0a      	ldr	r2, [pc, #40]	; (800a62c <prvCheckTasksWaitingTermination+0x58>)
 800a604:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a606:	f000 fdfd 	bl	800b204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 f810 	bl	800a630 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a610:	4b06      	ldr	r3, [pc, #24]	; (800a62c <prvCheckTasksWaitingTermination+0x58>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d1e1      	bne.n	800a5dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a618:	bf00      	nop
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	24000eec 	.word	0x24000eec
 800a628:	24000f18 	.word	0x24000f18
 800a62c:	24000f00 	.word	0x24000f00

0800a630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	334c      	adds	r3, #76	; 0x4c
 800a63c:	4618      	mov	r0, r3
 800a63e:	f001 f907 	bl	800b850 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d108      	bne.n	800a65e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a650:	4618      	mov	r0, r3
 800a652:	f000 ff95 	bl	800b580 <vPortFree>
				vPortFree( pxTCB );
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 ff92 	bl	800b580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a65c:	e018      	b.n	800a690 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a664:	2b01      	cmp	r3, #1
 800a666:	d103      	bne.n	800a670 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 ff89 	bl	800b580 <vPortFree>
	}
 800a66e:	e00f      	b.n	800a690 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a676:	2b02      	cmp	r3, #2
 800a678:	d00a      	beq.n	800a690 <prvDeleteTCB+0x60>
	__asm volatile
 800a67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	60fb      	str	r3, [r7, #12]
}
 800a68c:	bf00      	nop
 800a68e:	e7fe      	b.n	800a68e <prvDeleteTCB+0x5e>
	}
 800a690:	bf00      	nop
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a69e:	4b0c      	ldr	r3, [pc, #48]	; (800a6d0 <prvResetNextTaskUnblockTime+0x38>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d104      	bne.n	800a6b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a6a8:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <prvResetNextTaskUnblockTime+0x3c>)
 800a6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a6b0:	e008      	b.n	800a6c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6b2:	4b07      	ldr	r3, [pc, #28]	; (800a6d0 <prvResetNextTaskUnblockTime+0x38>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	4a04      	ldr	r2, [pc, #16]	; (800a6d4 <prvResetNextTaskUnblockTime+0x3c>)
 800a6c2:	6013      	str	r3, [r2, #0]
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	24000ed0 	.word	0x24000ed0
 800a6d4:	24000f38 	.word	0x24000f38

0800a6d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a6de:	4b0b      	ldr	r3, [pc, #44]	; (800a70c <xTaskGetSchedulerState+0x34>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d102      	bne.n	800a6ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	607b      	str	r3, [r7, #4]
 800a6ea:	e008      	b.n	800a6fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ec:	4b08      	ldr	r3, [pc, #32]	; (800a710 <xTaskGetSchedulerState+0x38>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	607b      	str	r3, [r7, #4]
 800a6f8:	e001      	b.n	800a6fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6fe:	687b      	ldr	r3, [r7, #4]
	}
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr
 800a70c:	24000f24 	.word	0x24000f24
 800a710:	24000f40 	.word	0x24000f40

0800a714 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a720:	2300      	movs	r3, #0
 800a722:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d06e      	beq.n	800a808 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a72a:	4b3a      	ldr	r3, [pc, #232]	; (800a814 <xTaskPriorityDisinherit+0x100>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	693a      	ldr	r2, [r7, #16]
 800a730:	429a      	cmp	r2, r3
 800a732:	d00a      	beq.n	800a74a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	60fb      	str	r3, [r7, #12]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d10a      	bne.n	800a768 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a756:	f383 8811 	msr	BASEPRI, r3
 800a75a:	f3bf 8f6f 	isb	sy
 800a75e:	f3bf 8f4f 	dsb	sy
 800a762:	60bb      	str	r3, [r7, #8]
}
 800a764:	bf00      	nop
 800a766:	e7fe      	b.n	800a766 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a76c:	1e5a      	subs	r2, r3, #1
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d044      	beq.n	800a808 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a782:	2b00      	cmp	r3, #0
 800a784:	d140      	bne.n	800a808 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	3304      	adds	r3, #4
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fe fc5f 	bl	800904e <uxListRemove>
 800a790:	4603      	mov	r3, r0
 800a792:	2b00      	cmp	r3, #0
 800a794:	d115      	bne.n	800a7c2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a79a:	491f      	ldr	r1, [pc, #124]	; (800a818 <xTaskPriorityDisinherit+0x104>)
 800a79c:	4613      	mov	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	440b      	add	r3, r1
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10a      	bne.n	800a7c2 <xTaskPriorityDisinherit+0xae>
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b6:	43da      	mvns	r2, r3
 800a7b8:	4b18      	ldr	r3, [pc, #96]	; (800a81c <xTaskPriorityDisinherit+0x108>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4013      	ands	r3, r2
 800a7be:	4a17      	ldr	r2, [pc, #92]	; (800a81c <xTaskPriorityDisinherit+0x108>)
 800a7c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ce:	f1c3 0207 	rsb	r2, r3, #7
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7da:	2201      	movs	r2, #1
 800a7dc:	409a      	lsls	r2, r3
 800a7de:	4b0f      	ldr	r3, [pc, #60]	; (800a81c <xTaskPriorityDisinherit+0x108>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	4a0d      	ldr	r2, [pc, #52]	; (800a81c <xTaskPriorityDisinherit+0x108>)
 800a7e6:	6013      	str	r3, [r2, #0]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	009b      	lsls	r3, r3, #2
 800a7f0:	4413      	add	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4a08      	ldr	r2, [pc, #32]	; (800a818 <xTaskPriorityDisinherit+0x104>)
 800a7f6:	441a      	add	r2, r3
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4610      	mov	r0, r2
 800a800:	f7fe fbc8 	bl	8008f94 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a804:	2301      	movs	r3, #1
 800a806:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a808:	697b      	ldr	r3, [r7, #20]
	}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	24000e18 	.word	0x24000e18
 800a818:	24000e1c 	.word	0x24000e1c
 800a81c:	24000f20 	.word	0x24000f20

0800a820 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a82a:	4b29      	ldr	r3, [pc, #164]	; (800a8d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a830:	4b28      	ldr	r3, [pc, #160]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	3304      	adds	r3, #4
 800a836:	4618      	mov	r0, r3
 800a838:	f7fe fc09 	bl	800904e <uxListRemove>
 800a83c:	4603      	mov	r3, r0
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d10b      	bne.n	800a85a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a842:	4b24      	ldr	r3, [pc, #144]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a848:	2201      	movs	r2, #1
 800a84a:	fa02 f303 	lsl.w	r3, r2, r3
 800a84e:	43da      	mvns	r2, r3
 800a850:	4b21      	ldr	r3, [pc, #132]	; (800a8d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4013      	ands	r3, r2
 800a856:	4a20      	ldr	r2, [pc, #128]	; (800a8d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a858:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a860:	d10a      	bne.n	800a878 <prvAddCurrentTaskToDelayedList+0x58>
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d007      	beq.n	800a878 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a868:	4b1a      	ldr	r3, [pc, #104]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3304      	adds	r3, #4
 800a86e:	4619      	mov	r1, r3
 800a870:	481a      	ldr	r0, [pc, #104]	; (800a8dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a872:	f7fe fb8f 	bl	8008f94 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a876:	e026      	b.n	800a8c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a878:	68fa      	ldr	r2, [r7, #12]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4413      	add	r3, r2
 800a87e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a880:	4b14      	ldr	r3, [pc, #80]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d209      	bcs.n	800a8a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a890:	4b13      	ldr	r3, [pc, #76]	; (800a8e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	4b0f      	ldr	r3, [pc, #60]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3304      	adds	r3, #4
 800a89a:	4619      	mov	r1, r3
 800a89c:	4610      	mov	r0, r2
 800a89e:	f7fe fb9d 	bl	8008fdc <vListInsert>
}
 800a8a2:	e010      	b.n	800a8c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8a4:	4b0f      	ldr	r3, [pc, #60]	; (800a8e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	4b0a      	ldr	r3, [pc, #40]	; (800a8d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	f7fe fb93 	bl	8008fdc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8b6:	4b0c      	ldr	r3, [pc, #48]	; (800a8e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d202      	bcs.n	800a8c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a8c0:	4a09      	ldr	r2, [pc, #36]	; (800a8e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	6013      	str	r3, [r2, #0]
}
 800a8c6:	bf00      	nop
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	24000f1c 	.word	0x24000f1c
 800a8d4:	24000e18 	.word	0x24000e18
 800a8d8:	24000f20 	.word	0x24000f20
 800a8dc:	24000f04 	.word	0x24000f04
 800a8e0:	24000ed4 	.word	0x24000ed4
 800a8e4:	24000ed0 	.word	0x24000ed0
 800a8e8:	24000f38 	.word	0x24000f38

0800a8ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08a      	sub	sp, #40	; 0x28
 800a8f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a8f6:	f000 faeb 	bl	800aed0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a8fa:	4b1c      	ldr	r3, [pc, #112]	; (800a96c <xTimerCreateTimerTask+0x80>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d021      	beq.n	800a946 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a902:	2300      	movs	r3, #0
 800a904:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a906:	2300      	movs	r3, #0
 800a908:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a90a:	1d3a      	adds	r2, r7, #4
 800a90c:	f107 0108 	add.w	r1, r7, #8
 800a910:	f107 030c 	add.w	r3, r7, #12
 800a914:	4618      	mov	r0, r3
 800a916:	f7f5 fe7f 	bl	8000618 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a91a:	6879      	ldr	r1, [r7, #4]
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	9202      	str	r2, [sp, #8]
 800a922:	9301      	str	r3, [sp, #4]
 800a924:	2302      	movs	r3, #2
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	2300      	movs	r3, #0
 800a92a:	460a      	mov	r2, r1
 800a92c:	4910      	ldr	r1, [pc, #64]	; (800a970 <xTimerCreateTimerTask+0x84>)
 800a92e:	4811      	ldr	r0, [pc, #68]	; (800a974 <xTimerCreateTimerTask+0x88>)
 800a930:	f7ff f8a0 	bl	8009a74 <xTaskCreateStatic>
 800a934:	4603      	mov	r3, r0
 800a936:	4a10      	ldr	r2, [pc, #64]	; (800a978 <xTimerCreateTimerTask+0x8c>)
 800a938:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a93a:	4b0f      	ldr	r3, [pc, #60]	; (800a978 <xTimerCreateTimerTask+0x8c>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a942:	2301      	movs	r3, #1
 800a944:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10a      	bne.n	800a962 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a94c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	613b      	str	r3, [r7, #16]
}
 800a95e:	bf00      	nop
 800a960:	e7fe      	b.n	800a960 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a962:	697b      	ldr	r3, [r7, #20]
}
 800a964:	4618      	mov	r0, r3
 800a966:	3718      	adds	r7, #24
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	24000f74 	.word	0x24000f74
 800a970:	0800ba28 	.word	0x0800ba28
 800a974:	0800aab1 	.word	0x0800aab1
 800a978:	24000f78 	.word	0x24000f78

0800a97c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08a      	sub	sp, #40	; 0x28
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a98a:	2300      	movs	r3, #0
 800a98c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10a      	bne.n	800a9aa <xTimerGenericCommand+0x2e>
	__asm volatile
 800a994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a998:	f383 8811 	msr	BASEPRI, r3
 800a99c:	f3bf 8f6f 	isb	sy
 800a9a0:	f3bf 8f4f 	dsb	sy
 800a9a4:	623b      	str	r3, [r7, #32]
}
 800a9a6:	bf00      	nop
 800a9a8:	e7fe      	b.n	800a9a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a9aa:	4b1a      	ldr	r3, [pc, #104]	; (800aa14 <xTimerGenericCommand+0x98>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d02a      	beq.n	800aa08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b05      	cmp	r3, #5
 800a9c2:	dc18      	bgt.n	800a9f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a9c4:	f7ff fe88 	bl	800a6d8 <xTaskGetSchedulerState>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d109      	bne.n	800a9e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a9ce:	4b11      	ldr	r3, [pc, #68]	; (800aa14 <xTimerGenericCommand+0x98>)
 800a9d0:	6818      	ldr	r0, [r3, #0]
 800a9d2:	f107 0114 	add.w	r1, r7, #20
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a9da:	f7fe fc63 	bl	80092a4 <xQueueGenericSend>
 800a9de:	6278      	str	r0, [r7, #36]	; 0x24
 800a9e0:	e012      	b.n	800aa08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a9e2:	4b0c      	ldr	r3, [pc, #48]	; (800aa14 <xTimerGenericCommand+0x98>)
 800a9e4:	6818      	ldr	r0, [r3, #0]
 800a9e6:	f107 0114 	add.w	r1, r7, #20
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f7fe fc59 	bl	80092a4 <xQueueGenericSend>
 800a9f2:	6278      	str	r0, [r7, #36]	; 0x24
 800a9f4:	e008      	b.n	800aa08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a9f6:	4b07      	ldr	r3, [pc, #28]	; (800aa14 <xTimerGenericCommand+0x98>)
 800a9f8:	6818      	ldr	r0, [r3, #0]
 800a9fa:	f107 0114 	add.w	r1, r7, #20
 800a9fe:	2300      	movs	r3, #0
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	f7fe fd4d 	bl	80094a0 <xQueueGenericSendFromISR>
 800aa06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aa08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3728      	adds	r7, #40	; 0x28
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	24000f74 	.word	0x24000f74

0800aa18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b088      	sub	sp, #32
 800aa1c:	af02      	add	r7, sp, #8
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa22:	4b22      	ldr	r3, [pc, #136]	; (800aaac <prvProcessExpiredTimer+0x94>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	68db      	ldr	r3, [r3, #12]
 800aa2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	3304      	adds	r3, #4
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe fb0c 	bl	800904e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aa3c:	f003 0304 	and.w	r3, r3, #4
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d022      	beq.n	800aa8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	699a      	ldr	r2, [r3, #24]
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	18d1      	adds	r1, r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	6978      	ldr	r0, [r7, #20]
 800aa52:	f000 f8d1 	bl	800abf8 <prvInsertTimerInActiveList>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d01f      	beq.n	800aa9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	2300      	movs	r3, #0
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	2100      	movs	r1, #0
 800aa66:	6978      	ldr	r0, [r7, #20]
 800aa68:	f7ff ff88 	bl	800a97c <xTimerGenericCommand>
 800aa6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d113      	bne.n	800aa9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	60fb      	str	r3, [r7, #12]
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800aa90:	f023 0301 	bic.w	r3, r3, #1
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa9c:	697b      	ldr	r3, [r7, #20]
 800aa9e:	6a1b      	ldr	r3, [r3, #32]
 800aaa0:	6978      	ldr	r0, [r7, #20]
 800aaa2:	4798      	blx	r3
}
 800aaa4:	bf00      	nop
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	24000f6c 	.word	0x24000f6c

0800aab0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aab8:	f107 0308 	add.w	r3, r7, #8
 800aabc:	4618      	mov	r0, r3
 800aabe:	f000 f857 	bl	800ab70 <prvGetNextExpireTime>
 800aac2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4619      	mov	r1, r3
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 f803 	bl	800aad4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800aace:	f000 f8d5 	bl	800ac7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aad2:	e7f1      	b.n	800aab8 <prvTimerTask+0x8>

0800aad4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800aade:	f7ff fa17 	bl	8009f10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aae2:	f107 0308 	add.w	r3, r7, #8
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 f866 	bl	800abb8 <prvSampleTimeNow>
 800aaec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d130      	bne.n	800ab56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10a      	bne.n	800ab10 <prvProcessTimerOrBlockTask+0x3c>
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d806      	bhi.n	800ab10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ab02:	f7ff fa13 	bl	8009f2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ab06:	68f9      	ldr	r1, [r7, #12]
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7ff ff85 	bl	800aa18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ab0e:	e024      	b.n	800ab5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d008      	beq.n	800ab28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ab16:	4b13      	ldr	r3, [pc, #76]	; (800ab64 <prvProcessTimerOrBlockTask+0x90>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d101      	bne.n	800ab24 <prvProcessTimerOrBlockTask+0x50>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e000      	b.n	800ab26 <prvProcessTimerOrBlockTask+0x52>
 800ab24:	2300      	movs	r3, #0
 800ab26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ab28:	4b0f      	ldr	r3, [pc, #60]	; (800ab68 <prvProcessTimerOrBlockTask+0x94>)
 800ab2a:	6818      	ldr	r0, [r3, #0]
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	1ad3      	subs	r3, r2, r3
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	4619      	mov	r1, r3
 800ab36:	f7fe ff69 	bl	8009a0c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ab3a:	f7ff f9f7 	bl	8009f2c <xTaskResumeAll>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10a      	bne.n	800ab5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ab44:	4b09      	ldr	r3, [pc, #36]	; (800ab6c <prvProcessTimerOrBlockTask+0x98>)
 800ab46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	f3bf 8f6f 	isb	sy
}
 800ab54:	e001      	b.n	800ab5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ab56:	f7ff f9e9 	bl	8009f2c <xTaskResumeAll>
}
 800ab5a:	bf00      	nop
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	24000f70 	.word	0x24000f70
 800ab68:	24000f74 	.word	0x24000f74
 800ab6c:	e000ed04 	.word	0xe000ed04

0800ab70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ab78:	4b0e      	ldr	r3, [pc, #56]	; (800abb4 <prvGetNextExpireTime+0x44>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <prvGetNextExpireTime+0x16>
 800ab82:	2201      	movs	r2, #1
 800ab84:	e000      	b.n	800ab88 <prvGetNextExpireTime+0x18>
 800ab86:	2200      	movs	r2, #0
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d105      	bne.n	800aba0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab94:	4b07      	ldr	r3, [pc, #28]	; (800abb4 <prvGetNextExpireTime+0x44>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68db      	ldr	r3, [r3, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	60fb      	str	r3, [r7, #12]
 800ab9e:	e001      	b.n	800aba4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aba0:	2300      	movs	r3, #0
 800aba2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aba4:	68fb      	ldr	r3, [r7, #12]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3714      	adds	r7, #20
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	24000f6c 	.word	0x24000f6c

0800abb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800abc0:	f7ff fa50 	bl	800a064 <xTaskGetTickCount>
 800abc4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800abc6:	4b0b      	ldr	r3, [pc, #44]	; (800abf4 <prvSampleTimeNow+0x3c>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d205      	bcs.n	800abdc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800abd0:	f000 f91a 	bl	800ae08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	601a      	str	r2, [r3, #0]
 800abda:	e002      	b.n	800abe2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800abe2:	4a04      	ldr	r2, [pc, #16]	; (800abf4 <prvSampleTimeNow+0x3c>)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800abe8:	68fb      	ldr	r3, [r7, #12]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3710      	adds	r7, #16
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	24000f7c 	.word	0x24000f7c

0800abf8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b086      	sub	sp, #24
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
 800ac04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ac06:	2300      	movs	r3, #0
 800ac08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	68ba      	ldr	r2, [r7, #8]
 800ac0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ac16:	68ba      	ldr	r2, [r7, #8]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d812      	bhi.n	800ac44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	1ad2      	subs	r2, r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d302      	bcc.n	800ac32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	617b      	str	r3, [r7, #20]
 800ac30:	e01b      	b.n	800ac6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ac32:	4b10      	ldr	r3, [pc, #64]	; (800ac74 <prvInsertTimerInActiveList+0x7c>)
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3304      	adds	r3, #4
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	f7fe f9cd 	bl	8008fdc <vListInsert>
 800ac42:	e012      	b.n	800ac6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d206      	bcs.n	800ac5a <prvInsertTimerInActiveList+0x62>
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d302      	bcc.n	800ac5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ac54:	2301      	movs	r3, #1
 800ac56:	617b      	str	r3, [r7, #20]
 800ac58:	e007      	b.n	800ac6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac5a:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <prvInsertTimerInActiveList+0x80>)
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	3304      	adds	r3, #4
 800ac62:	4619      	mov	r1, r3
 800ac64:	4610      	mov	r0, r2
 800ac66:	f7fe f9b9 	bl	8008fdc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ac6a:	697b      	ldr	r3, [r7, #20]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3718      	adds	r7, #24
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	24000f70 	.word	0x24000f70
 800ac78:	24000f6c 	.word	0x24000f6c

0800ac7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08c      	sub	sp, #48	; 0x30
 800ac80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ac82:	e0ae      	b.n	800ade2 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f2c0 80aa 	blt.w	800ade0 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	695b      	ldr	r3, [r3, #20]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d004      	beq.n	800aca2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fe f9d6 	bl	800904e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aca2:	1d3b      	adds	r3, r7, #4
 800aca4:	4618      	mov	r0, r3
 800aca6:	f7ff ff87 	bl	800abb8 <prvSampleTimeNow>
 800acaa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	2b09      	cmp	r3, #9
 800acb0:	f200 8097 	bhi.w	800ade2 <prvProcessReceivedCommands+0x166>
 800acb4:	a201      	add	r2, pc, #4	; (adr r2, 800acbc <prvProcessReceivedCommands+0x40>)
 800acb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acba:	bf00      	nop
 800acbc:	0800ace5 	.word	0x0800ace5
 800acc0:	0800ace5 	.word	0x0800ace5
 800acc4:	0800ace5 	.word	0x0800ace5
 800acc8:	0800ad59 	.word	0x0800ad59
 800accc:	0800ad6d 	.word	0x0800ad6d
 800acd0:	0800adb7 	.word	0x0800adb7
 800acd4:	0800ace5 	.word	0x0800ace5
 800acd8:	0800ace5 	.word	0x0800ace5
 800acdc:	0800ad59 	.word	0x0800ad59
 800ace0:	0800ad6d 	.word	0x0800ad6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ace4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ace6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800acea:	f043 0301 	orr.w	r3, r3, #1
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfa:	699b      	ldr	r3, [r3, #24]
 800acfc:	18d1      	adds	r1, r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6a3a      	ldr	r2, [r7, #32]
 800ad02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad04:	f7ff ff78 	bl	800abf8 <prvInsertTimerInActiveList>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d069      	beq.n	800ade2 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad10:	6a1b      	ldr	r3, [r3, #32]
 800ad12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad1c:	f003 0304 	and.w	r3, r3, #4
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d05e      	beq.n	800ade2 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	441a      	add	r2, r3
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	2300      	movs	r3, #0
 800ad32:	2100      	movs	r1, #0
 800ad34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad36:	f7ff fe21 	bl	800a97c <xTimerGenericCommand>
 800ad3a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d14f      	bne.n	800ade2 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad46:	f383 8811 	msr	BASEPRI, r3
 800ad4a:	f3bf 8f6f 	isb	sy
 800ad4e:	f3bf 8f4f 	dsb	sy
 800ad52:	61bb      	str	r3, [r7, #24]
}
 800ad54:	bf00      	nop
 800ad56:	e7fe      	b.n	800ad56 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad5e:	f023 0301 	bic.w	r3, r3, #1
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800ad6a:	e03a      	b.n	800ade2 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ad72:	f043 0301 	orr.w	r3, r3, #1
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ad84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10a      	bne.n	800ada2 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	617b      	str	r3, [r7, #20]
}
 800ad9e:	bf00      	nop
 800ada0:	e7fe      	b.n	800ada0 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	699a      	ldr	r2, [r3, #24]
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	18d1      	adds	r1, r2, r3
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	6a3a      	ldr	r2, [r7, #32]
 800adae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adb0:	f7ff ff22 	bl	800abf8 <prvInsertTimerInActiveList>
					break;
 800adb4:	e015      	b.n	800ade2 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800adb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800adbc:	f003 0302 	and.w	r3, r3, #2
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d103      	bne.n	800adcc <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800adc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adc6:	f000 fbdb 	bl	800b580 <vPortFree>
 800adca:	e00a      	b.n	800ade2 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800adcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800add2:	f023 0301 	bic.w	r3, r3, #1
 800add6:	b2da      	uxtb	r2, r3
 800add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800adde:	e000      	b.n	800ade2 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ade0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ade2:	4b08      	ldr	r3, [pc, #32]	; (800ae04 <prvProcessReceivedCommands+0x188>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f107 0108 	add.w	r1, r7, #8
 800adea:	2200      	movs	r2, #0
 800adec:	4618      	mov	r0, r3
 800adee:	f7fe fbf3 	bl	80095d8 <xQueueReceive>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	f47f af45 	bne.w	800ac84 <prvProcessReceivedCommands+0x8>
	}
}
 800adfa:	bf00      	nop
 800adfc:	bf00      	nop
 800adfe:	3728      	adds	r7, #40	; 0x28
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	24000f74 	.word	0x24000f74

0800ae08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ae0e:	e048      	b.n	800aea2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae10:	4b2d      	ldr	r3, [pc, #180]	; (800aec8 <prvSwitchTimerLists+0xc0>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	68db      	ldr	r3, [r3, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae1a:	4b2b      	ldr	r3, [pc, #172]	; (800aec8 <prvSwitchTimerLists+0xc0>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	3304      	adds	r3, #4
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe f910 	bl	800904e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ae3c:	f003 0304 	and.w	r3, r3, #4
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d02e      	beq.n	800aea2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	699b      	ldr	r3, [r3, #24]
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ae4e:	68ba      	ldr	r2, [r7, #8]
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d90e      	bls.n	800ae74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae62:	4b19      	ldr	r3, [pc, #100]	; (800aec8 <prvSwitchTimerLists+0xc0>)
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	3304      	adds	r3, #4
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f7fe f8b5 	bl	8008fdc <vListInsert>
 800ae72:	e016      	b.n	800aea2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ae74:	2300      	movs	r3, #0
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	2300      	movs	r3, #0
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f7ff fd7c 	bl	800a97c <xTimerGenericCommand>
 800ae84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10a      	bne.n	800aea2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	603b      	str	r3, [r7, #0]
}
 800ae9e:	bf00      	nop
 800aea0:	e7fe      	b.n	800aea0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aea2:	4b09      	ldr	r3, [pc, #36]	; (800aec8 <prvSwitchTimerLists+0xc0>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1b1      	bne.n	800ae10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aeac:	4b06      	ldr	r3, [pc, #24]	; (800aec8 <prvSwitchTimerLists+0xc0>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aeb2:	4b06      	ldr	r3, [pc, #24]	; (800aecc <prvSwitchTimerLists+0xc4>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a04      	ldr	r2, [pc, #16]	; (800aec8 <prvSwitchTimerLists+0xc0>)
 800aeb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aeba:	4a04      	ldr	r2, [pc, #16]	; (800aecc <prvSwitchTimerLists+0xc4>)
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	6013      	str	r3, [r2, #0]
}
 800aec0:	bf00      	nop
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	24000f6c 	.word	0x24000f6c
 800aecc:	24000f70 	.word	0x24000f70

0800aed0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800aed6:	f000 f965 	bl	800b1a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800aeda:	4b15      	ldr	r3, [pc, #84]	; (800af30 <prvCheckForValidListAndQueue+0x60>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d120      	bne.n	800af24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800aee2:	4814      	ldr	r0, [pc, #80]	; (800af34 <prvCheckForValidListAndQueue+0x64>)
 800aee4:	f7fe f829 	bl	8008f3a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800aee8:	4813      	ldr	r0, [pc, #76]	; (800af38 <prvCheckForValidListAndQueue+0x68>)
 800aeea:	f7fe f826 	bl	8008f3a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800aeee:	4b13      	ldr	r3, [pc, #76]	; (800af3c <prvCheckForValidListAndQueue+0x6c>)
 800aef0:	4a10      	ldr	r2, [pc, #64]	; (800af34 <prvCheckForValidListAndQueue+0x64>)
 800aef2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aef4:	4b12      	ldr	r3, [pc, #72]	; (800af40 <prvCheckForValidListAndQueue+0x70>)
 800aef6:	4a10      	ldr	r2, [pc, #64]	; (800af38 <prvCheckForValidListAndQueue+0x68>)
 800aef8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aefa:	2300      	movs	r3, #0
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	4b11      	ldr	r3, [pc, #68]	; (800af44 <prvCheckForValidListAndQueue+0x74>)
 800af00:	4a11      	ldr	r2, [pc, #68]	; (800af48 <prvCheckForValidListAndQueue+0x78>)
 800af02:	210c      	movs	r1, #12
 800af04:	200a      	movs	r0, #10
 800af06:	f7fe f935 	bl	8009174 <xQueueGenericCreateStatic>
 800af0a:	4603      	mov	r3, r0
 800af0c:	4a08      	ldr	r2, [pc, #32]	; (800af30 <prvCheckForValidListAndQueue+0x60>)
 800af0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800af10:	4b07      	ldr	r3, [pc, #28]	; (800af30 <prvCheckForValidListAndQueue+0x60>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d005      	beq.n	800af24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800af18:	4b05      	ldr	r3, [pc, #20]	; (800af30 <prvCheckForValidListAndQueue+0x60>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	490b      	ldr	r1, [pc, #44]	; (800af4c <prvCheckForValidListAndQueue+0x7c>)
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fe fd4a 	bl	80099b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af24:	f000 f96e 	bl	800b204 <vPortExitCritical>
}
 800af28:	bf00      	nop
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	24000f74 	.word	0x24000f74
 800af34:	24000f44 	.word	0x24000f44
 800af38:	24000f58 	.word	0x24000f58
 800af3c:	24000f6c 	.word	0x24000f6c
 800af40:	24000f70 	.word	0x24000f70
 800af44:	24000ff8 	.word	0x24000ff8
 800af48:	24000f80 	.word	0x24000f80
 800af4c:	0800ba30 	.word	0x0800ba30

0800af50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	3b04      	subs	r3, #4
 800af60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800af68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3b04      	subs	r3, #4
 800af6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	f023 0201 	bic.w	r2, r3, #1
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3b04      	subs	r3, #4
 800af7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800af80:	4a0c      	ldr	r2, [pc, #48]	; (800afb4 <pxPortInitialiseStack+0x64>)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3b14      	subs	r3, #20
 800af8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	3b04      	subs	r3, #4
 800af96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f06f 0202 	mvn.w	r2, #2
 800af9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	3b20      	subs	r3, #32
 800afa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800afa6:	68fb      	ldr	r3, [r7, #12]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3714      	adds	r7, #20
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr
 800afb4:	0800afb9 	.word	0x0800afb9

0800afb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800afc2:	4b12      	ldr	r3, [pc, #72]	; (800b00c <prvTaskExitError+0x54>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afca:	d00a      	beq.n	800afe2 <prvTaskExitError+0x2a>
	__asm volatile
 800afcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd0:	f383 8811 	msr	BASEPRI, r3
 800afd4:	f3bf 8f6f 	isb	sy
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	60fb      	str	r3, [r7, #12]
}
 800afde:	bf00      	nop
 800afe0:	e7fe      	b.n	800afe0 <prvTaskExitError+0x28>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	60bb      	str	r3, [r7, #8]
}
 800aff4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aff6:	bf00      	nop
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0fc      	beq.n	800aff8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800affe:	bf00      	nop
 800b000:	bf00      	nop
 800b002:	3714      	adds	r7, #20
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr
 800b00c:	24000010 	.word	0x24000010

0800b010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b010:	4b07      	ldr	r3, [pc, #28]	; (800b030 <pxCurrentTCBConst2>)
 800b012:	6819      	ldr	r1, [r3, #0]
 800b014:	6808      	ldr	r0, [r1, #0]
 800b016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01a:	f380 8809 	msr	PSP, r0
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f04f 0000 	mov.w	r0, #0
 800b026:	f380 8811 	msr	BASEPRI, r0
 800b02a:	4770      	bx	lr
 800b02c:	f3af 8000 	nop.w

0800b030 <pxCurrentTCBConst2>:
 800b030:	24000e18 	.word	0x24000e18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop

0800b038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b038:	4808      	ldr	r0, [pc, #32]	; (800b05c <prvPortStartFirstTask+0x24>)
 800b03a:	6800      	ldr	r0, [r0, #0]
 800b03c:	6800      	ldr	r0, [r0, #0]
 800b03e:	f380 8808 	msr	MSP, r0
 800b042:	f04f 0000 	mov.w	r0, #0
 800b046:	f380 8814 	msr	CONTROL, r0
 800b04a:	b662      	cpsie	i
 800b04c:	b661      	cpsie	f
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	df00      	svc	0
 800b058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b05a:	bf00      	nop
 800b05c:	e000ed08 	.word	0xe000ed08

0800b060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b086      	sub	sp, #24
 800b064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b066:	4b46      	ldr	r3, [pc, #280]	; (800b180 <xPortStartScheduler+0x120>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a46      	ldr	r2, [pc, #280]	; (800b184 <xPortStartScheduler+0x124>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d10a      	bne.n	800b086 <xPortStartScheduler+0x26>
	__asm volatile
 800b070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	613b      	str	r3, [r7, #16]
}
 800b082:	bf00      	nop
 800b084:	e7fe      	b.n	800b084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b086:	4b3e      	ldr	r3, [pc, #248]	; (800b180 <xPortStartScheduler+0x120>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a3f      	ldr	r2, [pc, #252]	; (800b188 <xPortStartScheduler+0x128>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d10a      	bne.n	800b0a6 <xPortStartScheduler+0x46>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	60fb      	str	r3, [r7, #12]
}
 800b0a2:	bf00      	nop
 800b0a4:	e7fe      	b.n	800b0a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b0a6:	4b39      	ldr	r3, [pc, #228]	; (800b18c <xPortStartScheduler+0x12c>)
 800b0a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	22ff      	movs	r2, #255	; 0xff
 800b0b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b0c0:	78fb      	ldrb	r3, [r7, #3]
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b0c8:	b2da      	uxtb	r2, r3
 800b0ca:	4b31      	ldr	r3, [pc, #196]	; (800b190 <xPortStartScheduler+0x130>)
 800b0cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b0ce:	4b31      	ldr	r3, [pc, #196]	; (800b194 <xPortStartScheduler+0x134>)
 800b0d0:	2207      	movs	r2, #7
 800b0d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0d4:	e009      	b.n	800b0ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b0d6:	4b2f      	ldr	r3, [pc, #188]	; (800b194 <xPortStartScheduler+0x134>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	4a2d      	ldr	r2, [pc, #180]	; (800b194 <xPortStartScheduler+0x134>)
 800b0de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b0e0:	78fb      	ldrb	r3, [r7, #3]
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	005b      	lsls	r3, r3, #1
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b0ea:	78fb      	ldrb	r3, [r7, #3]
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0f2:	2b80      	cmp	r3, #128	; 0x80
 800b0f4:	d0ef      	beq.n	800b0d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b0f6:	4b27      	ldr	r3, [pc, #156]	; (800b194 <xPortStartScheduler+0x134>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f1c3 0307 	rsb	r3, r3, #7
 800b0fe:	2b04      	cmp	r3, #4
 800b100:	d00a      	beq.n	800b118 <xPortStartScheduler+0xb8>
	__asm volatile
 800b102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	60bb      	str	r3, [r7, #8]
}
 800b114:	bf00      	nop
 800b116:	e7fe      	b.n	800b116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b118:	4b1e      	ldr	r3, [pc, #120]	; (800b194 <xPortStartScheduler+0x134>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	021b      	lsls	r3, r3, #8
 800b11e:	4a1d      	ldr	r2, [pc, #116]	; (800b194 <xPortStartScheduler+0x134>)
 800b120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b122:	4b1c      	ldr	r3, [pc, #112]	; (800b194 <xPortStartScheduler+0x134>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b12a:	4a1a      	ldr	r2, [pc, #104]	; (800b194 <xPortStartScheduler+0x134>)
 800b12c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	b2da      	uxtb	r2, r3
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b136:	4b18      	ldr	r3, [pc, #96]	; (800b198 <xPortStartScheduler+0x138>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a17      	ldr	r2, [pc, #92]	; (800b198 <xPortStartScheduler+0x138>)
 800b13c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b142:	4b15      	ldr	r3, [pc, #84]	; (800b198 <xPortStartScheduler+0x138>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a14      	ldr	r2, [pc, #80]	; (800b198 <xPortStartScheduler+0x138>)
 800b148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b14c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b14e:	f000 f8dd 	bl	800b30c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b152:	4b12      	ldr	r3, [pc, #72]	; (800b19c <xPortStartScheduler+0x13c>)
 800b154:	2200      	movs	r2, #0
 800b156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b158:	f000 f8fc 	bl	800b354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b15c:	4b10      	ldr	r3, [pc, #64]	; (800b1a0 <xPortStartScheduler+0x140>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a0f      	ldr	r2, [pc, #60]	; (800b1a0 <xPortStartScheduler+0x140>)
 800b162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b168:	f7ff ff66 	bl	800b038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b16c:	f7ff f842 	bl	800a1f4 <vTaskSwitchContext>
	prvTaskExitError();
 800b170:	f7ff ff22 	bl	800afb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
 800b17e:	bf00      	nop
 800b180:	e000ed00 	.word	0xe000ed00
 800b184:	410fc271 	.word	0x410fc271
 800b188:	410fc270 	.word	0x410fc270
 800b18c:	e000e400 	.word	0xe000e400
 800b190:	24001040 	.word	0x24001040
 800b194:	24001044 	.word	0x24001044
 800b198:	e000ed20 	.word	0xe000ed20
 800b19c:	24000010 	.word	0x24000010
 800b1a0:	e000ef34 	.word	0xe000ef34

0800b1a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
	__asm volatile
 800b1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ae:	f383 8811 	msr	BASEPRI, r3
 800b1b2:	f3bf 8f6f 	isb	sy
 800b1b6:	f3bf 8f4f 	dsb	sy
 800b1ba:	607b      	str	r3, [r7, #4]
}
 800b1bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b1be:	4b0f      	ldr	r3, [pc, #60]	; (800b1fc <vPortEnterCritical+0x58>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	4a0d      	ldr	r2, [pc, #52]	; (800b1fc <vPortEnterCritical+0x58>)
 800b1c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b1c8:	4b0c      	ldr	r3, [pc, #48]	; (800b1fc <vPortEnterCritical+0x58>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d10f      	bne.n	800b1f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1d0:	4b0b      	ldr	r3, [pc, #44]	; (800b200 <vPortEnterCritical+0x5c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00a      	beq.n	800b1f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	603b      	str	r3, [r7, #0]
}
 800b1ec:	bf00      	nop
 800b1ee:	e7fe      	b.n	800b1ee <vPortEnterCritical+0x4a>
	}
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	24000010 	.word	0x24000010
 800b200:	e000ed04 	.word	0xe000ed04

0800b204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b20a:	4b12      	ldr	r3, [pc, #72]	; (800b254 <vPortExitCritical+0x50>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d10a      	bne.n	800b228 <vPortExitCritical+0x24>
	__asm volatile
 800b212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b216:	f383 8811 	msr	BASEPRI, r3
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	607b      	str	r3, [r7, #4]
}
 800b224:	bf00      	nop
 800b226:	e7fe      	b.n	800b226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b228:	4b0a      	ldr	r3, [pc, #40]	; (800b254 <vPortExitCritical+0x50>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	4a09      	ldr	r2, [pc, #36]	; (800b254 <vPortExitCritical+0x50>)
 800b230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b232:	4b08      	ldr	r3, [pc, #32]	; (800b254 <vPortExitCritical+0x50>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d105      	bne.n	800b246 <vPortExitCritical+0x42>
 800b23a:	2300      	movs	r3, #0
 800b23c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	f383 8811 	msr	BASEPRI, r3
}
 800b244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b246:	bf00      	nop
 800b248:	370c      	adds	r7, #12
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
 800b252:	bf00      	nop
 800b254:	24000010 	.word	0x24000010
	...

0800b260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b260:	f3ef 8009 	mrs	r0, PSP
 800b264:	f3bf 8f6f 	isb	sy
 800b268:	4b15      	ldr	r3, [pc, #84]	; (800b2c0 <pxCurrentTCBConst>)
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	f01e 0f10 	tst.w	lr, #16
 800b270:	bf08      	it	eq
 800b272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27a:	6010      	str	r0, [r2, #0]
 800b27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b280:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b284:	f380 8811 	msr	BASEPRI, r0
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f7fe ffb0 	bl	800a1f4 <vTaskSwitchContext>
 800b294:	f04f 0000 	mov.w	r0, #0
 800b298:	f380 8811 	msr	BASEPRI, r0
 800b29c:	bc09      	pop	{r0, r3}
 800b29e:	6819      	ldr	r1, [r3, #0]
 800b2a0:	6808      	ldr	r0, [r1, #0]
 800b2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a6:	f01e 0f10 	tst.w	lr, #16
 800b2aa:	bf08      	it	eq
 800b2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b2b0:	f380 8809 	msr	PSP, r0
 800b2b4:	f3bf 8f6f 	isb	sy
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	f3af 8000 	nop.w

0800b2c0 <pxCurrentTCBConst>:
 800b2c0:	24000e18 	.word	0x24000e18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b2c4:	bf00      	nop
 800b2c6:	bf00      	nop

0800b2c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	f383 8811 	msr	BASEPRI, r3
 800b2d6:	f3bf 8f6f 	isb	sy
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	607b      	str	r3, [r7, #4]
}
 800b2e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b2e2:	f7fe fecf 	bl	800a084 <xTaskIncrementTick>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d003      	beq.n	800b2f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b2ec:	4b06      	ldr	r3, [pc, #24]	; (800b308 <SysTick_Handler+0x40>)
 800b2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2f2:	601a      	str	r2, [r3, #0]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	f383 8811 	msr	BASEPRI, r3
}
 800b2fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b300:	bf00      	nop
 800b302:	3708      	adds	r7, #8
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	e000ed04 	.word	0xe000ed04

0800b30c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b30c:	b480      	push	{r7}
 800b30e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b310:	4b0b      	ldr	r3, [pc, #44]	; (800b340 <vPortSetupTimerInterrupt+0x34>)
 800b312:	2200      	movs	r2, #0
 800b314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b316:	4b0b      	ldr	r3, [pc, #44]	; (800b344 <vPortSetupTimerInterrupt+0x38>)
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b31c:	4b0a      	ldr	r3, [pc, #40]	; (800b348 <vPortSetupTimerInterrupt+0x3c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a0a      	ldr	r2, [pc, #40]	; (800b34c <vPortSetupTimerInterrupt+0x40>)
 800b322:	fba2 2303 	umull	r2, r3, r2, r3
 800b326:	099b      	lsrs	r3, r3, #6
 800b328:	4a09      	ldr	r2, [pc, #36]	; (800b350 <vPortSetupTimerInterrupt+0x44>)
 800b32a:	3b01      	subs	r3, #1
 800b32c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b32e:	4b04      	ldr	r3, [pc, #16]	; (800b340 <vPortSetupTimerInterrupt+0x34>)
 800b330:	2207      	movs	r2, #7
 800b332:	601a      	str	r2, [r3, #0]
}
 800b334:	bf00      	nop
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	e000e010 	.word	0xe000e010
 800b344:	e000e018 	.word	0xe000e018
 800b348:	24000000 	.word	0x24000000
 800b34c:	10624dd3 	.word	0x10624dd3
 800b350:	e000e014 	.word	0xe000e014

0800b354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b364 <vPortEnableVFP+0x10>
 800b358:	6801      	ldr	r1, [r0, #0]
 800b35a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b35e:	6001      	str	r1, [r0, #0]
 800b360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b362:	bf00      	nop
 800b364:	e000ed88 	.word	0xe000ed88

0800b368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b36e:	f3ef 8305 	mrs	r3, IPSR
 800b372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2b0f      	cmp	r3, #15
 800b378:	d914      	bls.n	800b3a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b37a:	4a17      	ldr	r2, [pc, #92]	; (800b3d8 <vPortValidateInterruptPriority+0x70>)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	4413      	add	r3, r2
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b384:	4b15      	ldr	r3, [pc, #84]	; (800b3dc <vPortValidateInterruptPriority+0x74>)
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	7afa      	ldrb	r2, [r7, #11]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d20a      	bcs.n	800b3a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	607b      	str	r3, [r7, #4]
}
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b3a4:	4b0e      	ldr	r3, [pc, #56]	; (800b3e0 <vPortValidateInterruptPriority+0x78>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b3ac:	4b0d      	ldr	r3, [pc, #52]	; (800b3e4 <vPortValidateInterruptPriority+0x7c>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d90a      	bls.n	800b3ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b8:	f383 8811 	msr	BASEPRI, r3
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	603b      	str	r3, [r7, #0]
}
 800b3c6:	bf00      	nop
 800b3c8:	e7fe      	b.n	800b3c8 <vPortValidateInterruptPriority+0x60>
	}
 800b3ca:	bf00      	nop
 800b3cc:	3714      	adds	r7, #20
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
 800b3d6:	bf00      	nop
 800b3d8:	e000e3f0 	.word	0xe000e3f0
 800b3dc:	24001040 	.word	0x24001040
 800b3e0:	e000ed0c 	.word	0xe000ed0c
 800b3e4:	24001044 	.word	0x24001044

0800b3e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08a      	sub	sp, #40	; 0x28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b3f4:	f7fe fd8c 	bl	8009f10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b3f8:	4b5b      	ldr	r3, [pc, #364]	; (800b568 <pvPortMalloc+0x180>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b400:	f000 f920 	bl	800b644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b404:	4b59      	ldr	r3, [pc, #356]	; (800b56c <pvPortMalloc+0x184>)
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4013      	ands	r3, r2
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f040 8093 	bne.w	800b538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d01d      	beq.n	800b454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b418:	2208      	movs	r2, #8
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4413      	add	r3, r2
 800b41e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f003 0307 	and.w	r3, r3, #7
 800b426:	2b00      	cmp	r3, #0
 800b428:	d014      	beq.n	800b454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f023 0307 	bic.w	r3, r3, #7
 800b430:	3308      	adds	r3, #8
 800b432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f003 0307 	and.w	r3, r3, #7
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00a      	beq.n	800b454 <pvPortMalloc+0x6c>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	617b      	str	r3, [r7, #20]
}
 800b450:	bf00      	nop
 800b452:	e7fe      	b.n	800b452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d06e      	beq.n	800b538 <pvPortMalloc+0x150>
 800b45a:	4b45      	ldr	r3, [pc, #276]	; (800b570 <pvPortMalloc+0x188>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	687a      	ldr	r2, [r7, #4]
 800b460:	429a      	cmp	r2, r3
 800b462:	d869      	bhi.n	800b538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b464:	4b43      	ldr	r3, [pc, #268]	; (800b574 <pvPortMalloc+0x18c>)
 800b466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b468:	4b42      	ldr	r3, [pc, #264]	; (800b574 <pvPortMalloc+0x18c>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b46e:	e004      	b.n	800b47a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	429a      	cmp	r2, r3
 800b482:	d903      	bls.n	800b48c <pvPortMalloc+0xa4>
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1f1      	bne.n	800b470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b48c:	4b36      	ldr	r3, [pc, #216]	; (800b568 <pvPortMalloc+0x180>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b492:	429a      	cmp	r2, r3
 800b494:	d050      	beq.n	800b538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b496:	6a3b      	ldr	r3, [r7, #32]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2208      	movs	r2, #8
 800b49c:	4413      	add	r3, r2
 800b49e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	1ad2      	subs	r2, r2, r3
 800b4b0:	2308      	movs	r3, #8
 800b4b2:	005b      	lsls	r3, r3, #1
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d91f      	bls.n	800b4f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4413      	add	r3, r2
 800b4be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b4c0:	69bb      	ldr	r3, [r7, #24]
 800b4c2:	f003 0307 	and.w	r3, r3, #7
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00a      	beq.n	800b4e0 <pvPortMalloc+0xf8>
	__asm volatile
 800b4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ce:	f383 8811 	msr	BASEPRI, r3
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	f3bf 8f4f 	dsb	sy
 800b4da:	613b      	str	r3, [r7, #16]
}
 800b4dc:	bf00      	nop
 800b4de:	e7fe      	b.n	800b4de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e2:	685a      	ldr	r2, [r3, #4]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	1ad2      	subs	r2, r2, r3
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b4f2:	69b8      	ldr	r0, [r7, #24]
 800b4f4:	f000 f908 	bl	800b708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b4f8:	4b1d      	ldr	r3, [pc, #116]	; (800b570 <pvPortMalloc+0x188>)
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	4a1b      	ldr	r2, [pc, #108]	; (800b570 <pvPortMalloc+0x188>)
 800b504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b506:	4b1a      	ldr	r3, [pc, #104]	; (800b570 <pvPortMalloc+0x188>)
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	4b1b      	ldr	r3, [pc, #108]	; (800b578 <pvPortMalloc+0x190>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d203      	bcs.n	800b51a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b512:	4b17      	ldr	r3, [pc, #92]	; (800b570 <pvPortMalloc+0x188>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4a18      	ldr	r2, [pc, #96]	; (800b578 <pvPortMalloc+0x190>)
 800b518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	4b13      	ldr	r3, [pc, #76]	; (800b56c <pvPortMalloc+0x184>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	431a      	orrs	r2, r3
 800b524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52a:	2200      	movs	r2, #0
 800b52c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b52e:	4b13      	ldr	r3, [pc, #76]	; (800b57c <pvPortMalloc+0x194>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3301      	adds	r3, #1
 800b534:	4a11      	ldr	r2, [pc, #68]	; (800b57c <pvPortMalloc+0x194>)
 800b536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b538:	f7fe fcf8 	bl	8009f2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	f003 0307 	and.w	r3, r3, #7
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <pvPortMalloc+0x174>
	__asm volatile
 800b546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	60fb      	str	r3, [r7, #12]
}
 800b558:	bf00      	nop
 800b55a:	e7fe      	b.n	800b55a <pvPortMalloc+0x172>
	return pvReturn;
 800b55c:	69fb      	ldr	r3, [r7, #28]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3728      	adds	r7, #40	; 0x28
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}
 800b566:	bf00      	nop
 800b568:	24004c50 	.word	0x24004c50
 800b56c:	24004c64 	.word	0x24004c64
 800b570:	24004c54 	.word	0x24004c54
 800b574:	24004c48 	.word	0x24004c48
 800b578:	24004c58 	.word	0x24004c58
 800b57c:	24004c5c 	.word	0x24004c5c

0800b580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b086      	sub	sp, #24
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d04d      	beq.n	800b62e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b592:	2308      	movs	r3, #8
 800b594:	425b      	negs	r3, r3
 800b596:	697a      	ldr	r2, [r7, #20]
 800b598:	4413      	add	r3, r2
 800b59a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	685a      	ldr	r2, [r3, #4]
 800b5a4:	4b24      	ldr	r3, [pc, #144]	; (800b638 <vPortFree+0xb8>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10a      	bne.n	800b5c4 <vPortFree+0x44>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	60fb      	str	r3, [r7, #12]
}
 800b5c0:	bf00      	nop
 800b5c2:	e7fe      	b.n	800b5c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00a      	beq.n	800b5e2 <vPortFree+0x62>
	__asm volatile
 800b5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d0:	f383 8811 	msr	BASEPRI, r3
 800b5d4:	f3bf 8f6f 	isb	sy
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	60bb      	str	r3, [r7, #8]
}
 800b5de:	bf00      	nop
 800b5e0:	e7fe      	b.n	800b5e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	685a      	ldr	r2, [r3, #4]
 800b5e6:	4b14      	ldr	r3, [pc, #80]	; (800b638 <vPortFree+0xb8>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d01e      	beq.n	800b62e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d11a      	bne.n	800b62e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	685a      	ldr	r2, [r3, #4]
 800b5fc:	4b0e      	ldr	r3, [pc, #56]	; (800b638 <vPortFree+0xb8>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	43db      	mvns	r3, r3
 800b602:	401a      	ands	r2, r3
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b608:	f7fe fc82 	bl	8009f10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	685a      	ldr	r2, [r3, #4]
 800b610:	4b0a      	ldr	r3, [pc, #40]	; (800b63c <vPortFree+0xbc>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4413      	add	r3, r2
 800b616:	4a09      	ldr	r2, [pc, #36]	; (800b63c <vPortFree+0xbc>)
 800b618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b61a:	6938      	ldr	r0, [r7, #16]
 800b61c:	f000 f874 	bl	800b708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b620:	4b07      	ldr	r3, [pc, #28]	; (800b640 <vPortFree+0xc0>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	3301      	adds	r3, #1
 800b626:	4a06      	ldr	r2, [pc, #24]	; (800b640 <vPortFree+0xc0>)
 800b628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b62a:	f7fe fc7f 	bl	8009f2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b62e:	bf00      	nop
 800b630:	3718      	adds	r7, #24
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	24004c64 	.word	0x24004c64
 800b63c:	24004c54 	.word	0x24004c54
 800b640:	24004c60 	.word	0x24004c60

0800b644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b644:	b480      	push	{r7}
 800b646:	b085      	sub	sp, #20
 800b648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b64a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b64e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b650:	4b27      	ldr	r3, [pc, #156]	; (800b6f0 <prvHeapInit+0xac>)
 800b652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f003 0307 	and.w	r3, r3, #7
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00c      	beq.n	800b678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	3307      	adds	r3, #7
 800b662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f023 0307 	bic.w	r3, r3, #7
 800b66a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	4a1f      	ldr	r2, [pc, #124]	; (800b6f0 <prvHeapInit+0xac>)
 800b674:	4413      	add	r3, r2
 800b676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b67c:	4a1d      	ldr	r2, [pc, #116]	; (800b6f4 <prvHeapInit+0xb0>)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b682:	4b1c      	ldr	r3, [pc, #112]	; (800b6f4 <prvHeapInit+0xb0>)
 800b684:	2200      	movs	r2, #0
 800b686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	4413      	add	r3, r2
 800b68e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b690:	2208      	movs	r2, #8
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	1a9b      	subs	r3, r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f023 0307 	bic.w	r3, r3, #7
 800b69e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	4a15      	ldr	r2, [pc, #84]	; (800b6f8 <prvHeapInit+0xb4>)
 800b6a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b6a6:	4b14      	ldr	r3, [pc, #80]	; (800b6f8 <prvHeapInit+0xb4>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b6ae:	4b12      	ldr	r3, [pc, #72]	; (800b6f8 <prvHeapInit+0xb4>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	1ad2      	subs	r2, r2, r3
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b6c4:	4b0c      	ldr	r3, [pc, #48]	; (800b6f8 <prvHeapInit+0xb4>)
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	4a0a      	ldr	r2, [pc, #40]	; (800b6fc <prvHeapInit+0xb8>)
 800b6d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	4a09      	ldr	r2, [pc, #36]	; (800b700 <prvHeapInit+0xbc>)
 800b6da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b6dc:	4b09      	ldr	r3, [pc, #36]	; (800b704 <prvHeapInit+0xc0>)
 800b6de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b6e2:	601a      	str	r2, [r3, #0]
}
 800b6e4:	bf00      	nop
 800b6e6:	3714      	adds	r7, #20
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr
 800b6f0:	24001048 	.word	0x24001048
 800b6f4:	24004c48 	.word	0x24004c48
 800b6f8:	24004c50 	.word	0x24004c50
 800b6fc:	24004c58 	.word	0x24004c58
 800b700:	24004c54 	.word	0x24004c54
 800b704:	24004c64 	.word	0x24004c64

0800b708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b710:	4b28      	ldr	r3, [pc, #160]	; (800b7b4 <prvInsertBlockIntoFreeList+0xac>)
 800b712:	60fb      	str	r3, [r7, #12]
 800b714:	e002      	b.n	800b71c <prvInsertBlockIntoFreeList+0x14>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	60fb      	str	r3, [r7, #12]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	429a      	cmp	r2, r3
 800b724:	d8f7      	bhi.n	800b716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	68ba      	ldr	r2, [r7, #8]
 800b730:	4413      	add	r3, r2
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	429a      	cmp	r2, r3
 800b736:	d108      	bne.n	800b74a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	685a      	ldr	r2, [r3, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	441a      	add	r2, r3
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	441a      	add	r2, r3
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d118      	bne.n	800b790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4b15      	ldr	r3, [pc, #84]	; (800b7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	429a      	cmp	r2, r3
 800b768:	d00d      	beq.n	800b786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	685a      	ldr	r2, [r3, #4]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	441a      	add	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681a      	ldr	r2, [r3, #0]
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	e008      	b.n	800b798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b786:	4b0c      	ldr	r3, [pc, #48]	; (800b7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	601a      	str	r2, [r3, #0]
 800b78e:	e003      	b.n	800b798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681a      	ldr	r2, [r3, #0]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d002      	beq.n	800b7a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7a6:	bf00      	nop
 800b7a8:	3714      	adds	r7, #20
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr
 800b7b2:	bf00      	nop
 800b7b4:	24004c48 	.word	0x24004c48
 800b7b8:	24004c50 	.word	0x24004c50

0800b7bc <__libc_init_array>:
 800b7bc:	b570      	push	{r4, r5, r6, lr}
 800b7be:	4d0d      	ldr	r5, [pc, #52]	; (800b7f4 <__libc_init_array+0x38>)
 800b7c0:	4c0d      	ldr	r4, [pc, #52]	; (800b7f8 <__libc_init_array+0x3c>)
 800b7c2:	1b64      	subs	r4, r4, r5
 800b7c4:	10a4      	asrs	r4, r4, #2
 800b7c6:	2600      	movs	r6, #0
 800b7c8:	42a6      	cmp	r6, r4
 800b7ca:	d109      	bne.n	800b7e0 <__libc_init_array+0x24>
 800b7cc:	4d0b      	ldr	r5, [pc, #44]	; (800b7fc <__libc_init_array+0x40>)
 800b7ce:	4c0c      	ldr	r4, [pc, #48]	; (800b800 <__libc_init_array+0x44>)
 800b7d0:	f000 f8f2 	bl	800b9b8 <_init>
 800b7d4:	1b64      	subs	r4, r4, r5
 800b7d6:	10a4      	asrs	r4, r4, #2
 800b7d8:	2600      	movs	r6, #0
 800b7da:	42a6      	cmp	r6, r4
 800b7dc:	d105      	bne.n	800b7ea <__libc_init_array+0x2e>
 800b7de:	bd70      	pop	{r4, r5, r6, pc}
 800b7e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7e4:	4798      	blx	r3
 800b7e6:	3601      	adds	r6, #1
 800b7e8:	e7ee      	b.n	800b7c8 <__libc_init_array+0xc>
 800b7ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7ee:	4798      	blx	r3
 800b7f0:	3601      	adds	r6, #1
 800b7f2:	e7f2      	b.n	800b7da <__libc_init_array+0x1e>
 800b7f4:	0800bad8 	.word	0x0800bad8
 800b7f8:	0800bad8 	.word	0x0800bad8
 800b7fc:	0800bad8 	.word	0x0800bad8
 800b800:	0800badc 	.word	0x0800badc

0800b804 <__retarget_lock_acquire_recursive>:
 800b804:	4770      	bx	lr

0800b806 <__retarget_lock_release_recursive>:
 800b806:	4770      	bx	lr

0800b808 <memcpy>:
 800b808:	440a      	add	r2, r1
 800b80a:	4291      	cmp	r1, r2
 800b80c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b810:	d100      	bne.n	800b814 <memcpy+0xc>
 800b812:	4770      	bx	lr
 800b814:	b510      	push	{r4, lr}
 800b816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b81a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b81e:	4291      	cmp	r1, r2
 800b820:	d1f9      	bne.n	800b816 <memcpy+0xe>
 800b822:	bd10      	pop	{r4, pc}

0800b824 <memset>:
 800b824:	4402      	add	r2, r0
 800b826:	4603      	mov	r3, r0
 800b828:	4293      	cmp	r3, r2
 800b82a:	d100      	bne.n	800b82e <memset+0xa>
 800b82c:	4770      	bx	lr
 800b82e:	f803 1b01 	strb.w	r1, [r3], #1
 800b832:	e7f9      	b.n	800b828 <memset+0x4>

0800b834 <cleanup_glue>:
 800b834:	b538      	push	{r3, r4, r5, lr}
 800b836:	460c      	mov	r4, r1
 800b838:	6809      	ldr	r1, [r1, #0]
 800b83a:	4605      	mov	r5, r0
 800b83c:	b109      	cbz	r1, 800b842 <cleanup_glue+0xe>
 800b83e:	f7ff fff9 	bl	800b834 <cleanup_glue>
 800b842:	4621      	mov	r1, r4
 800b844:	4628      	mov	r0, r5
 800b846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b84a:	f000 b869 	b.w	800b920 <_free_r>
	...

0800b850 <_reclaim_reent>:
 800b850:	4b2c      	ldr	r3, [pc, #176]	; (800b904 <_reclaim_reent+0xb4>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4283      	cmp	r3, r0
 800b856:	b570      	push	{r4, r5, r6, lr}
 800b858:	4604      	mov	r4, r0
 800b85a:	d051      	beq.n	800b900 <_reclaim_reent+0xb0>
 800b85c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b85e:	b143      	cbz	r3, 800b872 <_reclaim_reent+0x22>
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d14a      	bne.n	800b8fc <_reclaim_reent+0xac>
 800b866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b868:	6819      	ldr	r1, [r3, #0]
 800b86a:	b111      	cbz	r1, 800b872 <_reclaim_reent+0x22>
 800b86c:	4620      	mov	r0, r4
 800b86e:	f000 f857 	bl	800b920 <_free_r>
 800b872:	6961      	ldr	r1, [r4, #20]
 800b874:	b111      	cbz	r1, 800b87c <_reclaim_reent+0x2c>
 800b876:	4620      	mov	r0, r4
 800b878:	f000 f852 	bl	800b920 <_free_r>
 800b87c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b87e:	b111      	cbz	r1, 800b886 <_reclaim_reent+0x36>
 800b880:	4620      	mov	r0, r4
 800b882:	f000 f84d 	bl	800b920 <_free_r>
 800b886:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b888:	b111      	cbz	r1, 800b890 <_reclaim_reent+0x40>
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 f848 	bl	800b920 <_free_r>
 800b890:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b892:	b111      	cbz	r1, 800b89a <_reclaim_reent+0x4a>
 800b894:	4620      	mov	r0, r4
 800b896:	f000 f843 	bl	800b920 <_free_r>
 800b89a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b89c:	b111      	cbz	r1, 800b8a4 <_reclaim_reent+0x54>
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f000 f83e 	bl	800b920 <_free_r>
 800b8a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b8a6:	b111      	cbz	r1, 800b8ae <_reclaim_reent+0x5e>
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f000 f839 	bl	800b920 <_free_r>
 800b8ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b8b0:	b111      	cbz	r1, 800b8b8 <_reclaim_reent+0x68>
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 f834 	bl	800b920 <_free_r>
 800b8b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b8ba:	b111      	cbz	r1, 800b8c2 <_reclaim_reent+0x72>
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f000 f82f 	bl	800b920 <_free_r>
 800b8c2:	69a3      	ldr	r3, [r4, #24]
 800b8c4:	b1e3      	cbz	r3, 800b900 <_reclaim_reent+0xb0>
 800b8c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	4798      	blx	r3
 800b8cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b8ce:	b1b9      	cbz	r1, 800b900 <_reclaim_reent+0xb0>
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8d6:	f7ff bfad 	b.w	800b834 <cleanup_glue>
 800b8da:	5949      	ldr	r1, [r1, r5]
 800b8dc:	b941      	cbnz	r1, 800b8f0 <_reclaim_reent+0xa0>
 800b8de:	3504      	adds	r5, #4
 800b8e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8e2:	2d80      	cmp	r5, #128	; 0x80
 800b8e4:	68d9      	ldr	r1, [r3, #12]
 800b8e6:	d1f8      	bne.n	800b8da <_reclaim_reent+0x8a>
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f000 f819 	bl	800b920 <_free_r>
 800b8ee:	e7ba      	b.n	800b866 <_reclaim_reent+0x16>
 800b8f0:	680e      	ldr	r6, [r1, #0]
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f000 f814 	bl	800b920 <_free_r>
 800b8f8:	4631      	mov	r1, r6
 800b8fa:	e7ef      	b.n	800b8dc <_reclaim_reent+0x8c>
 800b8fc:	2500      	movs	r5, #0
 800b8fe:	e7ef      	b.n	800b8e0 <_reclaim_reent+0x90>
 800b900:	bd70      	pop	{r4, r5, r6, pc}
 800b902:	bf00      	nop
 800b904:	24000014 	.word	0x24000014

0800b908 <__malloc_lock>:
 800b908:	4801      	ldr	r0, [pc, #4]	; (800b910 <__malloc_lock+0x8>)
 800b90a:	f7ff bf7b 	b.w	800b804 <__retarget_lock_acquire_recursive>
 800b90e:	bf00      	nop
 800b910:	24004c68 	.word	0x24004c68

0800b914 <__malloc_unlock>:
 800b914:	4801      	ldr	r0, [pc, #4]	; (800b91c <__malloc_unlock+0x8>)
 800b916:	f7ff bf76 	b.w	800b806 <__retarget_lock_release_recursive>
 800b91a:	bf00      	nop
 800b91c:	24004c68 	.word	0x24004c68

0800b920 <_free_r>:
 800b920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b922:	2900      	cmp	r1, #0
 800b924:	d044      	beq.n	800b9b0 <_free_r+0x90>
 800b926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b92a:	9001      	str	r0, [sp, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f1a1 0404 	sub.w	r4, r1, #4
 800b932:	bfb8      	it	lt
 800b934:	18e4      	addlt	r4, r4, r3
 800b936:	f7ff ffe7 	bl	800b908 <__malloc_lock>
 800b93a:	4a1e      	ldr	r2, [pc, #120]	; (800b9b4 <_free_r+0x94>)
 800b93c:	9801      	ldr	r0, [sp, #4]
 800b93e:	6813      	ldr	r3, [r2, #0]
 800b940:	b933      	cbnz	r3, 800b950 <_free_r+0x30>
 800b942:	6063      	str	r3, [r4, #4]
 800b944:	6014      	str	r4, [r2, #0]
 800b946:	b003      	add	sp, #12
 800b948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b94c:	f7ff bfe2 	b.w	800b914 <__malloc_unlock>
 800b950:	42a3      	cmp	r3, r4
 800b952:	d908      	bls.n	800b966 <_free_r+0x46>
 800b954:	6825      	ldr	r5, [r4, #0]
 800b956:	1961      	adds	r1, r4, r5
 800b958:	428b      	cmp	r3, r1
 800b95a:	bf01      	itttt	eq
 800b95c:	6819      	ldreq	r1, [r3, #0]
 800b95e:	685b      	ldreq	r3, [r3, #4]
 800b960:	1949      	addeq	r1, r1, r5
 800b962:	6021      	streq	r1, [r4, #0]
 800b964:	e7ed      	b.n	800b942 <_free_r+0x22>
 800b966:	461a      	mov	r2, r3
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	b10b      	cbz	r3, 800b970 <_free_r+0x50>
 800b96c:	42a3      	cmp	r3, r4
 800b96e:	d9fa      	bls.n	800b966 <_free_r+0x46>
 800b970:	6811      	ldr	r1, [r2, #0]
 800b972:	1855      	adds	r5, r2, r1
 800b974:	42a5      	cmp	r5, r4
 800b976:	d10b      	bne.n	800b990 <_free_r+0x70>
 800b978:	6824      	ldr	r4, [r4, #0]
 800b97a:	4421      	add	r1, r4
 800b97c:	1854      	adds	r4, r2, r1
 800b97e:	42a3      	cmp	r3, r4
 800b980:	6011      	str	r1, [r2, #0]
 800b982:	d1e0      	bne.n	800b946 <_free_r+0x26>
 800b984:	681c      	ldr	r4, [r3, #0]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	6053      	str	r3, [r2, #4]
 800b98a:	4421      	add	r1, r4
 800b98c:	6011      	str	r1, [r2, #0]
 800b98e:	e7da      	b.n	800b946 <_free_r+0x26>
 800b990:	d902      	bls.n	800b998 <_free_r+0x78>
 800b992:	230c      	movs	r3, #12
 800b994:	6003      	str	r3, [r0, #0]
 800b996:	e7d6      	b.n	800b946 <_free_r+0x26>
 800b998:	6825      	ldr	r5, [r4, #0]
 800b99a:	1961      	adds	r1, r4, r5
 800b99c:	428b      	cmp	r3, r1
 800b99e:	bf04      	itt	eq
 800b9a0:	6819      	ldreq	r1, [r3, #0]
 800b9a2:	685b      	ldreq	r3, [r3, #4]
 800b9a4:	6063      	str	r3, [r4, #4]
 800b9a6:	bf04      	itt	eq
 800b9a8:	1949      	addeq	r1, r1, r5
 800b9aa:	6021      	streq	r1, [r4, #0]
 800b9ac:	6054      	str	r4, [r2, #4]
 800b9ae:	e7ca      	b.n	800b946 <_free_r+0x26>
 800b9b0:	b003      	add	sp, #12
 800b9b2:	bd30      	pop	{r4, r5, pc}
 800b9b4:	24004c6c 	.word	0x24004c6c

0800b9b8 <_init>:
 800b9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ba:	bf00      	nop
 800b9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9be:	bc08      	pop	{r3}
 800b9c0:	469e      	mov	lr, r3
 800b9c2:	4770      	bx	lr

0800b9c4 <_fini>:
 800b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c6:	bf00      	nop
 800b9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ca:	bc08      	pop	{r3}
 800b9cc:	469e      	mov	lr, r3
 800b9ce:	4770      	bx	lr
